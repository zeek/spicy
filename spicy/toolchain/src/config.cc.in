// Copyright (c) 2020 by the Zeek Project. See LICENSE for details.

#include <hilti/rt/filesystem.h>

#include <hilti/autogen/config.h>
#include <hilti/base/util.h>

#include <spicy/autogen/config.h>

using namespace spicy;

const auto flatten = hilti::util::flattenParts;
const auto prefix = hilti::util::prefixParts;

template<class T>
inline auto join(const std::vector<T>& v1, const std::vector<T>& v2) {
    std::vector<T> n;

    n.reserve(v1.size() + v2.size());

    for ( const auto& i : v1 )
        n.push_back(i);

    for ( const auto& i : v2 )
        n.push_back(i);

    return n;
}

void Configuration::extendHiltiConfiguration() {
    auto& hlt = hilti::configuration();
    auto& spcy = spicy::configuration();
    spcy.init(hlt.uses_build_directory);

    hlt.hilti_library_paths = join(spcy.spicy_library_paths, hlt.hilti_library_paths);
    hlt.runtime_cxx_flags_debug = join(spcy.runtime_cxx_flags_debug, hlt.runtime_cxx_flags_debug);
    hlt.runtime_ld_flags_debug = join(spcy.runtime_ld_flags_debug, hlt.runtime_ld_flags_debug);
    hlt.runtime_cxx_flags_release = join(spcy.runtime_cxx_flags_release, hlt.runtime_cxx_flags_release);
    hlt.runtime_ld_flags_release = join(spcy.runtime_ld_flags_release, hlt.runtime_ld_flags_release);
    hlt.jit_cxx_flags_debug = join(spcy.jit_cxx_flags_debug, hlt.jit_cxx_flags_debug);
    hlt.jit_ld_flags_debug = join(spcy.jit_ld_flags_debug, hlt.jit_ld_flags_debug);
    hlt.jit_cxx_flags_release = join(spcy.jit_cxx_flags_release, hlt.jit_cxx_flags_release);
    hlt.jit_ld_flags_release = join(spcy.jit_ld_flags_release, hlt.jit_ld_flags_release);
}

Configuration::Configuration() { init(false); }

void Configuration::init(bool use_build_directory) {
    uses_build_directory = use_build_directory;
    std::string installation_tag = (use_build_directory ? "BUILD" : "INSTALL");

    spicyc = (uses_build_directory ? "${PROJECT_BINARY_DIR}/bin/spicyc" : "${CMAKE_INSTALL_PREFIX}/bin/spicyc");

    std::vector<std::string> library_paths;

    if ( auto path = std::getenv("SPICY_PATH") ) {
        library_paths = hilti::util::transform(hilti::util::split(path, ":"), [](auto s) { return std::string(s); });
    }
    else {
        library_paths = flatten({".", prefix("${SPICY_CONFIG_LIBRARY_DIRS}", "", installation_tag)});
    }

    spicy_library_paths = hilti::util::transform(library_paths, [](auto s) { return hilti::rt::filesystem::path(s); });
    spicy_include_paths =
        hilti::util::transform(hilti::util::split(prefix("${SPICY_CONFIG_RUNTIME_INCLUDE_DIRS}", "", installation_tag)),
                               [](auto s) { return hilti::rt::filesystem::path(s); });

    runtime_cxx_flags_debug = flatten({prefix("${SPICY_CONFIG_RUNTIME_INCLUDE_DIRS}", "-I", installation_tag),
                                       prefix("${SPICY_CONFIG_RUNTIME_CXX_FLAGS_DEBUG}", "", installation_tag)});

    runtime_cxx_flags_release = flatten({prefix("${SPICY_CONFIG_RUNTIME_INCLUDE_DIRS}", "-I", installation_tag),
                                         prefix("${SPICY_CONFIG_RUNTIME_CXX_FLAGS_RELEASE}", "", installation_tag)});

    runtime_ld_flags_debug =
        flatten({prefix("${SPICY_CONFIG_RUNTIME_LIBRARY_DIRS_DEBUG}", "-L", installation_tag),
                 prefix("${SPICY_CONFIG_RUNTIME_LIBRARY_DIRS_DEBUG}", "-Wl,-rpath,", installation_tag),
                 prefix("${SPICY_CONFIG_RUNTIME_LIBRARIES_DEBUG}", "-l", installation_tag),
                 prefix("${SPICY_CONFIG_RUNTIME_LD_FLAGS_DEBUG}", "", installation_tag)});

    runtime_ld_flags_release =
        flatten({prefix("${SPICY_CONFIG_RUNTIME_LIBRARY_DIRS_RELEASE}", "-L", installation_tag),
                 prefix("${SPICY_CONFIG_RUNTIME_LIBRARY_DIRS_RELEASE}", "-Wl,-rpath,", installation_tag),
                 prefix("${SPICY_CONFIG_RUNTIME_LIBRARIES_RELEASE}", "-l", installation_tag),
                 prefix("${SPICY_CONFIG_RUNTIME_LD_FLAGS_RELEASE}", "", installation_tag)});

    jit_cxx_flags_debug = flatten({prefix("${SPICY_CONFIG_RUNTIME_INCLUDE_DIRS}", "-I", installation_tag),
                                       prefix("${SPICY_CONFIG_RUNTIME_CXX_FLAGS_DEBUG}", "", installation_tag)});

    jit_cxx_flags_release = flatten({prefix("${SPICY_CONFIG_RUNTIME_INCLUDE_DIRS}", "-I", installation_tag),
                                         prefix("${SPICY_CONFIG_RUNTIME_CXX_FLAGS_RELEASE}", "", installation_tag)});

    jit_ld_flags_debug = flatten({});
    jit_ld_flags_release = flatten({});
};

Configuration& spicy::configuration() {
    static Configuration singleton;
    return singleton;
}
