// Copyright (c) 2020-2021 by the Zeek Project. See LICENSE for details.

class Production_(trait::isProduction) {
    trait isLiteral() from spicy::trait::isLiteral;
    trait isNonTerminal() from spicy::trait::isNonTerminal;
    trait isTerminal() from spicy::trait::isTerminal;

    /**
     * Returns true if it's possible to derive the production to an Epsilon
     * production. Note that it doesn't *always* need to do so, just one
     * possible derivation is sufficient.
     */
    bool nullable() const;

    /**
     * Returns true if running out of data while parsing this production
     * should not be considered an error.
     */
    bool eodOk() const;

    /**
     * Returns true if this production does not recursively contain other
     * productions.
     */
    bool atomic() const;

    /** Returns any type associated with this production. */
    std::optional<Type> type() const;

    /**
     * Returns a readable representation of the production, suitable to
     * include in error message and debugging output. This should usually not
     * be called directly; convert the production into a string instead,
     * which will incorporate the output of this method, but augment it
     * further.
     */
    std::string render() const;

    /**
     * For literals, returns the expression associated with it.
     */
    Expression expression() const if spicy::trait::isLiteral;

    /**
     * Returns a ID for this literal that's guaranteed to be globally
     * unique for the literal's value, including across grmmars.
     */
    int64_t tokenID() const if spicy::trait::isLiteral;

    /**
     * Returns a list of RHS alternatives for this production. Each RHS is
     * itself a list of Production instances.
     */
    std::vector<std::vector<Production>> rhss() const if spicy::trait::isNonTerminal;

    /**
     * Returns the location associated with the production, or Location::None
     * if none.  This is implemented for all productions in `ProductionBase`.
     *
     */
    const Location& location() const;

    /** Returns the symbol associated with the production. This is
    implemented for all productions in `ProductionBase`. */
    const std::string& symbol() const;

    /**
     * Renames the production.  This is implemented for all productions in
     * `ProductionBase`.
     */
    void setSymbol(const std::string& s);

    /**
     * For terminals, returns the filter function associated with it, if any.
     * This is implemented for all productions in `ProductionBase`.
     */
    std::optional<Expression> filter() const if spicy::trait::isTerminal;

    /**
     * For terminals, associates a filter function with it. The filter
     * function will be called when a value has been parsed for the terminal.
     * It must return a value to use instead of the parsed value. This is
     * implemented for all productions in `ProductionBase`.
     */
    void setFilter(const Expression& filter) if spicy::trait::isTerminal;

    /**
     * For terminals, returns the sink associated with it, if any. This is
     * implemented for all productions in `ProductionBase`.
     */
    std::optional<Expression> sink() const if spicy::trait::isTerminal;

    /**
     * For terminals, associates a sink with it. Any parsed data will be
     * forwarded to the sink. This is implemented for all productions in
     * `ProductionBase`.
     */
    void setSink(const Expression& sink) if spicy::trait::isTerminal;

    /**
     * Returns access to the production meta data. The meta data is filled as
     * grammar and parser are being built. This is implemented for all
     * productions in `ProductionBase`.
     */
    const production::Meta& meta() const;

    /**
     * Sets the production meta data. The meta data is filled as
     * grammar and parser are being built. This is implemented for all
     * productions in `ProductionBase`.
     */
    void setMeta(production::Meta m);

    /**
     * Returns the internal meta instance the production is using. For
     * internal infrastructure use only.
     */
    std::shared_ptr<production::Meta> _metaInstance() const;

    /**
     * Sets the internal meta instance the production is using. For internal
     * infrastructure use only.
     */
    void _setMetaInstance(std::shared_ptr<production::Meta> m);
};
