// Copyright (c) 2020 by the Zeek Project. See LICENSE for details.

#include <algorithm>
#include <cctype>

#include <hilti/rt/autogen/version.h>

#include <hilti/autogen/config.h>
#include <hilti/base/util.h>

using namespace hilti;

const auto flatten = util::flattenParts;
const auto prefix = util::prefixParts;

namespace {
std::optional<hilti::rt::filesystem::path> precompiled_libhilti(const Configuration& configuration, bool debug) {
    // We disable use of precompiled headers for sanitizers builds since the
    // sanitizer flags are not exposed on the config level.
    //
    // TODO(bbannier): Allow using of precompiled headers for sanitizer builds.
#ifdef HILTI_HAVE_SANITIZER
    return {};
#endif

    if ( auto&& cache = util::cacheDirectory(configuration) ) {
        const rt::filesystem::path file_name = rt::fmt("precompiled_libhilti%s.h.pch", (debug ? "_debug" : ""));

        if ( auto pch = (*cache) / file_name; rt::filesystem::exists(pch) )
            return pch.replace_extension();
    }

    return {};
}
} // namespace

hilti::Configuration::Configuration() { initLocation(util::currentExecutable().native()); }

void hilti::Configuration::initLocation(bool use_build_directory) { init(use_build_directory); }

void hilti::Configuration::initLocation(const char* argv0) { initLocation(std::string(argv0)); }

void hilti::Configuration::initLocation(const std::string_view& argv0) {
    auto exec = hilti::rt::filesystem::absolute(argv0).native();
    auto prefix = hilti::rt::filesystem::absolute("${CMAKE_BINARY_DIR}").native();
    init(util::startsWith(hilti::rt::normalizePath(exec), hilti::rt::normalizePath(prefix)));
}

void Configuration::init(bool use_build_directory) {
    uses_build_directory = use_build_directory;
    std::string installation_tag = (use_build_directory ? "BUILD" : "INSTALL");

    compiler_id = "${CMAKE_CXX_COMPILER_ID}";
    std::transform(compiler_id.begin(), compiler_id.end(), compiler_id.begin(),
                   [](auto& c) { return std::tolower(c); });

    // Allow to set a compiler wrapper through environment.
    auto hilti_cxx = getenv("HILTI_CXX");
    if ( hilti_cxx && *hilti_cxx )
        cxx = hilti_cxx;
    else
        cxx = "${CMAKE_CXX_COMPILER}";

    distbase = "${CMAKE_SOURCE_DIR}";
    install_prefix = "${CMAKE_INSTALL_PREFIX}";
    build_directory = "${CMAKE_BINARY_DIR}";
    lib_directory = (uses_build_directory ? "${PROJECT_BINARY_DIR}/lib" : "${CMAKE_INSTALL_FULL_LIBDIR}");
    hiltic = (uses_build_directory ? "${PROJECT_BINARY_DIR}/bin/hiltic" : "${CMAKE_INSTALL_PREFIX}/bin/hiltic");
    version_number = PROJECT_VERSION_NUMBER;
    version_major = PROJECT_VERSION_MAJOR;
    version_minor = PROJECT_VERSION_MINOR;
    version_patch = PROJECT_VERSION_PATCH;
    version_prerelease = PROJECT_VERSION_PRERELEASE;
    version_string = PROJECT_VERSION_STRING_SHORT;
    version_string_long = PROJECT_VERSION_STRING_LONG;

    std::vector<std::string> library_paths;

    if ( auto hilti_library_paths = std::getenv("HILTI_PATH") ) {
        library_paths =
            util::transform(hilti::rt::split(hilti_library_paths, ":"), [](auto s) { return std::string(s); });
    }
    else {
        library_paths = flatten({".", prefix("${HILTI_CONFIG_LIBRARY_DIRS}", "", installation_tag)});
    }

    hilti_library_paths = util::transform(library_paths, [](auto s) { return hilti::rt::filesystem::path(s); });
    hilti_include_paths =
        util::transform(hilti::util::split(prefix("${HILTI_CONFIG_RUNTIME_INCLUDE_DIRS}", "", installation_tag)),
                        [](auto s) { return hilti::rt::filesystem::path(s); });

    // We hardcode the main compiler flags here instead of injecting them from
    // CMake to make it clear that they are really independent on what CMake
    // uses to compile the toolchain. This localizes the options here, and also
    // allows us to customize them by use-case (JIT vs AOT). We do still inject
    // some additional flags from CMake where we rely on stuff that CMake
    // inferred about the environment.
    //
    // We compile generated code with hidden default symbol visibility because
    // that:
    //
    // (1) reflects the public/non-public distinction at the HILTI level
    //
    // (2) avoids trouble when having the same symbols defined in multiple
    // translation units (which can happen, e.g., because of code reuse).
    //
    // (3) it helps the optimizer to know that symbols won't be accessed
    // externally.
    runtime_cxx_flags_debug = flatten({"-fPIC", "-std=c++17", "-g", "-fvisibility=hidden",
                                       prefix("${HILTI_CONFIG_RUNTIME_INCLUDE_DIRS}", "-I", installation_tag),
                                       prefix("${HILTI_CONFIG_RUNTIME_CXX_FLAGS_DEBUG}", "", installation_tag)});

    runtime_cxx_flags_release = flatten({"-fPIC", "-std=c++17", "-g", "-O3", "-DNDEBUG", "-fvisibility=hidden",
                                         prefix("${HILTI_CONFIG_RUNTIME_INCLUDE_DIRS}", "-I", installation_tag),
                                         prefix("${HILTI_CONFIG_RUNTIME_CXX_FLAGS_RELEASE}", "", installation_tag)});


    if ( auto libhilti_pch = precompiled_libhilti(*this, true) )
        runtime_cxx_flags_debug.push_back(rt::fmt("-include%s", libhilti_pch->c_str()));

    if ( auto libhilti_pch = precompiled_libhilti(*this, false) )
        runtime_cxx_flags_release.push_back(rt::fmt("-include%s", libhilti_pch->c_str()));

    runtime_ld_flags_debug =
        flatten({prefix("${HILTI_CONFIG_RUNTIME_LIBRARY_DIRS_DEBUG}", "-L", installation_tag),
                 prefix("${HILTI_CONFIG_RUNTIME_LIBRARY_DIRS_DEBUG}", "-Wl,-rpath,", installation_tag),
                 prefix("${HILTI_CONFIG_RUNTIME_LIBRARIES_DEBUG}", "-l", installation_tag),
                 prefix("${HILTI_CONFIG_RUNTIME_LD_FLAGS_DEBUG}", "", installation_tag),
                 prefix(CMAKE_DL_LIBS, "-l", installation_tag)});

    runtime_ld_flags_release =
        flatten({prefix("${HILTI_CONFIG_RUNTIME_LIBRARY_DIRS_RELEASE}", "-L", installation_tag),
                 prefix("${HILTI_CONFIG_RUNTIME_LIBRARY_DIRS_RELEASE}", "-Wl,-rpath,", installation_tag),
                 prefix("${HILTI_CONFIG_RUNTIME_LIBRARIES_RELEASE}", "-l", installation_tag),
                 prefix("${HILTI_CONFIG_RUNTIME_LD_FLAGS_RELEASE}", "", installation_tag),
                 prefix(CMAKE_DL_LIBS, "-l", installation_tag)});

    hlto_cxx_flags_debug = runtime_cxx_flags_debug;
    hlto_cxx_flags_release = runtime_cxx_flags_release;

    hlto_ld_flags_debug = flatten({"-shared", "-Wl,-undefined", "-Wl,dynamic_lookup"});
    hlto_ld_flags_release = flatten({"-shared", "-Wl,-undefined", "-Wl,dynamic_lookup"});

#ifdef __APPLE_
    // This avoids duplicate symbols when the HLTO is loaded, seems default
    // linker behavior is different on macOS.
    hlto_ld_flags_debug.push_back("-nostdlib");
    hlto_ld_flags_release.push_back("-nostdlib");
#endif
};

Configuration& hilti::configuration() {
    static Configuration singleton;
    return singleton;
}
