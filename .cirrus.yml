environment:
    CCACHE_BASEDIR: $CIRRUS_WORKING_DIR

    # Enforce sequential JIT'ing of files for controlled memory usage.
    HILTI_JIT_SEQUENTIAL: 1

    # Images for macOS
    IMAGE_MACOS_MONTEREY: ghcr.io/cirruslabs/macos-monterey-base:latest
    IMAGE_MACOS_VENTURA: ghcr.io/cirruslabs/macos-ventura-base:latest

    # Branches to use for spicy-plugin and spicy-analyzers tests.
    ZEEK_SPICY_BRANCH:      main
    ZEEK_ANALYZERS_BRANCH:  main

lint_task:
  container:
    dockerfile: ci/Dockerfile
    cpu: 4
    memory: 12G

  timeout_in: 120m

  always:
    ccache_cache:
      folder: /tmp/ccache
      fingerprint_script: echo $CIRRUS_TASK_NAME-$CIRRUS_OS

  env:
    CCACHE_DIR: /tmp/ccache
    CCACHE_COMPRESS: 1
    LD_LIBRARY_PATH: /usr/lib/llvm-15/lib/clang/15.0.6/lib/linux/

  update_git_script:
    - git submodule update --recursive --init

  configure_script:   ./ci/run-ci -b build configure debug --cxx-compiler clang++-15 --clang-format `which clang-format-15` --clang-tidy `which clang-tidy-15` --rpath /usr/lib/llvm-15/lib/clang/15.0.6/lib/linux/
  build_script:       ./ci/run-ci -b build build
  test_code_script:   ./ci/run-ci -b build test-code

  on_failure:
    ci_artifacts:
      path: artifacts
    junit_artifacts:
      path: artifacts/diag.xml
      type: text/xml
      format: junit
    clang_artifacts:
        path: build/ci

clang12_ubuntu_debug_task:
  container:
    dockerfile: ci/Dockerfile
    cpu: 4
    memory: 12G

  timeout_in: 120m

  always:
    ccache_cache:
      folder: /tmp/ccache
      fingerprint_script: echo $CIRRUS_TASK_NAME-$CIRRUS_OS

  env:
    CCACHE_DIR: /tmp/ccache
    CCACHE_COMPRESS: 1
    LD_LIBRARY_PATH: /usr/lib/llvm-12/lib/clang/12.0.1/lib/linux/

  update_git_script:
    - git submodule update --recursive --init

  configure_script:   ./ci/run-ci -b build configure debug --cxx-compiler clang++-12 --clang-format `which clang-format-12` --clang-tidy `which clang-tidy-12` --rpath /usr/lib/llvm-12/lib/clang/12.0.1/lib/linux/
  build_script:       ./ci/run-ci -b build build
  test_build_script:  ./ci/run-ci -b build test-build
  install_script:     ./ci/run-ci -b build install
  packaging_script:
    - ninja -C build package

  packages_artifacts:
    path: build/spicy*.tar.gz
    type: application/gzip

  on_failure:
    ci_artifacts:
      path: artifacts
    junit_artifacts:
      path: artifacts/diag.xml
      type: text/xml
      format: junit
    clang_artifacts:
        path: build/ci

clang10_lts_ubuntu_release_task:
  container:
    dockerfile: ci/Dockerfile
    cpu: 4
    memory: 8G

  timeout_in: 120m

  always:
    ccache_cache:
      folder: /tmp/ccache
      fingerprint_script: echo $CIRRUS_TASK_NAME-$CIRRUS_OS

  env:
    CCACHE_DIR: /tmp/ccache
    CCACHE_COMPRESS: 1

  update_git_script:
    - git submodule update --recursive --init

  configure_script:      ./ci/run-ci -b build configure release --cxx-compiler clang++-10 --clang-format `which clang-format-10` --clang-tidy `which clang-tidy-10`
  build_script:          ./ci/run-ci -b build build
  test_build_script:     ./ci/run-ci -b build test-build
  install_script:        ./ci/run-ci -b build install
  cleanup_script:        ./ci/run-ci -b build cleanup
  test_install_script:   ./ci/run-ci -b build test-install
  packaging_script:
    - ninja -C build package

  packages_artifacts:
    path: build/spicy*.tar.gz
    type: application/gzip

  on_failure:
    ci_artifacts:
      path: artifacts
    junit_artifacts:
      path: artifacts/diag.xml
      type: text/xml
      format: junit

clang9_lts_ubuntu_release_static_task:
  container:
    dockerfile: ci/Dockerfile
    cpu: 4
    memory: 8G

  timeout_in: 120m

  always:
    ccache_cache:
      folder: /tmp/ccache
      fingerprint_script: echo $CIRRUS_TASK_NAME-$CIRRUS_OS

  env:
    CCACHE_DIR: /tmp/ccache
    CCACHE_COMPRESS: 1

  update_git_script:
    - git submodule update --recursive --init

  configure_script:      ./ci/run-ci -b build configure release --cxx-compiler clang++-9 --clang-format `which clang-format-10` --clang-tidy `which clang-tidy-10` --build-static-libs
  build_script:          ./ci/run-ci -b build build
  install_script:        ./ci/run-ci -b build install
  cleanup_script:        ./ci/run-ci -b build cleanup
  test_install_script:   ./ci/run-ci -b build test-install

  on_failure:
    ci_artifacts:
      path: artifacts
    junit_artifacts:
      path: artifacts/diag.xml
      type: text/xml
      format: junit

clang11_nightly_task:
  # This task is only executed on main.
  # Failing this task does not fail the build.
  skip: $CIRRUS_BRANCH != 'main' && $CIRRUS_TAG == ''
  allow_failures: true

  container:
    dockerfile: ci/Dockerfile
    cpu: 4
    memory: 8G

  timeout_in: 120m

  always:
    ccache_cache:
      folder: /tmp/ccache
      fingerprint_script: echo $CIRRUS_TASK_NAME-$CIRRUS_OS

  env:
    CCACHE_DIR: /tmp/ccache
    CCACHE_COMPRESS: 1
    LD_LIBRARY_PATH: /usr/lib/llvm-11/lib/clang/9.0.1/lib/linux/

  update_git_script:
    - git submodule update --recursive --init

  configure_script:      ./ci/run-ci -b build configure release --cxx-compiler clang++-11 --clang-format `which clang-format-11` --clang-tidy `which clang-tidy-11`
  build_script:          ./ci/run-ci -b build build
  test_build_script:     ./ci/run-ci -b build test-build
  install_script:        ./ci/run-ci -b build install
  cleanup_script:        ./ci/run-ci -b build cleanup
  test_install_script:   ./ci/run-ci -b build test-install
  packaging_script:
    - ninja -C build package

  packages_artifacts:
    path: build/spicy*.tar.gz
    type: application/gzip

  on_failure:
    ci_artifacts:
      path: artifacts
    junit_artifacts:
      path: artifacts/diag.xml
      type: text/xml
      format: junit

no_toolchain_task:
  container:
    dockerfile: ci/Dockerfile
    cpu: 4
    memory: 12G

  timeout_in: 120m

  always:
    ccache_cache:
      folder: /tmp/ccache
      fingerprint_script: echo $CIRRUS_TASK_NAME-$CIRRUS_OS

  env:
    CCACHE_DIR: /tmp/ccache
    CCACHE_COMPRESS: 1

  update_git_script:
    - git submodule update --recursive --init

  configure_script:      ./ci/run-ci -b build configure release --build-toolchain no
  build_script:          ./ci/run-ci -b build build
  install_script:        ./ci/run-ci -b build install
  packaging_script:
    - ninja -C build package

  packages_artifacts:
    path: build/spicy*.tar.gz
    type: application/gzip

  on_failure:
    ci_artifacts:
      path: artifacts
    junit_artifacts:
      path: artifacts/diag.xml
      type: text/xml
      format: junit

validate_release_tarball_task:
  skip: $CIRRUS_BRANCH != 'main' && $CIRRUS_TAG == ''

  container:
    dockerfile: ci/Dockerfile
    cpu: 4
    memory: 12G

  timeout_in: 120m

  always:
    ccache_cache:
      folder: /tmp/ccache
      fingerprint_script: echo $CIRRUS_TASK_NAME-$CIRRUS_OS

  env:
    CCACHE_DIR: /tmp/ccache
    CCACHE_COMPRESS: 1

  update_git_script:
    - git submodule update --recursive --init

  create_tarball_script:
    - scripts/make-tarball.sh
  unpack_script:
    - mkdir /tmp/spicy-tarball
    - tar xf spicy*.tar.gz -C /tmp/spicy-tarball
  configure_script:
    - cd /tmp/spicy-tarball/spicy-*
    - ./configure --generator=Ninja --enable-ccache --prefix=/opt/spicy --enable-werror --with-hilti-compiler-launcher=ccache
  build_script:
    - cd /tmp/spicy-tarball/spicy-*
    - ninja -j3 -C build
  test_build_script:
    - cd /tmp/spicy-tarball/spicy-*
    - make -C tests

zeek_plugin_task:
  timeout_in: 120m
  container:
    dockerfile: ci/Dockerfile
    matrix:
      - docker_arguments:
        - ZEEK_VERSION: v5.0.5
    cpu: 4
    memory: 12G

  env:
    CCACHE_DIR: /tmp/ccache
    PATH: /opt/spicy/bin:$PATH

  always:
    ccache_cache:
      folder: /tmp/ccache
      fingerprint_script: echo $CIRRUS_TASK_NAME-$CIRRUS_OS

  update_git_script:
    - git fetch --tags
    - git submodule update --recursive --init

  install_spicy_script:
    - ./configure --generator=Ninja --enable-ccache --prefix=/opt/spicy --enable-werror
    - ninja -j4 -C build install
    - rm -rf build

  install_plugin_script:
    - zkg -vvvvv install zeek/spicy-plugin --force --version=$ZEEK_SPICY_BRANCH

  install_analyzers_script:
    - echo Y | zkg -vvvvv install zeek/spicy-analyzers --version=$ZEEK_ANALYZERS_BRANCH

  on_failure:
    show_logs_script:
      - tail -n 1000000 $(zkg config state_dir)/logs/*.log
