# @TEST-EXEC: spicyc -Z -j -d %INPUT -o test.hlto
#
# Parsing a unit with synchronization.
# @TEST-EXEC: printf 'ABCDE' | HILTI_DEBUG=spicy-verbose spicy-driver -i 1 -d -p test::A test.hlto >>output 2>&1
# @TEST-EXEC: printf '111ABCDE' | HILTI_DEBUG=spicy-verbose spicy-driver -i 1 -d -p test::A test.hlto >>output 2>&1
# @TEST-EXEC: printf 'ACDE' | HILTI_DEBUG=spicy-verbose spicy-driver -i 1 -d -p test::A test.hlto >>output 2>&1
# @TEST-EXEC: printf 'BCDE' | HILTI_DEBUG=spicy-verbose spicy-driver -i 1 -d -p test::A test.hlto >>output 2>&1
# @TEST-EXEC: printf 'ADE' | HILTI_DEBUG=spicy-verbose spicy-driver -i 1 -d -p test::A test.hlto >>output 2>&1
# @TEST-EXEC-FAIL: printf 'AE' | HILTI_DEBUG=spicy-verbose spicy-driver -i 1 -d -p test::A test.hlto >>output 2>&1
# @TEST-EXEC-FAIL: printf 'A' | HILTI_DEBUG=spicy-verbose spicy-driver -i 1 -d -p test::A test.hlto >>output 2>&1
# @TEST-EXEC-FAIL: printf '123' | HILTI_DEBUG=spicy-verbose spicy-driver -i 1 -d -p test::A test.hlto >>output 2>&1

# @TEST-EXEC: printf 'BEGIN123END' | HILTI_DEBUG=spicy-verbose spicy-driver -i 1 -d -p test::E test.hlto >>output 2>&1
# @TEST-EXEC: printf 'BEGINabcEND' | HILTI_DEBUG=spicy-verbose spicy-driver -i 1 -d -p test::E test.hlto >>output 2>&1
# @TEST-EXEC: printf 'abcEND' | HILTI_DEBUG=spicy-verbose spicy-driver -i 1 -d -p test::E test.hlto >>output 2>&1
# @TEST-EXEC: printf '123END' | HILTI_DEBUG=spicy-verbose spicy-driver -i 1 -d -p test::E test.hlto >>output 2>&1
#
# Effects of `confirm`/`reject` outside of synchronization.
# @TEST-EXEC: printf '1' | HILTI_DEBUG=spicy-verbose spicy-driver -i 1 -d -p test::B test.hlto >>output 2>&1
# @TEST-EXEC-FAIL: printf '1' | HILTI_DEBUG=spicy-verbose spicy-driver -i 1 -d -p test::C test.hlto >>output 2>&1
#
# Synchronization hooks are not invoked for normal parsing.
# @TEST-EXEC: printf '1' | HILTI_DEBUG=spicy-verbose spicy-driver -i 1 -d -p test::D test.hlto >>output 2>&1
#
# @TEST-EXEC: cat output | ${SCRIPTS}/canonify-spicy-debug | ${SCRIPTS}/canonify-hiltic >output.canonified
# @TEST-EXEC: mv output.canonified output
# @TEST-EXEC: btest-diff output
#
# @TEST-EXEC: printf '111ABCDE' | spicy-driver -Z -i 1 -d -p test::A test.hlto 2>prof.raw
# @TEST-EXEC: cat prof.raw | grep -E '^(#name|spicy/unit)' | awk '{ print $1, $2, $6; next }' | sort >prof
# @TEST-EXEC: btest-diff prof
#
# @TEST-DOC: Tests synchronization on the unit level.

module test;

public type A = unit {
    a: /A/;
     : /()/; # avoid offset syncing
    b: b"B" &synchronize;
    c: /C/;
     : /()/; # avoid offset syncing
    d: /D/ &synchronize;
    e: /E/;

    on %synced { print "Synced: %s" % self; confirm; }
    on %confirmed { print "Confirmed: %s" % self; }
    on %rejected { print "Rejected: %s" % self; }
    on %done { print "Done: %s" % self; }
    on %error { print "Error: %s" % self; }
};

public type B = unit {
    x: uint8 { confirm; }
    on %synced { print "Synced: %s" % self; confirm; }
    on %confirmed { print "Confirmed: %s" % self; }
    on %rejected { print "Rejected: %s" % self; }
    on %done { print "Done: %s" % self; }
    on %error { print "Error: %s" % self; }
};

public type C = unit {
    x: uint8 { reject; }
    on %synced { print "Synced: %s" % self; confirm; }
    on %confirmed { print "Confirmed: %s" % self; }
    on %rejected { print "Rejected: %s" % self; }
    on %done { print "Done: %s" % self; }
    on %error { print "Error: %s" % self; }
};

public type D = unit {
    x: uint8 {}
    on %synced { print "Synced: %s" % self; confirm; }
    on %confirmed { print "Confirmed: %s" % self; }
    on %rejected { print "Rejected: %s" % self; }
    on %done { print "Done: %s" % self; }
    on %error { print "Error: %s" % self; }
};

# Type for testing lookahead from switch.
public type E = unit {
     : b"BEGIN";
     : /()/; # avoid offset syncing
    a: E_A &synchronize;
     : b"END";

    on %synced { print "Synced: %s" % self; confirm; }
    on %confirmed { print "Confirmed: %s" % self; }
    on %rejected { print "Rejected: %s" % self; }
    on %done { print "Done: %s" % self; }
    on %error { print "Error: %s" % self; }
};

type E_A = unit {
    switch {
        -> x: E_X;
        -> y: E_Y;
    };
};

type E_X = unit {
    x: /123/;
};

type E_Y = unit {
    y: /abc/;
};
