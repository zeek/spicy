# @TEST-REQUIRES: which FileCheck
# @TEST-EXEC: spicyc %INPUT -p -o output.hlt -D optimizer >log 2>&1
# @TEST-EXEC: FileCheck %INPUT < output.hlt

# @TEST-DOC: Tests optimizations performing removal unneeded error push/pop for unused synchronization.

# Basic units without synchronization. We do not expect any updates to `self.__error` here.
###########################################################################################
module foo;

# CHECK-NOT: = __error;
# CHECK-NOT: .__error = __error;

public type P0 = unit {};

public type P1 = unit {
    x: uint8;
};

# @TEST-START-NEXT
module foo;
# If a unit has an `%error` hook we push any error before the hook.
###################################################################

public type P2 = unit {
    x: uint8;
    y: uint8 {}

# CHECK: (*self).__error = __error;
# CHECK-NEXT: (*self).__on_y((*self).y);
# CHECK-NEXT: __error = (*self).__error;
    on %error {}
};

# @TEST-START-NEXT
module foo;
# For a unit with a vector field and a hook we would redundantly push/pop the error.
####################################################################################

public type Datas = unit {
    : Data[] {}
};

# CHECK: End parsing production: Unit: foo__Data -> ty
# CHECK-NOT: (*self).__error = __error;
# CHECK-NOT: __error = __error;
# CHECK: return __result;
type Data = unit {
    ty: uint8;
};
