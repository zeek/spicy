# @TEST-REQUIRES: which spicy-build
# @TEST-EXEC: spicy-build -d -S %INPUT type-info.cc && ./a.out

module Test {

import hilti;

type Enum = enum { A = 1, B = 2, C = 4 };
type Exception = exception;
type TypeInfo = __library_type_const("hilti::rt::TypeInfo*");

type Struct = struct {
    string s;
    int<64> i;
};

# Name the union type with leading 'A' so that the codegen prints out the union
# first. That ensures that the C++-side order of typedefs works. Normally, we'd
# declare the union &on-heap instead to make it independent of the order,
# however, our C++ code in type-info.cc then wouldn't easily be able to
# distinguish the resulting value_ref<Union> from the value_ref<Struct>.
type A_Union = union {
    string s,
    int<64> i
};

type Bitfield = bitfield(32) {
    a: 0..4 &convert="string";
    b: 1..2 &convert=(2 * $$);
    c: 3..7;
};

public type TestTypes = struct {
    addr ad;
    any an;
    Bitfield bf;
    bool bo;
    bytes by;
    iterator<bytes> bi;
    Enum en;
    error er;
    exception ex;
    # method void test(); # Can't test - won't be included into type info.
    interval in_;
    hilti::MatchState li;
    map<uint<64>, string> ma;
    iterator<map<uint<64>, string>> mai;
    net ne;
    optional<string> op;
    port po;
    real re;
    regexp rx;
    result<string> rs;
    set<string> se;
    iterator<set<string>> sei;
    int<8> i8;
    int<16> i16;
    int<32> i32;
    int<64> i64;
    stream st;
    iterator<stream> sti;
    view<stream> stv;
    string str;
    strong_ref<Struct> sr;
    Struct stru;
    time ti;
    type ty;
    tuple<a: int<32>, string, c: bool> tu;
    A_Union un;
    uint<8> ui8;
    uint<16> ui16;
    uint<32> ui32;
    uint<64> ui64;
    vector<string> ve;
    iterator<vector<string>> vei;
    value_ref<Struct> vr;
    # void vo; # can't test - cannot be used as a struct field
    weak_ref<Struct> wr;
};

public type TestOptionals = struct {
    string opt_set &optional;
    string opt_unset &optional;
};

global Vector = vector("11", "22", "33");
global Map = map(1: "foo-1", 2: "foo-2");
global Set = set("aaa", "bbb", "ccc");
global Bytes = b"bytes";
global Stream = stream(b"stream");
global Bitfield bf = 255;

public function tuple<TypeInfo, TypeInfo, TypeInfo> getThreeTypeInfos() {
    # Test different expressions for retrieving type information.
    local Struct s;
    return (typeinfo(bytes), typeinfo(Struct), typeinfo(s));
}

public function tuple<strong_ref<TestTypes>, strong_ref<TestTypes>, TypeInfo> makeTestTypes() {
    local S = new Struct;
    S.s = "string";
    S.i = 42;

    local A_Union U;
    U.i = 42;

    local re = /abc/ &nosub;
    local hilti::MatchState MS = re.token_matcher();
    local Exception E;

    local TestTypes x = [
        $ad = 1.2.3.4,
        $an = "any",
        $bf = bf,
        $bo = True,
        $by = b"bytes",
        $bi = begin(Bytes),
        $en = Enum::B,
        $er = error("error"),
        $ex = E,
        $in_ = interval(5.0),
        $li = MS,
        $ma = Map,
        $mai = begin(Map),
        $ne = 1.2.3.4/16,
        $op = "optional",
        $po = 1234/udp,
        $re = 3.14,
        $rx = /foo/,
        $rs = "result",
        $se = Set,
        $sei = begin(Set),
        $i8 = -8,
        $i16 = -16,
        $i32 = -32,
        $i64 = -64,
        $st = Stream,
        $sti = begin(Stream),
        $stv = Stream,
        $str = "string",
        $sr = S,
        $stru = *S,
        $ti = time(1295415110.5),
        $ty = Struct,
        $tu = (123, "string", True),
        $un = U,
        $ui8 = 8,
        $ui16 = 16,
        $ui32 = 32,
        $ui64 = 64,
        $ve = Vector,
        $vei = begin(Vector),
        $vr = S,
        $wr = S
    ];

    local x_ = new TestTypes;
    *x_ = x;
    return (x_, new TestTypes, typeinfo(TestTypes));
}

public function tuple<strong_ref<TestOptionals>, TypeInfo> makeTestOptionals() {
    local TestOptionals x = [
        $opt_set = "yes"
    ];

    local x_ = new TestOptionals;
    *x_ = x;
    return (x_, typeinfo(TestOptionals));
}

}

# @TEST-START-FILE type-info.cc
// Standalone test application that exercises the HILTI-side type-info API.

#include <tuple>

#include <hilti/rt/libhilti.h>

using namespace hilti::rt;

namespace __hlt::Test {
// Prototypes extracted from the output of "hiltic -P '' type-info.hlt"
struct TestTypes;
struct TestOptionals;

extern auto makeTestTypes()
    -> Tuple<hilti::rt::StrongReference<__hlt::Test::TestTypes>,
                  hilti::rt::StrongReference<__hlt::Test::TestTypes>, const ::hilti::rt::TypeInfo*>;

extern auto makeTestOptionals()
    -> Tuple<hilti::rt::StrongReference<__hlt::Test::TestOptionals>, const ::hilti::rt::TypeInfo*>;

extern auto getThreeTypeInfos()
    -> Tuple<const ::hilti::rt::TypeInfo*, const ::hilti::rt::TypeInfo*, const ::hilti::rt::TypeInfo*>;

} // namespace __hlt::Test

// Global counters for errors. Test will fail if this is non-zero at
// termination.
static int errors = 0;

// Macro ensuring two arguments are equal.
#define CHECK_EQ(x, y) __check_eq(x, y, hilti::rt::fmt("%s:%d", __FILE__, __LINE__))

// Macro ensuring a condition is true.
#define CHECK(cond) __check_eq(static_cast<bool>(cond), true, hilti::rt::fmt("%s:%d", __FILE__, __LINE__))

// Macro recording a type is having been visited. Must only be called from
// within one of the visitors defined below.
#define SEEN() seen.insert(v.type().tag);

// Backend for CHECK macros.
template<typename T, typename U>
void __check_eq(const T& x, const U& y, std::string loc) {
    if ( x == y )
        return;

    std::cerr << fmt("Failed comparison: %s == %s (%s)", x, y, loc) << std::endl;
    abort();
    errors++;
}

// Visitor that checks expected values in fully initialized struct of type
// "TypesInit".
struct VisitorTypesInit {
    std::set<TypeInfo::Tag> seen;
    static inline const int ExpectedVisitorsSeen = 42; // all (45) minus void and function and MatchState (which comes as struct)

    // Helper for checking content of a struct of type "S". All our instances
    // of "S" have the same values.
    void testStruct(const type_info::Value& v) {
        auto s = type_info::value::auxType<type_info::Struct>(v)->iterate(v);
        if ( s.empty() )
            // We get here for hilti::MatchState
            return;

        auto i = s.begin();
        auto fv = i->second;
        CHECK_EQ(i->first.name, "s");
        CHECK(fv);
        CHECK_EQ(type_info::value::auxType<type_info::String>(fv)->get(fv), "string");
        fv = (++i)->second;
        CHECK_EQ(i->first.name, "i");
        CHECK_EQ(type_info::value::auxType<type_info::SignedInteger<int64_t>>(fv)->get(fv), 42);
        CHECK(++i == s.end());

        CHECK_EQ(v.to_string(), "[$s=\"string\", $i=42]");
    }

    void visit(const hilti::rt::type_info::Value& v) {
        const auto& type = v.type();

        switch ( type.tag ) {
            case TypeInfo::Undefined:
                CHECK(false); // Unreachable.
                break;
            case TypeInfo::Address: {
                SEEN();
                CHECK_EQ(type.address->get(v), Address("1.2.3.4"));
                break;
            }
            case TypeInfo::Any: {
                SEEN();
                break;
            }
            case TypeInfo::Bitfield: {
                SEEN();
                const auto* x = type.tuple;
                auto s = x->iterate(v);
                auto i = s.begin();

                auto opt1 = type_info::value::auxType<type_info::Optional>(i->second)->value(i->second);
                CHECK_EQ(type_info::value::auxType<type_info::String>(opt1)->get(opt1), "string");
                CHECK_EQ(i->first.name, "a");
                ++i;

                auto opt2 = type_info::value::auxType<type_info::Optional>(i->second)->value(i->second);
                CHECK_EQ(type_info::value::auxType<type_info::UnsignedInteger<uint32_t>>(opt2)->get(opt2), 6);
                CHECK_EQ(i->first.name, "b");
                ++i;

                auto opt3 = type_info::value::auxType<type_info::Optional>(i->second)->value(i->second);
                CHECK_EQ(type_info::value::auxType<type_info::UnsignedInteger<uint32_t>>(opt3)->get(opt3), 31);
                CHECK_EQ(i->first.name, "c");
                ++i;

                CHECK(i == s.end());
                CHECK_EQ(x->elements().size(), 3);
                break;
            }
            case TypeInfo::Bool: {
                SEEN();
                CHECK_EQ(type.bool_->get(v), true);
                break;
            }
            case TypeInfo::Bytes: {
                SEEN();
                CHECK_EQ(type.bytes->get(v), "bytes"_b);
                break;
            }
            case TypeInfo::BytesIterator: {
                SEEN();
                CHECK_EQ(*type.bytes_iterator->get(v), 'b');
                break;
            }
            case TypeInfo::Enum: {
                const auto* x = type.enum_;
                SEEN();
                CHECK_EQ(x->get(v).value, 2);
                CHECK_EQ(x->get(v).name, "B");
                CHECK_EQ(x->labels().size(), 4);
                break;
            }
            case TypeInfo::Error: {
                SEEN();
                CHECK_EQ(type.error->get(v).description(), "error");
                break;
            }
            case TypeInfo::Exception: {
                SEEN();
                CHECK_EQ(type.exception->get(v).description(), "");
                break;
            }
            case TypeInfo::Function: {
                SEEN();
                break;
            }
            case TypeInfo::Interval: {
                SEEN();
                CHECK_EQ(type.interval->get(v), Interval(5, Interval::SecondTag()));
                break;
            }
            case TypeInfo::Library: {
                SEEN();
                CHECK_EQ(type.library->cxxName(), "::hilti::rt::TypeInfo*");
                CHECK_EQ(std::string(type.library->get(v)->display), "Test::Struct");
                CHECK_EQ(v.to_string(), "<::hilti::rt::TypeInfo*>");
                break;
            }
            case TypeInfo::Map: {
                SEEN();
                auto s = type.map->iterate(v);
                auto i = s.begin();
                auto [k1, v1] = *i++;
                CHECK_EQ(type_info::value::auxType<type_info::UnsignedInteger<uint64_t>>(k1)->get(k1), 1);
                CHECK_EQ(type_info::value::auxType<type_info::String>(v1)->get(v1), "foo-1");
                auto [k2, v2] = *i++;
                CHECK_EQ(type_info::value::auxType<type_info::UnsignedInteger<uint64_t>>(k2)->get(k2), 2);
                CHECK_EQ(type_info::value::auxType<type_info::String>(v2)->get(v2), "foo-2");
                CHECK(++i == s.end());

                break;
            }
            case TypeInfo::MapIterator: {
                SEEN();
                auto [key, value] = type.map_iterator->value(v);
                CHECK_EQ(type_info::value::auxType<type_info::UnsignedInteger<uint64_t>>(key)->get(key), 1);
                CHECK_EQ(type_info::value::auxType<type_info::String>(value)->get(value), "foo-1");

                break;
            }
            case TypeInfo::Network: {
                SEEN();
                CHECK_EQ(type.network->get(v), Network("1.2.3.4", 16));
                break;
            }
            case TypeInfo::Null: {
                SEEN();
                break;
            }
            case TypeInfo::Optional: {
                SEEN();
                auto i = type.optional->value(v);
                CHECK(i);
                CHECK_EQ(type_info::value::auxType<type_info::String>(i)->get(i), "optional");
                break;
            }
            case TypeInfo::Port: {
                SEEN();
                CHECK_EQ(type.port->get(v), Port("1234/udp"));
                break;
            }
            case TypeInfo::Real: {
                SEEN();
                CHECK_EQ(type.real->get(v), 3.14);
                break;
            }
            case TypeInfo::RegExp: {
                SEEN();
                auto x = RegExp({"foo"});
                CHECK(type.regexp->get(v) == x);
                break;
            }
            case TypeInfo::Result: {
                SEEN();
                auto i = type.result->value(v);
                CHECK(i);
                CHECK_EQ(type_info::value::auxType<type_info::String>(i)->get(i), "result");
                break;
            }
            case TypeInfo::Set: {
                SEEN();
                auto s = type.set->iterate(v);
                auto i = s.begin();
                CHECK_EQ(type_info::value::auxType<type_info::String>(*i)->get(*i), "aaa");
                ++i;
                CHECK_EQ(type_info::value::auxType<type_info::String>(*i)->get(*i), "bbb");
                ++i;
                CHECK_EQ(type_info::value::auxType<type_info::String>(*i)->get(*i), "ccc");
                ++i;
                CHECK(i == s.end());

                break;
            }
            case TypeInfo::SetIterator: {
                SEEN();
                auto i = type.set_iterator->value(v);
                CHECK_EQ(type_info::value::auxType<type_info::String>(i)->get(i), "aaa");
                break;
            }
            case TypeInfo::SignedInteger_int8: {
                SEEN();
                CHECK_EQ(type.signed_integer_int8->get(v), -8);
                break;
            }
            case TypeInfo::SignedInteger_int16: {
                SEEN();
                CHECK_EQ(type.signed_integer_int16->get(v), -16);
                break;
            }
            case TypeInfo::SignedInteger_int32: {
                SEEN();
                CHECK_EQ(type.signed_integer_int32->get(v), -32);
                break;
            }
            case TypeInfo::SignedInteger_int64: {
                SEEN();
                CHECK_EQ(type.signed_integer_int64->get(v), -64);
                CHECK_EQ(v.to_string(), "-64");
                break;
            }
            case TypeInfo::Stream: {
                SEEN();
                CHECK_EQ(type.stream->get(v), Stream("stream"));
                break;
            }
            case TypeInfo::StreamIterator: {
                SEEN();
                CHECK_EQ(*type.stream_iterator->get(v), 's');
                break;
            }
            case TypeInfo::StreamView: {
                SEEN();
                CHECK_EQ(type.stream_view->get(v), Stream("stream"));
                break;
            }
            case TypeInfo::String: {
                SEEN();
                CHECK_EQ(type.string->get(v), "string");
                break;
            }
            case TypeInfo::StrongReference: {
                const auto* x = type.strong_reference;
                SEEN();
                CHECK(x->value(v));
                testStruct(x->value(v)); // TODO: failure
                break;
            }
            case TypeInfo::Struct: {
                SEEN();
                testStruct(v);
                break;
            }
            case TypeInfo::Time: {
                SEEN();
                CHECK_EQ(type.time->get(v), Time(1295415110.5, Time::SecondTag()));
                break;
            }
            case TypeInfo::Tuple: {
                SEEN();
                const auto* x = type.tuple;
                auto s = x->iterate(v);
                auto i = s.begin();

                auto opt1 = type_info::value::auxType<type_info::Optional>(i->second)->value(i->second);
                CHECK_EQ(type_info::value::auxType<type_info::SignedInteger<int32_t>>(opt1)->get(opt1), 123);
                CHECK_EQ(i->first.name, "a");
                ++i;

                auto opt2 = type_info::value::auxType<type_info::Optional>(i->second)->value(i->second);
                CHECK_EQ(type_info::value::auxType<type_info::String>(opt2)->get(opt2), "string");
                CHECK_EQ(i->first.name, "");
                ++i;

                auto opt3 = type_info::value::auxType<type_info::Optional>(i->second)->value(i->second);
                CHECK_EQ(type_info::value::auxType<type_info::Bool>(opt3)->get(opt3), true);
                CHECK_EQ(i->first.name, "c");

                ++i;
                CHECK(i == s.end());
                CHECK_EQ(x->elements().size(), 3);

                break;
            }
            case TypeInfo::Union: {
                SEEN();
                const auto* x = type.union_;
                auto i = x->value(v);
                CHECK_EQ(type_info::value::auxType<type_info::SignedInteger<int64_t>>(i)->get(i), 42);
                CHECK_EQ(x->fields().size(), 2);
                CHECK_EQ(v.to_string(), "$i=42");
                break;
            }
            case TypeInfo::UnsignedInteger_uint8: {
                SEEN();
                CHECK_EQ(type.unsigned_integer_uint8->get(v), 8);
                break;
            }
            case TypeInfo::UnsignedInteger_uint16: {
                SEEN();
                CHECK_EQ(type.unsigned_integer_uint16->get(v), 16);
                break;
            }
            case TypeInfo::UnsignedInteger_uint32: {
                SEEN();
                CHECK_EQ(type.unsigned_integer_uint32->get(v), 32);
                break;
            }
            case TypeInfo::UnsignedInteger_uint64: {
                SEEN();
                CHECK_EQ(type.unsigned_integer_uint64->get(v), 64);
                break;
            }
            case TypeInfo::ValueReference: {
                SEEN();
                const auto* x = type.value_reference;
                CHECK(x->value(v));
                testStruct(x->value(v));
                break;
            }
            case TypeInfo::Vector: {
                SEEN();
                SEEN();
                auto s = type.vector->iterate(v);
                auto i = s.begin();
                CHECK_EQ(type_info::value::auxType<type_info::String>(*i)->get(*i), "11");
                ++i;
                CHECK_EQ(type_info::value::auxType<type_info::String>(*i)->get(*i), "22");
                ++i;
                CHECK_EQ(type_info::value::auxType<type_info::String>(*i)->get(*i), "33");
                ++i;
                CHECK(i == s.end());

                break;
            }
            case TypeInfo::VectorIterator: {
                SEEN();
                auto i = type.vector_iterator->value(v);
                CHECK_EQ(type_info::value::auxType<type_info::String>(i)->get(i), "11");
                break;
            }
            case TypeInfo::Void: {
                SEEN();
                break;
            }
            case TypeInfo::WeakReference: {
                SEEN();
                const auto* x = type.weak_reference;
                CHECK(x->value(v));
                testStruct(x->value(v)); // TODO: failure
                break;
            }
        }
    }
};

// Visitor that checks expected values in default initialized struct of type
// "TypesInit".
struct VisitorTypesDefault {
    std::set<TypeInfo::Tag> seen;
    static inline const int ExpectedVisitorsSeen = 5;

    void visit(const hilti::rt::type_info::Value& v) {
        const auto& type = v.type();

        switch ( type.tag ) {
            case TypeInfo::Optional: {
                SEEN();
                CHECK(! type.optional->value(v));
                break;
            }
            case TypeInfo::Result: {
                SEEN();
                CHECK(! type.result->value(v));
                break;
            }
            case TypeInfo::StrongReference: {
                SEEN();
                CHECK(! type.strong_reference->value(v));
                break;
            }
            case TypeInfo::Union: {
                SEEN();
                CHECK(! type.union_->value(v));
                break;
            }
            case TypeInfo::WeakReference: {
                SEEN();
                CHECK(! type.weak_reference->value(v));
                break;
            }
            default: {
                // Do nothing for other types.
                break;
            }
        }
    }
};

// Visitor that checks expected values in partially initialized struct of type
// "TypesOptionals".
struct VisitorOptionals {
    int num_strings = 0;
    void visit(const hilti::rt::type_info::Value& v) {
        const auto& type = v.type();

        switch ( type.tag ) {
            case TypeInfo::String: {
                ++num_strings;
                CHECK_EQ(type.string->get(v), "yes");
                break;
            }
            default: {
                // Do nothing for other types.
                break;
            }
        }
    }
};

int main(int argc, char** argv) {
    hilti::rt::init();

    // Check that retrieving typeinfo works.
    auto ti = __hlt::Test::getThreeTypeInfos();
    CHECK_EQ(std::string(tuple::get<0>(ti)->display), std::string("bytes"));
    CHECK_EQ(std::string(tuple::get<1>(ti)->display), std::string("Test::Struct"));
    CHECK_EQ(std::string(tuple::get<2>(ti)->display), std::string("Test::Struct"));

    // Call HILTI code to create & initialize struct instances.
    auto [x_init, x_default, ti_types] = __hlt::Test::makeTestTypes();
    auto [x_optionals, ti_optionals] = __hlt::Test::makeTestOptionals();

    // Test instance of TestTypes that has been initialized with known values.
    CHECK((*ti_types)->id);
    CHECK_EQ(std::string(*(*ti_types)->id), std::string("Test::TestTypes"));
    CHECK_EQ(std::string((*ti_types)->display), std::string("Test::TestTypes"));

    VisitorTypesInit visitor_init;
    type_info::value::Parent p_init(*x_init);
    auto v_init = type_info::Value(x_init->get(), *ti_types, p_init);
    for ( auto f : type_info::value::auxType<type_info::Struct>(v_init)->iterate(v_init) )
        visitor_init.visit(f.second);

    CHECK_EQ(visitor_init.seen.size(), VisitorTypesInit::ExpectedVisitorsSeen);

    // Test instance of TestTypes that has been initialized with default values.
    VisitorTypesDefault visitor_default;
    type_info::value::Parent p_default(*x_default);
    auto v_default = type_info::Value(x_default->get(), *ti_types, p_default);
    for ( auto f : type_info::value::auxType<type_info::Struct>(v_default)->iterate(v_default) )
        visitor_default.visit(f.second);

    CHECK_EQ(visitor_default.seen.size(), VisitorTypesDefault::ExpectedVisitorsSeen);

    // Test instances of TestOptions in which one optional has been set.
    VisitorOptionals visitor2;
    type_info::value::Parent p_optionals(*x_default);
    auto v_optionals = type_info::Value(x_optionals->get(), *ti_optionals, p_optionals);
    int idx = 0;
    for ( auto f : type_info::value::auxType<type_info::Struct>(v_optionals)->iterate(v_optionals) ) {
        if ( idx == 0 ) {
            CHECK(f.second);
            visitor2.visit(f.second);
        }

        if ( idx == 1 )
            CHECK(! f.second);

        ++idx;
    }

    CHECK_EQ(visitor2.num_strings, 1);

    // Done testing.

    if ( errors > 0 ) {
        std::cerr << fmt("type-info test failed, %d errors\n", errors);
        exit(1);
    }

    std::cerr << "all good" << std::endl;
    hilti::rt::done();
}
# @TEST-END-FILE
