### BTest baseline data generated by btest-diff. Do not edit. Use "btest -U/-u" to update. Requires BTest >= 0.63.
[hilti-trace] : Mini::Test::__parser = [$name="Mini::Test", $is_public=True, $parse1=Mini::Test::parse1, $parse2=Mini::Test::parse2, $parse3=Mini::Test::parse3, $context_new=Null, $type_=Mini::Test, $description="", $mime_types=vector(), $ports=vector()];
[hilti-trace] : spicy_rt::registerParser(Mini::Test::__parser, $scope, Null);
[hilti-trace] : # "<...>/debug-trace.spicy:8:20-13:1"
[hilti-trace] : local value_ref<Mini::Test> __unit = default<Mini::Test>();
[hilti-trace] : spicy_rt::initializeParsedUnit((*__gunit), __unit);
[hilti-trace] : local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
[hilti-trace] : local int<64> __lahead = 0;
[hilti-trace] : local iterator<stream> __lahead_end;
[hilti-trace] : local optional<hilti::RecoverableFailure> __error = Null;
[hilti-trace] : # "<...>/debug-trace.spicy:8:20-13:1"
[hilti-trace] : # Begin parsing production: Unit: Mini__Test -> f1 f2
[hilti-trace] : spicy_rt::printParserState("Mini::Test", __data, begin(__ncur), __ncur, __lahead, __lahead_end, "default", True, __error);
[hilti-trace] : hilti::debug("spicy-verbose", "- parsing production: Unit: Mini__Test -> f1 f2");
[hilti-trace] : hilti::debugIndent("spicy-verbose");
[hilti-trace] : (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
[hilti-trace] : # "<...>/debug-trace.spicy:8:20-13:1"
[hilti-trace] : local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();
[hilti-trace] : hilti::debug("spicy", "Mini::Test");
[hilti-trace] : hilti::debugIndent("spicy");
[hilti-trace] : local iterator<stream> __begin = begin(__cur);
[hilti-trace] : (*self).__error = __error;
[hilti-trace] debug-trace.spicy:8:20-13:1: : (*self).__on_0x25_init();
[hilti-trace] debug-trace.spicy:9:18-9:28: : hilti::print(self, True);
[hilti-trace] : __error = (*self).__error;
[hilti-trace] : local strong_ref<stream> filtered = Null;
[hilti-trace] : if ( ! filtered ) { __result = (*self).__parse_Mini__Test_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); }
[hilti-trace] : __result = (*self).__parse_Mini__Test_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error);
[hilti-trace] : # "<...>/debug-trace.spicy:8:20-13:1"
[hilti-trace] : local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();
[hilti-trace] : local tuple<uint<64>, uint<64>> __sync_field;
[hilti-trace] : try { __sync_field = (0, begin(__cur).offset()); { # "<...>/debug-trace.spicy:10:9-10:14" # Begin parsing production: Variable: f1 -> uint<32> spicy_rt::printParserState("Mini::Test", __data, __begin, __cur, __lah, __lahe, "default", __trim, __error); hilti::debug("spicy-verbose", "- parsing production: Variable: f1 -> uint<32>"); hilti::debugIndent("spicy-verbose"); spicy_rt::waitForInput(__data, __cur, 4, "expecting 4 bytes for unpacking value", "<...>/debug-trace.spicy:10:9-10:14", Null); ((*self).f1, __cur) = (*unpack<uint<32>>((__cur, hilti::ByteOrder::Network))); if ( __trim ) { hilti::debug("spicy-verbose", "- trimming input"); (*__data).trim(begin(__cur)); } hilti::debugDedent("spicy-verbose"); # End parsing production: Variable: f1 -> uint<32> hilti::debug("spicy", "f1 = %s" % (*self).f1); hilti::debug("spicy-verbose", "- setting field 'f1' to '%s'" % (*self).f1); (*self).__error = __error; (*self).__on_f1((*self).f1); __error = (*self).__error; } __sync_field = (1, begin(__cur).offset()); { # "<...>/debug-trace.spicy:11:9-11:13" # Begin parsing production: Variable: f2 -> uint<8> spicy_rt::printParserState("Mini::Test", __data, __begin, __cur, __lah, __lahe, "default", __trim, __error); hilti::debug("spicy-verbose", "- parsing production: Variable: f2 -> uint<8>"); hilti::debugIndent("spicy-verbose"); spicy_rt::waitForInput(__data, __cur, 1, "expecting 1 bytes for unpacking value", "<...>/debug-trace.spicy:11:9-11:13", Null); ((*self).f2, __cur) = (*unpack<uint<8>>((__cur, hilti::ByteOrder::Network))); if ( __trim ) { hilti::debug("spicy-verbose", "- trimming input"); (*__data).trim(begin(__cur)); } hilti::debugDedent("spicy-verbose"); # End parsing production: Variable: f2 -> uint<8> hilti::debug("spicy", "f2 = %s" % (*self).f2); hilti::debug("spicy-verbose", "- setting field 'f2' to '%s'" % (*self).f2); (*self).__error = __error; (*self).__on_f2((*self).f2); __error = (*self).__error; } (*self).__error = __error; (*self).__on_0x25_done(); __error = (*self).__error; } catch ( inout hilti::RecoverableFailure e ) { local uint<64> __sync_offset = __sync_field[1]; if ( __sync_field[0] <= 0 ) __sync_offset += 4; if ( __sync_field[0] <= 1 ) __sync_offset += 1; hilti::debug("spicy-verbose", "- skipping skip offset to %llu" % __sync_offset); hilti::set_skip_offset(e, __sync_offset); throw; }
[hilti-trace] : __sync_field = (0, begin(__cur).offset());
[hilti-trace] : # "<...>/debug-trace.spicy:10:9-10:14"
[hilti-trace] : # Begin parsing production: Variable: f1 -> uint<32>
[hilti-trace] : spicy_rt::printParserState("Mini::Test", __data, __begin, __cur, __lah, __lahe, "default", __trim, __error);
[hilti-trace] : hilti::debug("spicy-verbose", "- parsing production: Variable: f1 -> uint<32>");
[hilti-trace] : hilti::debugIndent("spicy-verbose");
[hilti-trace] : spicy_rt::waitForInput(__data, __cur, 4, "expecting 4 bytes for unpacking value", "<...>/debug-trace.spicy:10:9-10:14", Null);
[hilti-trace] : ((*self).f1, __cur) = (*unpack<uint<32>>((__cur, hilti::ByteOrder::Network)));
[hilti-trace] : if ( __trim ) { hilti::debug("spicy-verbose", "- trimming input"); (*__data).trim(begin(__cur)); }
[hilti-trace] : hilti::debug("spicy-verbose", "- trimming input");
[hilti-trace] : (*__data).trim(begin(__cur));
[hilti-trace] : hilti::debugDedent("spicy-verbose");
[hilti-trace] : # End parsing production: Variable: f1 -> uint<32>
[hilti-trace] : hilti::debug("spicy", "f1 = %s" % (*self).f1);
[hilti-trace] : hilti::debug("spicy-verbose", "- setting field 'f1' to '%s'" % (*self).f1);
[hilti-trace] : (*self).__error = __error;
[hilti-trace] debug-trace.spicy:10:5-10:33: : (*self).__on_f1((*self).f1);
[hilti-trace] debug-trace.spicy:10:18-10:31: : hilti::print((*self).f1, True);
[hilti-trace] : __error = (*self).__error;
[hilti-trace] : __sync_field = (1, begin(__cur).offset());
[hilti-trace] : # "<...>/debug-trace.spicy:11:9-11:13"
[hilti-trace] : # Begin parsing production: Variable: f2 -> uint<8>
[hilti-trace] : spicy_rt::printParserState("Mini::Test", __data, __begin, __cur, __lah, __lahe, "default", __trim, __error);
[hilti-trace] : hilti::debug("spicy-verbose", "- parsing production: Variable: f2 -> uint<8>");
[hilti-trace] : hilti::debugIndent("spicy-verbose");
[hilti-trace] : spicy_rt::waitForInput(__data, __cur, 1, "expecting 1 bytes for unpacking value", "<...>/debug-trace.spicy:11:9-11:13", Null);
[hilti-trace] : ((*self).f2, __cur) = (*unpack<uint<8>>((__cur, hilti::ByteOrder::Network)));
[hilti-trace] : if ( __trim ) { hilti::debug("spicy-verbose", "- trimming input"); (*__data).trim(begin(__cur)); }
[hilti-trace] : hilti::debug("spicy-verbose", "- trimming input");
[hilti-trace] : (*__data).trim(begin(__cur));
[hilti-trace] : hilti::debugDedent("spicy-verbose");
[hilti-trace] : # End parsing production: Variable: f2 -> uint<8>
[hilti-trace] : hilti::debug("spicy", "f2 = %s" % (*self).f2);
[hilti-trace] : hilti::debug("spicy-verbose", "- setting field 'f2' to '%s'" % (*self).f2);
[hilti-trace] : (*self).__error = __error;
[hilti-trace] debug-trace.spicy:11:5-11:33: : (*self).__on_f2((*self).f2);
[hilti-trace] debug-trace.spicy:11:18-11:31: : hilti::print((*self).f2, True);
[hilti-trace] : __error = (*self).__error;
[hilti-trace] : (*self).__error = __error;
[hilti-trace] debug-trace.spicy:8:20-13:1: : (*self).__on_0x25_done();
[hilti-trace] debug-trace.spicy:12:18-12:28: : hilti::print(self, True);
[hilti-trace] : __error = (*self).__error;
[hilti-trace] : hilti::debugDedent("spicy");
[hilti-trace] : __result = (__cur, __lah, __lahe, __error);
[hilti-trace] : return __result;
[hilti-trace] : return __result;
[hilti-trace] : hilti::debugDedent("spicy-verbose");
[hilti-trace] : # End parsing production: Unit: Mini__Test -> f1 f2
[hilti-trace] : if ( __error ) { hilti::debug("spicy", "successful sync never confirmed, failing unit"); throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error))); }
[hilti-trace] : return __ncur;
