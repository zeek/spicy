### BTest baseline data generated by btest-diff. Do not edit. Use "btest -U/-u" to update. Requires BTest >= 0.63.
[hilti-trace] : Mini::Test::__parser = [$name="Mini::Test", $is_public=True, $parse1=Mini::Test::parse1, $parse2=Mini::Test::parse2, $parse3=Mini::Test::parse3, $context_new=Null, $type_info=typeinfo(Mini::Test), $description="", $mime_types=vector(), $ports=vector()];
[hilti-trace] : spicy_rt::registerParser(Mini::Test::__parser, $scope, Null);
[hilti-trace] : # "<...>/debug-trace.spicy:8:20-13:2"
[hilti-trace] : local value_ref<Mini::Test> unit = value_ref(default<Mini::Test>())value_ref(default<Mini::Test>());
[hilti-trace] : spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(Mini::Test));
[hilti-trace] : local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
[hilti-trace] : local int<64> lahead = 0;
[hilti-trace] : local iterator<stream> lahead_end;
[hilti-trace] : local optional<hilti::RecoverableFailure> error = Null;
[hilti-trace] : # "<...>/debug-trace.spicy:8:20-13:2"
[hilti-trace] :  # Begin parsing production: Unit: Mini_Test -> f1 f2
[hilti-trace] : spicy_rt::printParserState("Mini::Test", data, begin(ncur), ncur, lahead, lahead_end, "default", True, error);
[hilti-trace] : hilti::debug("spicy-verbose", "- parsing production: Unit: Mini_Test -> f1 f2");
[hilti-trace] : hilti::debugIndent("spicy-verbose");
[hilti-trace] : (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error);
[hilti-trace] : # "<...>/debug-trace.spicy:8:20-13:2"
[hilti-trace] : local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;
[hilti-trace] : try {     hilti::debug("spicy", "Mini::Test");     hilti::debugIndent("spicy");     local iterator<stream> __begin = begin(__cur);     (*self).__error = __error;     (*self).__on_0x25_init();     __error = (*self).__error;     local strong_ref<stream> filtered = Null;      if ( ! filtered )          __result = (*self).__parse_Mini_Test_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); } catch ( hilti::SystemException __except ) {     (*self).__error = __error;     __error = (*self).__error;     throw; }
[hilti-trace] : hilti::debug("spicy", "Mini::Test");
[hilti-trace] : hilti::debugIndent("spicy");
[hilti-trace] : local iterator<stream> __begin = begin(__cur);
[hilti-trace] : (*self).__error = __error;
[hilti-trace] <...>/debug-trace.spicy:8:20-13:2: (*self).__on_0x25_init();
[hilti-trace] <...>/debug-trace.spicy:9:18: hilti::print(self, True);
[hilti-trace] : __error = (*self).__error;
[hilti-trace] : local strong_ref<stream> filtered = Null;
[hilti-trace] :  if ( ! filtered ) {     __result = (*self).__parse_Mini_Test_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); }
[hilti-trace] : __result = (*self).__parse_Mini_Test_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error);
[hilti-trace] : # "<...>/debug-trace.spicy:8:20-13:2"
[hilti-trace] : local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;
[hilti-trace] : # "<...>/debug-trace.spicy:10:9"
[hilti-trace] :  # Begin parsing production: Variable: f1  -> uint<32>
[hilti-trace] : spicy_rt::printParserState("Mini::Test", __data, __begin, __cur, __lah, __lahe, "default", __trim, __error);
[hilti-trace] : hilti::debug("spicy-verbose", "- parsing production: Variable: f1  -> uint<32>");
[hilti-trace] : hilti::debugIndent("spicy-verbose");
[hilti-trace] : spicy_rt::waitForInput(__data, __cur, 4, "expecting 4 bytes for unpacking value", "<...>/debug-trace.spicy:10:9", Null);
[hilti-trace] : ((*self).f1, __cur) = (*unpack<uint<32>>((__cur, hilti::ByteOrder::Network)));
[hilti-trace] :  if ( __trim ) {     hilti::debug("spicy-verbose", "- trimming input");     (*__data).trim(begin(__cur)); }
[hilti-trace] : hilti::debug("spicy-verbose", "- trimming input");
[hilti-trace] : (*__data).trim(begin(__cur));
[hilti-trace] : hilti::debugDedent("spicy-verbose");
[hilti-trace] : # End parsing production: Variable: f1  -> uint<32>
[hilti-trace] : hilti::debug("spicy", "f1 = %s" % (*self).f1);
[hilti-trace] : hilti::debug("spicy-verbose", "- setting field 'f1' to '%s'" % (*self).f1);
[hilti-trace] : (*self).__error = __error;
[hilti-trace] <...>/debug-trace.spicy:10:5: (*self).__on_f1((*self).f1);
[hilti-trace] <...>/debug-trace.spicy:10:18: hilti::print((*self).f1, True);
[hilti-trace] : __error = (*self).__error;
[hilti-trace] : # "<...>/debug-trace.spicy:11:9"
[hilti-trace] :  # Begin parsing production: Variable: f2  -> uint<8>
[hilti-trace] : spicy_rt::printParserState("Mini::Test", __data, __begin, __cur, __lah, __lahe, "default", __trim, __error);
[hilti-trace] : hilti::debug("spicy-verbose", "- parsing production: Variable: f2  -> uint<8>");
[hilti-trace] : hilti::debugIndent("spicy-verbose");
[hilti-trace] : spicy_rt::waitForInput(__data, __cur, 1, "expecting 1 bytes for unpacking value", "<...>/debug-trace.spicy:11:9", Null);
[hilti-trace] : ((*self).f2, __cur) = (*unpack<uint<8>>((__cur, hilti::ByteOrder::Network)));
[hilti-trace] :  if ( __trim ) {     hilti::debug("spicy-verbose", "- trimming input");     (*__data).trim(begin(__cur)); }
[hilti-trace] : hilti::debug("spicy-verbose", "- trimming input");
[hilti-trace] : (*__data).trim(begin(__cur));
[hilti-trace] : hilti::debugDedent("spicy-verbose");
[hilti-trace] : # End parsing production: Variable: f2  -> uint<8>
[hilti-trace] : hilti::debug("spicy", "f2 = %s" % (*self).f2);
[hilti-trace] : hilti::debug("spicy-verbose", "- setting field 'f2' to '%s'" % (*self).f2);
[hilti-trace] : (*self).__error = __error;
[hilti-trace] <...>/debug-trace.spicy:11:5: (*self).__on_f2((*self).f2);
[hilti-trace] <...>/debug-trace.spicy:11:18: hilti::print((*self).f2, True);
[hilti-trace] : __error = (*self).__error;
[hilti-trace] : (*self).__error = __error;
[hilti-trace] <...>/debug-trace.spicy:8:20-13:2: (*self).__on_0x25_done();
[hilti-trace] <...>/debug-trace.spicy:12:18: hilti::print(self, True);
[hilti-trace] : __error = (*self).__error;
[hilti-trace] : hilti::debugDedent("spicy");
[hilti-trace] : __result = (__cur, __lah, __lahe, __error);
[hilti-trace] : return __result;
[hilti-trace] : (*self).__error = __error;
[hilti-trace] : __error = (*self).__error;
[hilti-trace] : return __result;
[hilti-trace] : hilti::debugDedent("spicy-verbose");
[hilti-trace] : # End parsing production: Unit: Mini_Test -> f1 f2
[hilti-trace] :  if ( error ) {     hilti::debug("spicy", "successful sync never confirmed, failing unit");     throw ; }
[hilti-trace] : return ncur;
