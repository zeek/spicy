### BTest baseline data generated by btest-diff. Do not edit. Use "btest -U/-u" to update. Requires BTest >= 0.63.
module foo {

import hilti;
import spicy_rt;

type Priv1 = struct {
    weak_ref<stream> __stream &internal &needed-by-feature="uses_stream";
    iterator<stream> __begin &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";
    uint<64> __offset &internal &needed-by-feature="uses_offset";
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks";
    spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";
    strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    hook void __on_0x25_init();
    hook void __on_0x25_done();
    hook void __on_0x25_error(string __except);
    hook optional<string> __hook_to_string();
    hook void __on_0x25_finally();
    hook void __on_0x25_confirmed() &needed-by-feature="synchronization";
    hook void __on_0x25_rejected() &needed-by-feature="synchronization";
    hook void __on_0x25_synced() &needed-by-feature="synchronization";
    hook void __on_0x25_gap(uint<64> seq, uint<64> len);
    hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);
    hook void __on_0x25_skipped(uint<64> seq);
    hook void __on_0x25_undelivered(uint<64> seq, bytes data);
    hook void __on_0x25_sync_advance(uint<64> offset) &needed-by-feature="uses_sync_advance";
    method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method view<stream> parse2(inout value_ref<Priv1> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo__Priv1_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;
public type Pub2 = struct {
    weak_ref<const stream> __stream &internal &needed-by-feature="uses_stream";
    iterator<stream> __begin &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";
    uint<64> __offset &internal &needed-by-feature="uses_offset";
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &always-emit;
    spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";
    strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    hook void __on_0x25_init();
    hook void __on_0x25_done();
    hook void __on_0x25_error(string __except);
    hook optional<string> __hook_to_string();
    hook void __on_0x25_finally();
    hook void __on_0x25_confirmed() &needed-by-feature="synchronization";
    hook void __on_0x25_rejected() &needed-by-feature="synchronization";
    hook void __on_0x25_synced() &needed-by-feature="synchronization";
    hook void __on_0x25_gap(uint<64> seq, uint<64> len);
    hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);
    hook void __on_0x25_skipped(uint<64> seq);
    hook void __on_0x25_undelivered(uint<64> seq, bytes data);
    hook void __on_0x25_sync_advance(uint<64> offset) &needed-by-feature="uses_sync_advance";
    method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method view<stream> parse2(inout value_ref<Pub2> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo__Pub2_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;
type Priv2 = struct {
    weak_ref<const stream> __stream &internal &needed-by-feature="uses_stream";
    iterator<stream> __begin &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";
    uint<64> __offset &internal &needed-by-feature="uses_offset";
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks";
    spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";
    strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    hook void __on_0x25_init();
    hook void __on_0x25_done();
    hook void __on_0x25_error(string __except);
    hook optional<string> __hook_to_string();
    hook void __on_0x25_finally();
    hook void __on_0x25_confirmed() &needed-by-feature="synchronization";
    hook void __on_0x25_rejected() &needed-by-feature="synchronization";
    hook void __on_0x25_synced() &needed-by-feature="synchronization";
    hook void __on_0x25_gap(uint<64> seq, uint<64> len);
    hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);
    hook void __on_0x25_skipped(uint<64> seq);
    hook void __on_0x25_undelivered(uint<64> seq, bytes data);
    hook void __on_0x25_sync_advance(uint<64> offset) &needed-by-feature="uses_sync_advance";
    method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method view<stream> parse2(inout value_ref<Priv2> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo__Priv2_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;
type Priv3 = struct {
    weak_ref<const stream> __stream &internal &needed-by-feature="uses_stream";
    iterator<stream> __begin &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";
    uint<64> __offset &internal &needed-by-feature="uses_offset";
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks";
    spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";
    strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    hook void __on_0x25_init();
    hook void __on_0x25_done();
    hook void __on_0x25_error(string __except);
    hook optional<string> __hook_to_string();
    hook void __on_0x25_finally();
    hook void __on_0x25_confirmed() &needed-by-feature="synchronization";
    hook void __on_0x25_rejected() &needed-by-feature="synchronization";
    hook void __on_0x25_synced() &needed-by-feature="synchronization";
    hook void __on_0x25_gap(uint<64> seq, uint<64> len);
    hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);
    hook void __on_0x25_skipped(uint<64> seq);
    hook void __on_0x25_undelivered(uint<64> seq, bytes data);
    hook void __on_0x25_sync_advance(uint<64> offset) &needed-by-feature="uses_sync_advance";
    method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method view<stream> parse2(inout value_ref<Priv3> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo__Priv3_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;
type Priv4 = struct {
    value_ref<Priv2> _anon &optional &anonymous &no-emit;
    value_ref<Priv3> x &optional;
    weak_ref<const stream> __stream &internal &needed-by-feature="uses_stream";
    iterator<stream> __begin &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";
    uint<64> __offset &internal &needed-by-feature="uses_offset";
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks";
    spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";
    strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    hook void __on_x(value_ref<const Priv3> __dd);
    hook void __on_x_error(string __excpt);
    hook void __on_0x25_init();
    hook void __on_0x25_done();
    hook void __on_0x25_error(string __except);
    hook optional<string> __hook_to_string();
    hook void __on_0x25_finally();
    hook void __on_0x25_confirmed() &needed-by-feature="synchronization";
    hook void __on_0x25_rejected() &needed-by-feature="synchronization";
    hook void __on_0x25_synced() &needed-by-feature="synchronization";
    hook void __on_0x25_gap(uint<64> seq, uint<64> len);
    hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);
    hook void __on_0x25_skipped(uint<64> seq);
    hook void __on_0x25_undelivered(uint<64> seq, bytes data);
    hook void __on_0x25_sync_advance(uint<64> offset) &needed-by-feature="uses_sync_advance";
    method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method view<stream> parse2(inout value_ref<Priv4> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo__Priv4_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;
type Priv5 = struct {
    weak_ref<const stream> __stream &internal &needed-by-feature="uses_stream";
    iterator<stream> __begin &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";
    uint<64> __offset &internal &needed-by-feature="uses_offset";
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks";
    spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";
    strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    hook void __on_0x25_init();
    hook void __on_0x25_done();
    hook void __on_0x25_error(string __except);
    hook optional<string> __hook_to_string();
    hook void __on_0x25_finally();
    hook void __on_0x25_confirmed() &needed-by-feature="synchronization";
    hook void __on_0x25_rejected() &needed-by-feature="synchronization";
    hook void __on_0x25_synced() &needed-by-feature="synchronization";
    hook void __on_0x25_gap(uint<64> seq, uint<64> len);
    hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);
    hook void __on_0x25_skipped(uint<64> seq);
    hook void __on_0x25_undelivered(uint<64> seq, bytes data);
    hook void __on_0x25_sync_advance(uint<64> offset) &needed-by-feature="uses_sync_advance";
    method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method view<stream> parse2(inout value_ref<Priv5> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo__Priv5_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;
type Priv6 = struct {
    weak_ref<const stream> __stream &internal &needed-by-feature="uses_stream";
    iterator<stream> __begin &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";
    uint<64> __offset &internal &needed-by-feature="uses_offset";
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks";
    spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";
    strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    hook void __on_0x25_init();
    hook void __on_0x25_done();
    hook void __on_0x25_error(string __except);
    hook optional<string> __hook_to_string();
    hook void __on_0x25_finally();
    hook void __on_0x25_confirmed() &needed-by-feature="synchronization";
    hook void __on_0x25_rejected() &needed-by-feature="synchronization";
    hook void __on_0x25_synced() &needed-by-feature="synchronization";
    hook void __on_0x25_gap(uint<64> seq, uint<64> len);
    hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);
    hook void __on_0x25_skipped(uint<64> seq);
    hook void __on_0x25_undelivered(uint<64> seq, bytes data);
    hook void __on_0x25_sync_advance(uint<64> offset) &needed-by-feature="uses_sync_advance";
    method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method view<stream> parse2(inout value_ref<Priv6> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo__Priv6_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;
public type Pub3 = struct {
    value_ref<Priv5> _anon_2 &optional &anonymous &no-emit;
    value_ref<Priv6> x &optional;
    weak_ref<const stream> __stream &internal &needed-by-feature="uses_stream";
    iterator<stream> __begin &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";
    uint<64> __offset &internal &needed-by-feature="uses_offset";
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &always-emit;
    spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";
    strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    hook void __on_x(value_ref<const Priv6> __dd);
    hook void __on_x_error(string __excpt);
    hook void __on_0x25_init();
    hook void __on_0x25_done();
    hook void __on_0x25_error(string __except);
    hook optional<string> __hook_to_string();
    hook void __on_0x25_finally();
    hook void __on_0x25_confirmed() &needed-by-feature="synchronization";
    hook void __on_0x25_rejected() &needed-by-feature="synchronization";
    hook void __on_0x25_synced() &needed-by-feature="synchronization";
    hook void __on_0x25_gap(uint<64> seq, uint<64> len);
    hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);
    hook void __on_0x25_skipped(uint<64> seq);
    hook void __on_0x25_undelivered(uint<64> seq, bytes data);
    hook void __on_0x25_sync_advance(uint<64> offset) &needed-by-feature="uses_sync_advance";
    method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method view<stream> parse2(inout value_ref<Pub3> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo__Pub3_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;
type Priv7 = enum { A = 0, B = 1, C = 2 };
public type Pub4 = enum { A = 0, B = 1, C = 2 };
type Priv8 = enum { A = 0, B = 1, C = 2 };
type Priv9 = enum { A = 0, B = 1, C = 2 };
public type Priv10 = struct {
    Priv8 en &default=Priv8::A;
    Priv9 em;
    weak_ref<const stream> __stream &internal &needed-by-feature="uses_stream";
    iterator<stream> __begin &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";
    uint<64> __offset &internal &needed-by-feature="uses_offset";
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &always-emit;
    spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";
    strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    hook void __on_0x25_init();
    hook void __on_0x25_done();
    hook void __on_0x25_error(string __except);
    hook optional<string> __hook_to_string();
    hook void __on_0x25_finally();
    hook void __on_0x25_confirmed() &needed-by-feature="synchronization";
    hook void __on_0x25_rejected() &needed-by-feature="synchronization";
    hook void __on_0x25_synced() &needed-by-feature="synchronization";
    hook void __on_0x25_gap(uint<64> seq, uint<64> len);
    hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);
    hook void __on_0x25_skipped(uint<64> seq);
    hook void __on_0x25_undelivered(uint<64> seq, bytes data);
    hook void __on_0x25_sync_advance(uint<64> offset) &needed-by-feature="uses_sync_advance";
    method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method view<stream> parse2(inout value_ref<Priv10> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo__Priv10_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;
type Priv11 = enum { A = 0, B = 1, C = 2 };
type Priv12 = enum { A = 0, B = 1, C = 2 };

const bool __feat%foo@@Priv1%uses_offset = True;
const bool __feat%foo@@Priv1%uses_random_access = True;
const bool __feat%foo@@Priv1%uses_stream = True;
const bool __feat%foo@@Priv1%uses_sync_advance = True;
const bool __feat%foo@@Priv1%is_filter = False;
const bool __feat%foo@@Priv1%supports_filters = True;
const bool __feat%foo@@Priv1%supports_sinks = True;
const bool __feat%foo@@Priv1%synchronization = True;
const bool __feat%foo@@Pub2%uses_offset = True;
const bool __feat%foo@@Pub2%uses_random_access = True;
const bool __feat%foo@@Pub2%uses_stream = True;
const bool __feat%foo@@Pub2%uses_sync_advance = True;
const bool __feat%foo@@Pub2%is_filter = False;
const bool __feat%foo@@Pub2%supports_filters = True;
const bool __feat%foo@@Pub2%supports_sinks = True;
const bool __feat%foo@@Pub2%synchronization = True;
const bool __feat%foo@@Priv2%uses_offset = True;
const bool __feat%foo@@Priv2%uses_random_access = True;
const bool __feat%foo@@Priv2%uses_stream = True;
const bool __feat%foo@@Priv2%uses_sync_advance = True;
const bool __feat%foo@@Priv2%is_filter = False;
const bool __feat%foo@@Priv2%supports_filters = True;
const bool __feat%foo@@Priv2%supports_sinks = True;
const bool __feat%foo@@Priv2%synchronization = True;
const bool __feat%foo@@Priv3%uses_offset = True;
const bool __feat%foo@@Priv3%uses_random_access = True;
const bool __feat%foo@@Priv3%uses_stream = True;
const bool __feat%foo@@Priv3%uses_sync_advance = True;
const bool __feat%foo@@Priv3%is_filter = False;
const bool __feat%foo@@Priv3%supports_filters = True;
const bool __feat%foo@@Priv3%supports_sinks = True;
const bool __feat%foo@@Priv3%synchronization = True;
const bool __feat%foo@@Priv4%uses_offset = True;
const bool __feat%foo@@Priv4%uses_random_access = True;
const bool __feat%foo@@Priv4%uses_stream = True;
const bool __feat%foo@@Priv4%uses_sync_advance = True;
const bool __feat%foo@@Priv4%is_filter = False;
const bool __feat%foo@@Priv4%supports_filters = True;
const bool __feat%foo@@Priv4%supports_sinks = True;
const bool __feat%foo@@Priv4%synchronization = True;
const bool __feat%foo@@Priv5%uses_offset = True;
const bool __feat%foo@@Priv5%uses_random_access = True;
const bool __feat%foo@@Priv5%uses_stream = True;
const bool __feat%foo@@Priv5%uses_sync_advance = True;
const bool __feat%foo@@Priv5%is_filter = False;
const bool __feat%foo@@Priv5%supports_filters = True;
const bool __feat%foo@@Priv5%supports_sinks = True;
const bool __feat%foo@@Priv5%synchronization = True;
const bool __feat%foo@@Priv6%uses_offset = True;
const bool __feat%foo@@Priv6%uses_random_access = True;
const bool __feat%foo@@Priv6%uses_stream = True;
const bool __feat%foo@@Priv6%uses_sync_advance = True;
const bool __feat%foo@@Priv6%is_filter = False;
const bool __feat%foo@@Priv6%supports_filters = True;
const bool __feat%foo@@Priv6%supports_sinks = True;
const bool __feat%foo@@Priv6%synchronization = True;
const bool __feat%foo@@Pub3%uses_offset = True;
const bool __feat%foo@@Pub3%uses_random_access = True;
const bool __feat%foo@@Pub3%uses_stream = True;
const bool __feat%foo@@Pub3%uses_sync_advance = True;
const bool __feat%foo@@Pub3%is_filter = False;
const bool __feat%foo@@Pub3%supports_filters = True;
const bool __feat%foo@@Pub3%supports_sinks = True;
const bool __feat%foo@@Pub3%synchronization = True;
const bool __feat%foo@@Priv10%uses_offset = True;
const bool __feat%foo@@Priv10%uses_random_access = True;
const bool __feat%foo@@Priv10%uses_stream = True;
const bool __feat%foo@@Priv10%uses_sync_advance = True;
const bool __feat%foo@@Priv10%is_filter = False;
const bool __feat%foo@@Priv10%supports_filters = True;
const bool __feat%foo@@Priv10%supports_sinks = True;
const bool __feat%foo@@Priv10%synchronization = True;

global Priv11 en;
global Priv12 em = Priv12::A;

method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::Priv1::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:13:14-13:20"
    local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();
    try {

        if ( ::__feat%foo@@Priv1%uses_random_access ) 
            __trim = False;

        hilti::debugIndent("spicy");
        local iterator<stream> __begin = begin(__cur);

        if ( ::__feat%foo@@Priv1%uses_stream ) 
            (*self).__stream = __data;


        if ( ::__feat%foo@@Priv1%uses_random_access ) 
            (*self).__begin = __begin;


        if ( ::__feat%foo@@Priv1%uses_offset ) 
            (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

        (*self).__error = __error;

        if ( ::__feat%foo@@Priv1%uses_random_access || ::__feat%foo@@Priv1%uses_offset ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_init();

        if ( ::__feat%foo@@Priv1%uses_random_access || ::__feat%foo@@Priv1%uses_offset ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        local strong_ref<stream> filtered = Null;

        if ( ::__feat%foo@@Priv1%supports_filters ) {
            local uint<64> __offset1 = begin((*__data)).offset();

            if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) {
                local value_ref<stream> __filtered_data = filtered;
                self.__parse_foo__Priv1_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error);
                local uint<64> __offset2 = begin((*__data)).offset();
                __cur = __cur.advance(__offset2 - __offset1);

                if ( __trim ) 
                    (*__data).trim(begin(__cur));

                __result = (__cur, __lah, __lahe, __error);
            }

        }


        if ( ! filtered ) 
            __result = (*self).__parse_foo__Priv1_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error);

    }
    catch ( hilti::SystemException __except ) {

        if ( ::__feat%foo@@Priv1%uses_random_access ) 
            (*self).__begin = __begin;


        if ( ::__feat%foo@@Priv1%uses_offset ) 
            (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

        (*self).__on_0x25_error(hilti::exception_what(__except));

        if ( ::__feat%foo@@Priv1%supports_filters ) 
            spicy_rt::filter_disconnect(self);


        if ( ::__feat%foo@@Priv1%supports_sinks ) {
        }

        (*self).__error = __error;

        if ( ::__feat%foo@@Priv1%uses_random_access || ::__feat%foo@@Priv1%uses_offset ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_finally();

        if ( ::__feat%foo@@Priv1%uses_random_access || ::__feat%foo@@Priv1%uses_offset ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        throw;
    }

    (*self).__error = __error;

    if ( ::__feat%foo@@Priv1%uses_random_access || ::__feat%foo@@Priv1%uses_offset ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_finally();

    if ( ::__feat%foo@@Priv1%uses_random_access || ::__feat%foo@@Priv1%uses_offset ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;
    return __result;
}

method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::Priv1::__parse_foo__Priv1_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:13:14-13:20"
    local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();

    if ( ::__feat%foo@@Priv1%uses_random_access ) 
        (*self).__begin = __begin;


    if ( ::__feat%foo@@Priv1%uses_offset ) 
        (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

    (*self).__error = __error;

    if ( ::__feat%foo@@Priv1%uses_random_access || ::__feat%foo@@Priv1%uses_offset ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_done();

    if ( ::__feat%foo@@Priv1%uses_random_access || ::__feat%foo@@Priv1%uses_offset ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;

    if ( ::__feat%foo@@Priv1%supports_filters ) 
        spicy_rt::filter_disconnect(self);


    if ( ::__feat%foo@@Priv1%supports_sinks ) {
    }

    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

method view<stream> foo::Priv1::parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:13:14-13:20"
    local value_ref<Priv1> __unit = default<Priv1>();
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:13:14-13:20"

    # Begin parsing production: Unit: foo__Priv1 ->
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Priv1 ->

    if ( ::__feat%foo@@Priv1%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Priv1%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

method view<stream> foo::Priv1::parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:13:14-13:20"
    local value_ref<Priv1> __unit = default<Priv1>();
    spicy_rt::initializeParsedUnit((*__gunit), __unit);
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:13:14-13:20"

    # Begin parsing production: Unit: foo__Priv1 ->
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Priv1 ->

    if ( ::__feat%foo@@Priv1%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Priv1%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

method view<stream> foo::Priv1::parse2(inout value_ref<Priv1> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:13:14-13:20"
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:13:14-13:20"

    # Begin parsing production: Unit: foo__Priv1 ->
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Priv1 ->

    if ( ::__feat%foo@@Priv1%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Priv1%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

init function void __register_foo_Priv1() {

    if ( ::__feat%foo@@Priv1%is_filter || ::__feat%foo@@Priv1%supports_sinks ) {
        foo::Priv1::__parser = [$name="foo::Priv1", $is_public=False, $parse1=foo::Priv1::parse1, $parse2=foo::Priv1::parse2, $parse3=foo::Priv1::parse3, $context_new=Null, $type_=Priv1, $description="", $mime_types=vector(), $ports=vector()];
        spicy_rt::registerParser(foo::Priv1::__parser, $scope, Null);
    }

}

method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::Pub2::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:16:20-16:26"
    local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();
    try {

        if ( ::__feat%foo@@Pub2%uses_random_access ) 
            __trim = False;

        hilti::debugIndent("spicy");
        local iterator<stream> __begin = begin(__cur);

        if ( ::__feat%foo@@Pub2%uses_stream ) 
            (*self).__stream = __data;


        if ( ::__feat%foo@@Pub2%uses_random_access ) 
            (*self).__begin = __begin;


        if ( ::__feat%foo@@Pub2%uses_offset ) 
            (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

        (*self).__error = __error;

        if ( ::__feat%foo@@Pub2%uses_random_access || ::__feat%foo@@Pub2%uses_offset ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_init();

        if ( ::__feat%foo@@Pub2%uses_random_access || ::__feat%foo@@Pub2%uses_offset ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        local strong_ref<stream> filtered = Null;

        if ( ::__feat%foo@@Pub2%supports_filters ) {
            local uint<64> __offset1 = begin((*__data)).offset();

            if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) {
                local value_ref<stream> __filtered_data = filtered;
                self.__parse_foo__Pub2_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error);
                local uint<64> __offset2 = begin((*__data)).offset();
                __cur = __cur.advance(__offset2 - __offset1);

                if ( __trim ) 
                    (*__data).trim(begin(__cur));

                __result = (__cur, __lah, __lahe, __error);
            }

        }


        if ( ! filtered ) 
            __result = (*self).__parse_foo__Pub2_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error);

    }
    catch ( hilti::SystemException __except ) {

        if ( ::__feat%foo@@Pub2%uses_random_access ) 
            (*self).__begin = __begin;


        if ( ::__feat%foo@@Pub2%uses_offset ) 
            (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

        (*self).__on_0x25_error(hilti::exception_what(__except));

        if ( ::__feat%foo@@Pub2%supports_filters ) 
            spicy_rt::filter_disconnect(self);


        if ( ::__feat%foo@@Pub2%supports_sinks ) {
        }

        (*self).__error = __error;

        if ( ::__feat%foo@@Pub2%uses_random_access || ::__feat%foo@@Pub2%uses_offset ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_finally();

        if ( ::__feat%foo@@Pub2%uses_random_access || ::__feat%foo@@Pub2%uses_offset ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        throw;
    }

    (*self).__error = __error;

    if ( ::__feat%foo@@Pub2%uses_random_access || ::__feat%foo@@Pub2%uses_offset ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_finally();

    if ( ::__feat%foo@@Pub2%uses_random_access || ::__feat%foo@@Pub2%uses_offset ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;
    return __result;
}

method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::Pub2::__parse_foo__Pub2_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:16:20-16:26"
    local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();

    if ( ::__feat%foo@@Pub2%uses_random_access ) 
        (*self).__begin = __begin;


    if ( ::__feat%foo@@Pub2%uses_offset ) 
        (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

    (*self).__error = __error;

    if ( ::__feat%foo@@Pub2%uses_random_access || ::__feat%foo@@Pub2%uses_offset ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_done();

    if ( ::__feat%foo@@Pub2%uses_random_access || ::__feat%foo@@Pub2%uses_offset ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;

    if ( ::__feat%foo@@Pub2%supports_filters ) 
        spicy_rt::filter_disconnect(self);


    if ( ::__feat%foo@@Pub2%supports_sinks ) {
    }

    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

method view<stream> foo::Pub2::parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:16:20-16:26"
    local value_ref<Pub2> __unit = default<Pub2>();
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:16:20-16:26"

    # Begin parsing production: Unit: foo__Pub2 ->
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Pub2 ->

    if ( ::__feat%foo@@Pub2%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Pub2%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

method view<stream> foo::Pub2::parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:16:20-16:26"
    local value_ref<Pub2> __unit = default<Pub2>();
    spicy_rt::initializeParsedUnit((*__gunit), __unit);
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:16:20-16:26"

    # Begin parsing production: Unit: foo__Pub2 ->
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Pub2 ->

    if ( ::__feat%foo@@Pub2%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Pub2%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

method view<stream> foo::Pub2::parse2(inout value_ref<Pub2> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:16:20-16:26"
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:16:20-16:26"

    # Begin parsing production: Unit: foo__Pub2 ->
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Pub2 ->

    if ( ::__feat%foo@@Pub2%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Pub2%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

init function void __register_foo_Pub2() {
    foo::Pub2::__parser = [$name="foo::Pub2", $is_public=True, $parse1=foo::Pub2::parse1, $parse2=foo::Pub2::parse2, $parse3=foo::Pub2::parse3, $context_new=Null, $type_=Pub2, $description="", $mime_types=vector(), $ports=vector()];
    spicy_rt::registerParser(foo::Pub2::__parser, $scope, Null);
}

method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::Priv2::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:19:14-19:20"
    local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();
    try {

        if ( ::__feat%foo@@Priv2%uses_random_access ) 
            __trim = False;

        hilti::debugIndent("spicy");
        local iterator<stream> __begin = begin(__cur);

        if ( ::__feat%foo@@Priv2%uses_stream ) 
            (*self).__stream = __data;


        if ( ::__feat%foo@@Priv2%uses_random_access ) 
            (*self).__begin = __begin;


        if ( ::__feat%foo@@Priv2%uses_offset ) 
            (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

        (*self).__error = __error;

        if ( ::__feat%foo@@Priv2%uses_random_access || ::__feat%foo@@Priv2%uses_offset ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_init();

        if ( ::__feat%foo@@Priv2%uses_random_access || ::__feat%foo@@Priv2%uses_offset ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        local strong_ref<stream> filtered = Null;

        if ( ::__feat%foo@@Priv2%supports_filters ) {
            local uint<64> __offset1 = begin((*__data)).offset();

            if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) {
                local value_ref<stream> __filtered_data = filtered;
                self.__parse_foo__Priv2_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error);
                local uint<64> __offset2 = begin((*__data)).offset();
                __cur = __cur.advance(__offset2 - __offset1);

                if ( __trim ) 
                    (*__data).trim(begin(__cur));

                __result = (__cur, __lah, __lahe, __error);
            }

        }


        if ( ! filtered ) 
            __result = (*self).__parse_foo__Priv2_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error);

    }
    catch ( hilti::SystemException __except ) {

        if ( ::__feat%foo@@Priv2%uses_random_access ) 
            (*self).__begin = __begin;


        if ( ::__feat%foo@@Priv2%uses_offset ) 
            (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

        (*self).__on_0x25_error(hilti::exception_what(__except));

        if ( ::__feat%foo@@Priv2%supports_filters ) 
            spicy_rt::filter_disconnect(self);


        if ( ::__feat%foo@@Priv2%supports_sinks ) {
        }

        (*self).__error = __error;

        if ( ::__feat%foo@@Priv2%uses_random_access || ::__feat%foo@@Priv2%uses_offset ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_finally();

        if ( ::__feat%foo@@Priv2%uses_random_access || ::__feat%foo@@Priv2%uses_offset ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        throw;
    }

    (*self).__error = __error;

    if ( ::__feat%foo@@Priv2%uses_random_access || ::__feat%foo@@Priv2%uses_offset ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_finally();

    if ( ::__feat%foo@@Priv2%uses_random_access || ::__feat%foo@@Priv2%uses_offset ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;
    return __result;
}

method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::Priv2::__parse_foo__Priv2_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:19:14-19:20"
    local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();

    if ( ::__feat%foo@@Priv2%uses_random_access ) 
        (*self).__begin = __begin;


    if ( ::__feat%foo@@Priv2%uses_offset ) 
        (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

    (*self).__error = __error;

    if ( ::__feat%foo@@Priv2%uses_random_access || ::__feat%foo@@Priv2%uses_offset ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_done();

    if ( ::__feat%foo@@Priv2%uses_random_access || ::__feat%foo@@Priv2%uses_offset ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;

    if ( ::__feat%foo@@Priv2%supports_filters ) 
        spicy_rt::filter_disconnect(self);


    if ( ::__feat%foo@@Priv2%supports_sinks ) {
    }

    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

method view<stream> foo::Priv2::parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:19:14-19:20"
    local value_ref<Priv2> __unit = default<Priv2>();
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:19:14-19:20"

    # Begin parsing production: Unit: foo__Priv2 ->
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Priv2 ->

    if ( ::__feat%foo@@Priv2%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Priv2%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

method view<stream> foo::Priv2::parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:19:14-19:20"
    local value_ref<Priv2> __unit = default<Priv2>();
    spicy_rt::initializeParsedUnit((*__gunit), __unit);
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:19:14-19:20"

    # Begin parsing production: Unit: foo__Priv2 ->
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Priv2 ->

    if ( ::__feat%foo@@Priv2%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Priv2%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

method view<stream> foo::Priv2::parse2(inout value_ref<Priv2> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:19:14-19:20"
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:19:14-19:20"

    # Begin parsing production: Unit: foo__Priv2 ->
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Priv2 ->

    if ( ::__feat%foo@@Priv2%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Priv2%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

init function void __register_foo_Priv2() {

    if ( ::__feat%foo@@Priv2%is_filter || ::__feat%foo@@Priv2%supports_sinks ) {
        foo::Priv2::__parser = [$name="foo::Priv2", $is_public=False, $parse1=foo::Priv2::parse1, $parse2=foo::Priv2::parse2, $parse3=foo::Priv2::parse3, $context_new=Null, $type_=Priv2, $description="", $mime_types=vector(), $ports=vector()];
        spicy_rt::registerParser(foo::Priv2::__parser, $scope, Null);
    }

}

method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::Priv3::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:20:14-20:20"
    local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();
    try {

        if ( ::__feat%foo@@Priv3%uses_random_access ) 
            __trim = False;

        hilti::debugIndent("spicy");
        local iterator<stream> __begin = begin(__cur);

        if ( ::__feat%foo@@Priv3%uses_stream ) 
            (*self).__stream = __data;


        if ( ::__feat%foo@@Priv3%uses_random_access ) 
            (*self).__begin = __begin;


        if ( ::__feat%foo@@Priv3%uses_offset ) 
            (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

        (*self).__error = __error;

        if ( ::__feat%foo@@Priv3%uses_random_access || ::__feat%foo@@Priv3%uses_offset ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_init();

        if ( ::__feat%foo@@Priv3%uses_random_access || ::__feat%foo@@Priv3%uses_offset ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        local strong_ref<stream> filtered = Null;

        if ( ::__feat%foo@@Priv3%supports_filters ) {
            local uint<64> __offset1 = begin((*__data)).offset();

            if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) {
                local value_ref<stream> __filtered_data = filtered;
                self.__parse_foo__Priv3_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error);
                local uint<64> __offset2 = begin((*__data)).offset();
                __cur = __cur.advance(__offset2 - __offset1);

                if ( __trim ) 
                    (*__data).trim(begin(__cur));

                __result = (__cur, __lah, __lahe, __error);
            }

        }


        if ( ! filtered ) 
            __result = (*self).__parse_foo__Priv3_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error);

    }
    catch ( hilti::SystemException __except ) {

        if ( ::__feat%foo@@Priv3%uses_random_access ) 
            (*self).__begin = __begin;


        if ( ::__feat%foo@@Priv3%uses_offset ) 
            (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

        (*self).__on_0x25_error(hilti::exception_what(__except));

        if ( ::__feat%foo@@Priv3%supports_filters ) 
            spicy_rt::filter_disconnect(self);


        if ( ::__feat%foo@@Priv3%supports_sinks ) {
        }

        (*self).__error = __error;

        if ( ::__feat%foo@@Priv3%uses_random_access || ::__feat%foo@@Priv3%uses_offset ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_finally();

        if ( ::__feat%foo@@Priv3%uses_random_access || ::__feat%foo@@Priv3%uses_offset ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        throw;
    }

    (*self).__error = __error;

    if ( ::__feat%foo@@Priv3%uses_random_access || ::__feat%foo@@Priv3%uses_offset ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_finally();

    if ( ::__feat%foo@@Priv3%uses_random_access || ::__feat%foo@@Priv3%uses_offset ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;
    return __result;
}

method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::Priv3::__parse_foo__Priv3_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:20:14-20:20"
    local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();

    if ( ::__feat%foo@@Priv3%uses_random_access ) 
        (*self).__begin = __begin;


    if ( ::__feat%foo@@Priv3%uses_offset ) 
        (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

    (*self).__error = __error;

    if ( ::__feat%foo@@Priv3%uses_random_access || ::__feat%foo@@Priv3%uses_offset ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_done();

    if ( ::__feat%foo@@Priv3%uses_random_access || ::__feat%foo@@Priv3%uses_offset ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;

    if ( ::__feat%foo@@Priv3%supports_filters ) 
        spicy_rt::filter_disconnect(self);


    if ( ::__feat%foo@@Priv3%supports_sinks ) {
    }

    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

method view<stream> foo::Priv3::parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:20:14-20:20"
    local value_ref<Priv3> __unit = default<Priv3>();
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:20:14-20:20"

    # Begin parsing production: Unit: foo__Priv3 ->
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Priv3 ->

    if ( ::__feat%foo@@Priv3%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Priv3%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

method view<stream> foo::Priv3::parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:20:14-20:20"
    local value_ref<Priv3> __unit = default<Priv3>();
    spicy_rt::initializeParsedUnit((*__gunit), __unit);
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:20:14-20:20"

    # Begin parsing production: Unit: foo__Priv3 ->
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Priv3 ->

    if ( ::__feat%foo@@Priv3%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Priv3%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

method view<stream> foo::Priv3::parse2(inout value_ref<Priv3> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:20:14-20:20"
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:20:14-20:20"

    # Begin parsing production: Unit: foo__Priv3 ->
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Priv3 ->

    if ( ::__feat%foo@@Priv3%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Priv3%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

init function void __register_foo_Priv3() {

    if ( ::__feat%foo@@Priv3%is_filter || ::__feat%foo@@Priv3%supports_sinks ) {
        foo::Priv3::__parser = [$name="foo::Priv3", $is_public=False, $parse1=foo::Priv3::parse1, $parse2=foo::Priv3::parse2, $parse3=foo::Priv3::parse3, $context_new=Null, $type_=Priv3, $description="", $mime_types=vector(), $ports=vector()];
        spicy_rt::registerParser(foo::Priv3::__parser, $scope, Null);
    }

}

method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::Priv4::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:21:14-24:1"
    local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();
    try {

        if ( ::__feat%foo@@Priv4%uses_random_access ) 
            __trim = False;

        hilti::debugIndent("spicy");
        local iterator<stream> __begin = begin(__cur);

        if ( ::__feat%foo@@Priv4%uses_stream ) 
            (*self).__stream = __data;


        if ( ::__feat%foo@@Priv4%uses_random_access ) 
            (*self).__begin = __begin;


        if ( ::__feat%foo@@Priv4%uses_offset ) 
            (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

        (*self).__error = __error;

        if ( ::__feat%foo@@Priv4%uses_random_access || ::__feat%foo@@Priv4%uses_offset ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_init();

        if ( ::__feat%foo@@Priv4%uses_random_access || ::__feat%foo@@Priv4%uses_offset ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        local strong_ref<stream> filtered = Null;

        if ( ::__feat%foo@@Priv4%supports_filters ) {
            local uint<64> __offset1 = begin((*__data)).offset();

            if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) {
                local value_ref<stream> __filtered_data = filtered;
                self.__parse_foo__Priv4_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error);
                local uint<64> __offset2 = begin((*__data)).offset();
                __cur = __cur.advance(__offset2 - __offset1);

                if ( __trim ) 
                    (*__data).trim(begin(__cur));

                __result = (__cur, __lah, __lahe, __error);
            }

        }


        if ( ! filtered ) 
            __result = (*self).__parse_foo__Priv4_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error);

    }
    catch ( hilti::SystemException __except ) {

        if ( ::__feat%foo@@Priv4%uses_random_access ) 
            (*self).__begin = __begin;


        if ( ::__feat%foo@@Priv4%uses_offset ) 
            (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

        (*self).__on_0x25_error(hilti::exception_what(__except));

        if ( ::__feat%foo@@Priv4%supports_filters ) 
            spicy_rt::filter_disconnect(self);


        if ( ::__feat%foo@@Priv4%supports_sinks ) {
        }

        (*self).__error = __error;

        if ( ::__feat%foo@@Priv4%uses_random_access || ::__feat%foo@@Priv4%uses_offset ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_finally();

        if ( ::__feat%foo@@Priv4%uses_random_access || ::__feat%foo@@Priv4%uses_offset ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        throw;
    }

    (*self).__error = __error;

    if ( ::__feat%foo@@Priv4%uses_random_access || ::__feat%foo@@Priv4%uses_offset ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_finally();

    if ( ::__feat%foo@@Priv4%uses_random_access || ::__feat%foo@@Priv4%uses_offset ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;
    return __result;
}

method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::Priv4::__parse_foo__Priv4_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:21:14-24:1"
    local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();
    local value_ref<Priv2> __transient__anon;
    # "<...>/unused-types.spicy:19:14-19:20"

    # Begin parsing production: Unit: foo__Priv2_2 ->
    __transient__anon = default<Priv2>();
    (__cur, __lah, __lahe, __error) = (*__transient__anon).__parse_stage1(__data, __begin, __cur, __trim, __lah, __lahe, __error);
    # End parsing production: Unit: foo__Priv2_2 ->

    if ( ::__feat%foo@@Priv4%uses_random_access ) 
        (*self).__begin = __begin;


    if ( ::__feat%foo@@Priv4%uses_offset ) 
        (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

    try {
        # "<...>/unused-types.spicy:20:14-20:20"

        # Begin parsing production: Unit: foo__Priv3_2 ->
        (*self).x = default<Priv3>();
        (__cur, __lah, __lahe, __error) = (*(*self).x).__parse_stage1(__data, __begin, __cur, __trim, __lah, __lahe, __error);
        # End parsing production: Unit: foo__Priv3_2 ->

        (*self).__error = __error;

        if ( ::__feat%foo@@Priv4%uses_random_access || ::__feat%foo@@Priv4%uses_offset ) 
            (*self).__position_update = Null;

        (*self).__on_x((*self).x);

        if ( ::__feat%foo@@Priv4%uses_random_access || ::__feat%foo@@Priv4%uses_offset ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
    }
    catch ( hilti::SystemException __except ) {
        (*self).__on_x_error(hilti::exception_what(__except));
        throw;
    }


    if ( ::__feat%foo@@Priv4%uses_random_access ) 
        (*self).__begin = __begin;


    if ( ::__feat%foo@@Priv4%uses_offset ) 
        (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());


    if ( ::__feat%foo@@Priv4%uses_random_access ) 
        (*self).__begin = __begin;


    if ( ::__feat%foo@@Priv4%uses_offset ) 
        (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

    (*self).__error = __error;

    if ( ::__feat%foo@@Priv4%uses_random_access || ::__feat%foo@@Priv4%uses_offset ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_done();

    if ( ::__feat%foo@@Priv4%uses_random_access || ::__feat%foo@@Priv4%uses_offset ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;

    if ( ::__feat%foo@@Priv4%supports_filters ) 
        spicy_rt::filter_disconnect(self);


    if ( ::__feat%foo@@Priv4%supports_sinks ) {
    }

    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

method view<stream> foo::Priv4::parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:21:14-24:1"
    local value_ref<Priv4> __unit = default<Priv4>();
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:21:14-24:1"

    # Begin parsing production: Unit: foo__Priv4 -> Resolved_6 Resolved_7
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Priv4 -> Resolved_6 Resolved_7

    if ( ::__feat%foo@@Priv4%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Priv4%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

method view<stream> foo::Priv4::parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:21:14-24:1"
    local value_ref<Priv4> __unit = default<Priv4>();
    spicy_rt::initializeParsedUnit((*__gunit), __unit);
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:21:14-24:1"

    # Begin parsing production: Unit: foo__Priv4 -> Resolved_6 Resolved_7
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Priv4 -> Resolved_6 Resolved_7

    if ( ::__feat%foo@@Priv4%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Priv4%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

method view<stream> foo::Priv4::parse2(inout value_ref<Priv4> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:21:14-24:1"
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:21:14-24:1"

    # Begin parsing production: Unit: foo__Priv4 -> Resolved_6 Resolved_7
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Priv4 -> Resolved_6 Resolved_7

    if ( ::__feat%foo@@Priv4%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Priv4%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

init function void __register_foo_Priv4() {

    if ( ::__feat%foo@@Priv4%is_filter || ::__feat%foo@@Priv4%supports_sinks ) {
        foo::Priv4::__parser = [$name="foo::Priv4", $is_public=False, $parse1=foo::Priv4::parse1, $parse2=foo::Priv4::parse2, $parse3=foo::Priv4::parse3, $context_new=Null, $type_=Priv4, $description="", $mime_types=vector(), $ports=vector()];
        spicy_rt::registerParser(foo::Priv4::__parser, $scope, Null);
    }

}

method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::Priv5::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:27:14-27:20"
    local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();
    try {

        if ( ::__feat%foo@@Priv5%uses_random_access ) 
            __trim = False;

        hilti::debugIndent("spicy");
        local iterator<stream> __begin = begin(__cur);

        if ( ::__feat%foo@@Priv5%uses_stream ) 
            (*self).__stream = __data;


        if ( ::__feat%foo@@Priv5%uses_random_access ) 
            (*self).__begin = __begin;


        if ( ::__feat%foo@@Priv5%uses_offset ) 
            (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

        (*self).__error = __error;

        if ( ::__feat%foo@@Priv5%uses_random_access || ::__feat%foo@@Priv5%uses_offset ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_init();

        if ( ::__feat%foo@@Priv5%uses_random_access || ::__feat%foo@@Priv5%uses_offset ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        local strong_ref<stream> filtered = Null;

        if ( ::__feat%foo@@Priv5%supports_filters ) {
            local uint<64> __offset1 = begin((*__data)).offset();

            if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) {
                local value_ref<stream> __filtered_data = filtered;
                self.__parse_foo__Priv5_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error);
                local uint<64> __offset2 = begin((*__data)).offset();
                __cur = __cur.advance(__offset2 - __offset1);

                if ( __trim ) 
                    (*__data).trim(begin(__cur));

                __result = (__cur, __lah, __lahe, __error);
            }

        }


        if ( ! filtered ) 
            __result = (*self).__parse_foo__Priv5_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error);

    }
    catch ( hilti::SystemException __except ) {

        if ( ::__feat%foo@@Priv5%uses_random_access ) 
            (*self).__begin = __begin;


        if ( ::__feat%foo@@Priv5%uses_offset ) 
            (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

        (*self).__on_0x25_error(hilti::exception_what(__except));

        if ( ::__feat%foo@@Priv5%supports_filters ) 
            spicy_rt::filter_disconnect(self);


        if ( ::__feat%foo@@Priv5%supports_sinks ) {
        }

        (*self).__error = __error;

        if ( ::__feat%foo@@Priv5%uses_random_access || ::__feat%foo@@Priv5%uses_offset ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_finally();

        if ( ::__feat%foo@@Priv5%uses_random_access || ::__feat%foo@@Priv5%uses_offset ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        throw;
    }

    (*self).__error = __error;

    if ( ::__feat%foo@@Priv5%uses_random_access || ::__feat%foo@@Priv5%uses_offset ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_finally();

    if ( ::__feat%foo@@Priv5%uses_random_access || ::__feat%foo@@Priv5%uses_offset ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;
    return __result;
}

method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::Priv5::__parse_foo__Priv5_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:27:14-27:20"
    local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();

    if ( ::__feat%foo@@Priv5%uses_random_access ) 
        (*self).__begin = __begin;


    if ( ::__feat%foo@@Priv5%uses_offset ) 
        (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

    (*self).__error = __error;

    if ( ::__feat%foo@@Priv5%uses_random_access || ::__feat%foo@@Priv5%uses_offset ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_done();

    if ( ::__feat%foo@@Priv5%uses_random_access || ::__feat%foo@@Priv5%uses_offset ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;

    if ( ::__feat%foo@@Priv5%supports_filters ) 
        spicy_rt::filter_disconnect(self);


    if ( ::__feat%foo@@Priv5%supports_sinks ) {
    }

    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

method view<stream> foo::Priv5::parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:27:14-27:20"
    local value_ref<Priv5> __unit = default<Priv5>();
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:27:14-27:20"

    # Begin parsing production: Unit: foo__Priv5 ->
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Priv5 ->

    if ( ::__feat%foo@@Priv5%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Priv5%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

method view<stream> foo::Priv5::parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:27:14-27:20"
    local value_ref<Priv5> __unit = default<Priv5>();
    spicy_rt::initializeParsedUnit((*__gunit), __unit);
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:27:14-27:20"

    # Begin parsing production: Unit: foo__Priv5 ->
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Priv5 ->

    if ( ::__feat%foo@@Priv5%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Priv5%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

method view<stream> foo::Priv5::parse2(inout value_ref<Priv5> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:27:14-27:20"
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:27:14-27:20"

    # Begin parsing production: Unit: foo__Priv5 ->
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Priv5 ->

    if ( ::__feat%foo@@Priv5%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Priv5%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

init function void __register_foo_Priv5() {

    if ( ::__feat%foo@@Priv5%is_filter || ::__feat%foo@@Priv5%supports_sinks ) {
        foo::Priv5::__parser = [$name="foo::Priv5", $is_public=False, $parse1=foo::Priv5::parse1, $parse2=foo::Priv5::parse2, $parse3=foo::Priv5::parse3, $context_new=Null, $type_=Priv5, $description="", $mime_types=vector(), $ports=vector()];
        spicy_rt::registerParser(foo::Priv5::__parser, $scope, Null);
    }

}

method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::Priv6::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:28:14-28:20"
    local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();
    try {

        if ( ::__feat%foo@@Priv6%uses_random_access ) 
            __trim = False;

        hilti::debugIndent("spicy");
        local iterator<stream> __begin = begin(__cur);

        if ( ::__feat%foo@@Priv6%uses_stream ) 
            (*self).__stream = __data;


        if ( ::__feat%foo@@Priv6%uses_random_access ) 
            (*self).__begin = __begin;


        if ( ::__feat%foo@@Priv6%uses_offset ) 
            (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

        (*self).__error = __error;

        if ( ::__feat%foo@@Priv6%uses_random_access || ::__feat%foo@@Priv6%uses_offset ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_init();

        if ( ::__feat%foo@@Priv6%uses_random_access || ::__feat%foo@@Priv6%uses_offset ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        local strong_ref<stream> filtered = Null;

        if ( ::__feat%foo@@Priv6%supports_filters ) {
            local uint<64> __offset1 = begin((*__data)).offset();

            if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) {
                local value_ref<stream> __filtered_data = filtered;
                self.__parse_foo__Priv6_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error);
                local uint<64> __offset2 = begin((*__data)).offset();
                __cur = __cur.advance(__offset2 - __offset1);

                if ( __trim ) 
                    (*__data).trim(begin(__cur));

                __result = (__cur, __lah, __lahe, __error);
            }

        }


        if ( ! filtered ) 
            __result = (*self).__parse_foo__Priv6_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error);

    }
    catch ( hilti::SystemException __except ) {

        if ( ::__feat%foo@@Priv6%uses_random_access ) 
            (*self).__begin = __begin;


        if ( ::__feat%foo@@Priv6%uses_offset ) 
            (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

        (*self).__on_0x25_error(hilti::exception_what(__except));

        if ( ::__feat%foo@@Priv6%supports_filters ) 
            spicy_rt::filter_disconnect(self);


        if ( ::__feat%foo@@Priv6%supports_sinks ) {
        }

        (*self).__error = __error;

        if ( ::__feat%foo@@Priv6%uses_random_access || ::__feat%foo@@Priv6%uses_offset ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_finally();

        if ( ::__feat%foo@@Priv6%uses_random_access || ::__feat%foo@@Priv6%uses_offset ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        throw;
    }

    (*self).__error = __error;

    if ( ::__feat%foo@@Priv6%uses_random_access || ::__feat%foo@@Priv6%uses_offset ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_finally();

    if ( ::__feat%foo@@Priv6%uses_random_access || ::__feat%foo@@Priv6%uses_offset ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;
    return __result;
}

method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::Priv6::__parse_foo__Priv6_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:28:14-28:20"
    local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();

    if ( ::__feat%foo@@Priv6%uses_random_access ) 
        (*self).__begin = __begin;


    if ( ::__feat%foo@@Priv6%uses_offset ) 
        (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

    (*self).__error = __error;

    if ( ::__feat%foo@@Priv6%uses_random_access || ::__feat%foo@@Priv6%uses_offset ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_done();

    if ( ::__feat%foo@@Priv6%uses_random_access || ::__feat%foo@@Priv6%uses_offset ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;

    if ( ::__feat%foo@@Priv6%supports_filters ) 
        spicy_rt::filter_disconnect(self);


    if ( ::__feat%foo@@Priv6%supports_sinks ) {
    }

    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

method view<stream> foo::Priv6::parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:28:14-28:20"
    local value_ref<Priv6> __unit = default<Priv6>();
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:28:14-28:20"

    # Begin parsing production: Unit: foo__Priv6 ->
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Priv6 ->

    if ( ::__feat%foo@@Priv6%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Priv6%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

method view<stream> foo::Priv6::parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:28:14-28:20"
    local value_ref<Priv6> __unit = default<Priv6>();
    spicy_rt::initializeParsedUnit((*__gunit), __unit);
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:28:14-28:20"

    # Begin parsing production: Unit: foo__Priv6 ->
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Priv6 ->

    if ( ::__feat%foo@@Priv6%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Priv6%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

method view<stream> foo::Priv6::parse2(inout value_ref<Priv6> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:28:14-28:20"
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:28:14-28:20"

    # Begin parsing production: Unit: foo__Priv6 ->
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Priv6 ->

    if ( ::__feat%foo@@Priv6%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Priv6%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

init function void __register_foo_Priv6() {

    if ( ::__feat%foo@@Priv6%is_filter || ::__feat%foo@@Priv6%supports_sinks ) {
        foo::Priv6::__parser = [$name="foo::Priv6", $is_public=False, $parse1=foo::Priv6::parse1, $parse2=foo::Priv6::parse2, $parse3=foo::Priv6::parse3, $context_new=Null, $type_=Priv6, $description="", $mime_types=vector(), $ports=vector()];
        spicy_rt::registerParser(foo::Priv6::__parser, $scope, Null);
    }

}

method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::Pub3::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:29:20-32:1"
    local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();
    try {

        if ( ::__feat%foo@@Pub3%uses_random_access ) 
            __trim = False;

        hilti::debugIndent("spicy");
        local iterator<stream> __begin = begin(__cur);

        if ( ::__feat%foo@@Pub3%uses_stream ) 
            (*self).__stream = __data;


        if ( ::__feat%foo@@Pub3%uses_random_access ) 
            (*self).__begin = __begin;


        if ( ::__feat%foo@@Pub3%uses_offset ) 
            (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

        (*self).__error = __error;

        if ( ::__feat%foo@@Pub3%uses_random_access || ::__feat%foo@@Pub3%uses_offset ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_init();

        if ( ::__feat%foo@@Pub3%uses_random_access || ::__feat%foo@@Pub3%uses_offset ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        local strong_ref<stream> filtered = Null;

        if ( ::__feat%foo@@Pub3%supports_filters ) {
            local uint<64> __offset1 = begin((*__data)).offset();

            if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) {
                local value_ref<stream> __filtered_data = filtered;
                self.__parse_foo__Pub3_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error);
                local uint<64> __offset2 = begin((*__data)).offset();
                __cur = __cur.advance(__offset2 - __offset1);

                if ( __trim ) 
                    (*__data).trim(begin(__cur));

                __result = (__cur, __lah, __lahe, __error);
            }

        }


        if ( ! filtered ) 
            __result = (*self).__parse_foo__Pub3_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error);

    }
    catch ( hilti::SystemException __except ) {

        if ( ::__feat%foo@@Pub3%uses_random_access ) 
            (*self).__begin = __begin;


        if ( ::__feat%foo@@Pub3%uses_offset ) 
            (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

        (*self).__on_0x25_error(hilti::exception_what(__except));

        if ( ::__feat%foo@@Pub3%supports_filters ) 
            spicy_rt::filter_disconnect(self);


        if ( ::__feat%foo@@Pub3%supports_sinks ) {
        }

        (*self).__error = __error;

        if ( ::__feat%foo@@Pub3%uses_random_access || ::__feat%foo@@Pub3%uses_offset ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_finally();

        if ( ::__feat%foo@@Pub3%uses_random_access || ::__feat%foo@@Pub3%uses_offset ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        throw;
    }

    (*self).__error = __error;

    if ( ::__feat%foo@@Pub3%uses_random_access || ::__feat%foo@@Pub3%uses_offset ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_finally();

    if ( ::__feat%foo@@Pub3%uses_random_access || ::__feat%foo@@Pub3%uses_offset ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;
    return __result;
}

method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::Pub3::__parse_foo__Pub3_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:29:20-32:1"
    local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();
    local value_ref<Priv5> __transient__anon_2;
    # "<...>/unused-types.spicy:27:14-27:20"

    # Begin parsing production: Unit: foo__Priv5_2 ->
    __transient__anon_2 = default<Priv5>();
    (__cur, __lah, __lahe, __error) = (*__transient__anon_2).__parse_stage1(__data, __begin, __cur, __trim, __lah, __lahe, __error);
    # End parsing production: Unit: foo__Priv5_2 ->

    if ( ::__feat%foo@@Pub3%uses_random_access ) 
        (*self).__begin = __begin;


    if ( ::__feat%foo@@Pub3%uses_offset ) 
        (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

    try {
        # "<...>/unused-types.spicy:28:14-28:20"

        # Begin parsing production: Unit: foo__Priv6_2 ->
        (*self).x = default<Priv6>();
        (__cur, __lah, __lahe, __error) = (*(*self).x).__parse_stage1(__data, __begin, __cur, __trim, __lah, __lahe, __error);
        # End parsing production: Unit: foo__Priv6_2 ->

        (*self).__error = __error;

        if ( ::__feat%foo@@Pub3%uses_random_access || ::__feat%foo@@Pub3%uses_offset ) 
            (*self).__position_update = Null;

        (*self).__on_x((*self).x);

        if ( ::__feat%foo@@Pub3%uses_random_access || ::__feat%foo@@Pub3%uses_offset ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
    }
    catch ( hilti::SystemException __except ) {
        (*self).__on_x_error(hilti::exception_what(__except));
        throw;
    }


    if ( ::__feat%foo@@Pub3%uses_random_access ) 
        (*self).__begin = __begin;


    if ( ::__feat%foo@@Pub3%uses_offset ) 
        (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());


    if ( ::__feat%foo@@Pub3%uses_random_access ) 
        (*self).__begin = __begin;


    if ( ::__feat%foo@@Pub3%uses_offset ) 
        (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

    (*self).__error = __error;

    if ( ::__feat%foo@@Pub3%uses_random_access || ::__feat%foo@@Pub3%uses_offset ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_done();

    if ( ::__feat%foo@@Pub3%uses_random_access || ::__feat%foo@@Pub3%uses_offset ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;

    if ( ::__feat%foo@@Pub3%supports_filters ) 
        spicy_rt::filter_disconnect(self);


    if ( ::__feat%foo@@Pub3%supports_sinks ) {
    }

    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

method view<stream> foo::Pub3::parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:29:20-32:1"
    local value_ref<Pub3> __unit = default<Pub3>();
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:29:20-32:1"

    # Begin parsing production: Unit: foo__Pub3 -> Resolved_11 Resolved_12
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Pub3 -> Resolved_11 Resolved_12

    if ( ::__feat%foo@@Pub3%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Pub3%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

method view<stream> foo::Pub3::parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:29:20-32:1"
    local value_ref<Pub3> __unit = default<Pub3>();
    spicy_rt::initializeParsedUnit((*__gunit), __unit);
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:29:20-32:1"

    # Begin parsing production: Unit: foo__Pub3 -> Resolved_11 Resolved_12
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Pub3 -> Resolved_11 Resolved_12

    if ( ::__feat%foo@@Pub3%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Pub3%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

method view<stream> foo::Pub3::parse2(inout value_ref<Pub3> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:29:20-32:1"
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:29:20-32:1"

    # Begin parsing production: Unit: foo__Pub3 -> Resolved_11 Resolved_12
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Pub3 -> Resolved_11 Resolved_12

    if ( ::__feat%foo@@Pub3%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Pub3%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

init function void __register_foo_Pub3() {
    foo::Pub3::__parser = [$name="foo::Pub3", $is_public=True, $parse1=foo::Pub3::parse1, $parse2=foo::Pub3::parse2, $parse3=foo::Pub3::parse3, $context_new=Null, $type_=Pub3, $description="", $mime_types=vector(), $ports=vector()];
    spicy_rt::registerParser(foo::Pub3::__parser, $scope, Null);
}

method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::Priv10::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:43:22-46:1"
    local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();
    try {

        if ( ::__feat%foo@@Priv10%uses_random_access ) 
            __trim = False;

        hilti::debugIndent("spicy");
        local iterator<stream> __begin = begin(__cur);

        if ( ::__feat%foo@@Priv10%uses_stream ) 
            (*self).__stream = __data;


        if ( ::__feat%foo@@Priv10%uses_random_access ) 
            (*self).__begin = __begin;


        if ( ::__feat%foo@@Priv10%uses_offset ) 
            (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

        (*self).__error = __error;

        if ( ::__feat%foo@@Priv10%uses_random_access || ::__feat%foo@@Priv10%uses_offset ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_init();

        if ( ::__feat%foo@@Priv10%uses_random_access || ::__feat%foo@@Priv10%uses_offset ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        local strong_ref<stream> filtered = Null;

        if ( ::__feat%foo@@Priv10%supports_filters ) {
            local uint<64> __offset1 = begin((*__data)).offset();

            if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) {
                local value_ref<stream> __filtered_data = filtered;
                self.__parse_foo__Priv10_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error);
                local uint<64> __offset2 = begin((*__data)).offset();
                __cur = __cur.advance(__offset2 - __offset1);

                if ( __trim ) 
                    (*__data).trim(begin(__cur));

                __result = (__cur, __lah, __lahe, __error);
            }

        }


        if ( ! filtered ) 
            __result = (*self).__parse_foo__Priv10_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error);

    }
    catch ( hilti::SystemException __except ) {

        if ( ::__feat%foo@@Priv10%uses_random_access ) 
            (*self).__begin = __begin;


        if ( ::__feat%foo@@Priv10%uses_offset ) 
            (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

        (*self).__on_0x25_error(hilti::exception_what(__except));

        if ( ::__feat%foo@@Priv10%supports_filters ) 
            spicy_rt::filter_disconnect(self);


        if ( ::__feat%foo@@Priv10%supports_sinks ) {
        }

        (*self).__error = __error;

        if ( ::__feat%foo@@Priv10%uses_random_access || ::__feat%foo@@Priv10%uses_offset ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_finally();

        if ( ::__feat%foo@@Priv10%uses_random_access || ::__feat%foo@@Priv10%uses_offset ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        __error = (*self).__error;
        throw;
    }

    (*self).__error = __error;

    if ( ::__feat%foo@@Priv10%uses_random_access || ::__feat%foo@@Priv10%uses_offset ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_finally();

    if ( ::__feat%foo@@Priv10%uses_random_access || ::__feat%foo@@Priv10%uses_offset ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;
    return __result;
}

method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::Priv10::__parse_foo__Priv10_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:43:22-46:1"
    local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();

    if ( ::__feat%foo@@Priv10%uses_random_access ) 
        (*self).__begin = __begin;


    if ( ::__feat%foo@@Priv10%uses_offset ) 
        (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset());

    (*self).__error = __error;

    if ( ::__feat%foo@@Priv10%uses_random_access || ::__feat%foo@@Priv10%uses_offset ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_done();

    if ( ::__feat%foo@@Priv10%uses_random_access || ::__feat%foo@@Priv10%uses_offset ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    __error = (*self).__error;

    if ( ::__feat%foo@@Priv10%supports_filters ) 
        spicy_rt::filter_disconnect(self);


    if ( ::__feat%foo@@Priv10%supports_sinks ) {
    }

    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

method view<stream> foo::Priv10::parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:43:22-46:1"
    local value_ref<Priv10> __unit = default<Priv10>();
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:43:22-46:1"

    # Begin parsing production: Unit: foo__Priv10 ->
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Priv10 ->

    if ( ::__feat%foo@@Priv10%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Priv10%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

method view<stream> foo::Priv10::parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:43:22-46:1"
    local value_ref<Priv10> __unit = default<Priv10>();
    spicy_rt::initializeParsedUnit((*__gunit), __unit);
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:43:22-46:1"

    # Begin parsing production: Unit: foo__Priv10 ->
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Priv10 ->

    if ( ::__feat%foo@@Priv10%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Priv10%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

method view<stream> foo::Priv10::parse2(inout value_ref<Priv10> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-types.spicy:43:22-46:1"
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-types.spicy:43:22-46:1"

    # Begin parsing production: Unit: foo__Priv10 ->
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__Priv10 ->

    if ( ::__feat%foo@@Priv10%uses_random_access ) 
        (*__unit).__begin = begin(__ncur);


    if ( ::__feat%foo@@Priv10%uses_offset ) 
        (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset());


    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

init function void __register_foo_Priv10() {
    foo::Priv10::__parser = [$name="foo::Priv10", $is_public=True, $parse1=foo::Priv10::parse1, $parse2=foo::Priv10::parse2, $parse3=foo::Priv10::parse3, $context_new=Null, $type_=Priv10, $description="", $mime_types=vector(), $ports=vector()];
    spicy_rt::registerParser(foo::Priv10::__parser, $scope, Null);
}

}
