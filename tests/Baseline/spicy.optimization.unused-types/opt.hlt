### BTest baseline data generated by btest-diff. Do not edit. Use "btest -U/-u" to update. Requires BTest >= 0.63.
module foo {

import spicy_rt;
import hilti;

public type Pub2 = struct {
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &always-emit;
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse2(inout value_ref<Pub2> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo_Pub2_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;
type Priv5 = struct {
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo_Priv5_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;
type Priv6 = struct {
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo_Priv6_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;
public type Pub3 = struct {
    value_ref<Priv5> anon_2 &optional &anonymous &no-emit;
    value_ref<Priv6> x &optional;
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &always-emit;
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse2(inout value_ref<Pub3> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo_Pub3_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;
public type Pub4 = enum { A = 0, B = 1, C = 2 };
type Priv8 = enum { A = 0, B = 1, C = 2 };
type Priv9 = enum { A = 0, B = 1, C = 2 };
public type Priv10 = struct {
    Priv8 en &default=Priv8::A;
    Priv9 em;
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &always-emit;
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse2(inout value_ref<Priv10> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo_Priv10_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;
type Priv11 = enum { A = 0, B = 1, C = 2 };
type Priv12 = enum { A = 0, B = 1, C = 2 };

const bool __feat%foo@@Priv1%uses_offset = False;
const bool __feat%foo@@Priv1%uses_random_access = False;
const bool __feat%foo@@Priv1%is_filter = False;
const bool __feat%foo@@Priv1%supports_filters = False;
const bool __feat%foo@@Priv1%supports_sinks = False;
const bool __feat%foo@@Priv1%synchronization = False;
const bool __feat%foo@@Pub2%uses_offset = False;
const bool __feat%foo@@Pub2%uses_random_access = False;
const bool __feat%foo@@Pub2%is_filter = False;
const bool __feat%foo@@Pub2%supports_filters = False;
const bool __feat%foo@@Pub2%supports_sinks = False;
const bool __feat%foo@@Pub2%synchronization = False;
const bool __feat%foo@@Priv2%uses_offset = False;
const bool __feat%foo@@Priv2%uses_random_access = False;
const bool __feat%foo@@Priv2%is_filter = False;
const bool __feat%foo@@Priv2%supports_filters = False;
const bool __feat%foo@@Priv2%supports_sinks = False;
const bool __feat%foo@@Priv2%synchronization = False;
const bool __feat%foo@@Priv3%uses_offset = False;
const bool __feat%foo@@Priv3%uses_random_access = False;
const bool __feat%foo@@Priv3%is_filter = False;
const bool __feat%foo@@Priv3%supports_filters = False;
const bool __feat%foo@@Priv3%supports_sinks = False;
const bool __feat%foo@@Priv3%synchronization = False;
const bool __feat%foo@@Priv4%uses_offset = False;
const bool __feat%foo@@Priv4%uses_random_access = False;
const bool __feat%foo@@Priv4%is_filter = False;
const bool __feat%foo@@Priv4%supports_filters = False;
const bool __feat%foo@@Priv4%supports_sinks = False;
const bool __feat%foo@@Priv4%synchronization = False;
const bool __feat%foo@@Priv5%uses_offset = False;
const bool __feat%foo@@Priv5%uses_random_access = False;
const bool __feat%foo@@Priv5%is_filter = False;
const bool __feat%foo@@Priv5%supports_filters = False;
const bool __feat%foo@@Priv5%supports_sinks = False;
const bool __feat%foo@@Priv5%synchronization = False;
const bool __feat%foo@@Priv6%uses_offset = False;
const bool __feat%foo@@Priv6%uses_random_access = False;
const bool __feat%foo@@Priv6%is_filter = False;
const bool __feat%foo@@Priv6%supports_filters = False;
const bool __feat%foo@@Priv6%supports_sinks = False;
const bool __feat%foo@@Priv6%synchronization = False;
const bool __feat%foo@@Pub3%uses_offset = False;
const bool __feat%foo@@Pub3%uses_random_access = False;
const bool __feat%foo@@Pub3%is_filter = False;
const bool __feat%foo@@Pub3%supports_filters = False;
const bool __feat%foo@@Pub3%supports_sinks = False;
const bool __feat%foo@@Pub3%synchronization = False;
const bool __feat%foo@@Priv10%uses_offset = False;
const bool __feat%foo@@Priv10%uses_random_access = False;
const bool __feat%foo@@Priv10%is_filter = False;
const bool __feat%foo@@Priv10%supports_filters = False;
const bool __feat%foo@@Priv10%supports_sinks = False;
const bool __feat%foo@@Priv10%synchronization = False;

global Priv11 en;
global Priv12 em = Priv12::A;

init function void __register_foo_Priv1() &pure {
}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::Pub2::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:16:20"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;
    try {
        hilti::debugIndent("spicy");
        local iterator<stream> __begin = begin(__cur);
        (*self).__error = __error;
        __error = (*self).__error;
        local strong_ref<stream> filtered = Null;

        if ( ! filtered ) 
            __result = (*self).__parse_foo_Pub2_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error);

    }
    catch ( hilti::SystemException __except ) {
        (*self).__error = __error;
        __error = (*self).__error;
        throw;
    }

    (*self).__error = __error;
    __error = (*self).__error;
    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::Pub2::__parse_foo_Pub2_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:16:20"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;
    (*self).__error = __error;
    __error = (*self).__error;
    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

method extern method view<stream> foo::Pub2::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/unused-types.spicy:16:20"
    local value_ref<Pub2> unit = value_ref(default<Pub2>())value_ref(default<Pub2>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/unused-types.spicy:16:20"

    # Begin parsing production: Unit: foo_Pub2 ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_Pub2 ->

    if ( error ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::Pub2::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/unused-types.spicy:16:20"
    local value_ref<Pub2> unit = value_ref(default<Pub2>())value_ref(default<Pub2>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(Pub2));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/unused-types.spicy:16:20"

    # Begin parsing production: Unit: foo_Pub2 ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_Pub2 ->

    if ( error ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::Pub2::parse2(inout value_ref<Pub2> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/unused-types.spicy:16:20"
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/unused-types.spicy:16:20"

    # Begin parsing production: Unit: foo_Pub2 ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_Pub2 ->

    if ( error ) 
        throw ;

    return ncur;
}

init function void __register_foo_Pub2() {
    foo::Pub2::__parser = [$name="foo::Pub2", $is_public=True, $parse1=foo::Pub2::parse1, $parse2=foo::Pub2::parse2, $parse3=foo::Pub2::parse3, $context_new=Null, $type_info=typeinfo(Pub2), $description="", $mime_types=vector(), $ports=vector()];
    spicy_rt::registerParser(foo::Pub2::__parser, $scope, Null);
}

init function void __register_foo_Priv2() &pure {
}

init function void __register_foo_Priv3() &pure {
}

init function void __register_foo_Priv4() &pure {
}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::Priv5::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:27:14"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;
    try {
        hilti::debugIndent("spicy");
        local iterator<stream> __begin = begin(__cur);
        (*self).__error = __error;
        __error = (*self).__error;
        local strong_ref<stream> filtered = Null;

        if ( ! filtered ) 
            __result = (*self).__parse_foo_Priv5_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error);

    }
    catch ( hilti::SystemException __except ) {
        (*self).__error = __error;
        __error = (*self).__error;
        throw;
    }

    (*self).__error = __error;
    __error = (*self).__error;
    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::Priv5::__parse_foo_Priv5_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:27:14"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;
    (*self).__error = __error;
    __error = (*self).__error;
    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

init function void __register_foo_Priv5() &pure {
}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::Priv6::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:28:14"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;
    try {
        hilti::debugIndent("spicy");
        local iterator<stream> __begin = begin(__cur);
        (*self).__error = __error;
        __error = (*self).__error;
        local strong_ref<stream> filtered = Null;

        if ( ! filtered ) 
            __result = (*self).__parse_foo_Priv6_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error);

    }
    catch ( hilti::SystemException __except ) {
        (*self).__error = __error;
        __error = (*self).__error;
        throw;
    }

    (*self).__error = __error;
    __error = (*self).__error;
    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::Priv6::__parse_foo_Priv6_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:28:14"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;
    (*self).__error = __error;
    __error = (*self).__error;
    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

init function void __register_foo_Priv6() &pure {
}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::Pub3::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:29:20-32:2"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;
    try {
        hilti::debugIndent("spicy");
        local iterator<stream> __begin = begin(__cur);
        (*self).__error = __error;
        __error = (*self).__error;
        local strong_ref<stream> filtered = Null;

        if ( ! filtered ) 
            __result = (*self).__parse_foo_Pub3_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error);

    }
    catch ( hilti::SystemException __except ) {
        (*self).__error = __error;
        __error = (*self).__error;
        throw;
    }

    (*self).__error = __error;
    __error = (*self).__error;
    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::Pub3::__parse_foo_Pub3_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:29:20-32:2"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;
    local value_ref<Priv5> __transient_anon_2;
    # "<...>/unused-types.spicy:27:14"

    # Begin parsing production: Unit: foo_Priv5_2 ->
    __transient_anon_2 = default<Priv5>();
    (__cur, __lah, __lahe, __error) = (*__transient_anon_2).__parse_stage1(__data, __begin, __cur, __trim, __lah, __lahe, __error);
    # End parsing production: Unit: foo_Priv5_2 ->

    # "<...>/unused-types.spicy:28:14"

    # Begin parsing production: Unit: foo_Priv6_2 ->
    (*self).x = default<Priv6>();
    (__cur, __lah, __lahe, __error) = (*(*self).x).__parse_stage1(__data, __begin, __cur, __trim, __lah, __lahe, __error);
    # End parsing production: Unit: foo_Priv6_2 ->

    (*self).__error = __error;
    __error = (*self).__error;
    (*self).__error = __error;
    __error = (*self).__error;
    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

method extern method view<stream> foo::Pub3::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/unused-types.spicy:29:20-32:2"
    local value_ref<Pub3> unit = value_ref(default<Pub3>())value_ref(default<Pub3>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/unused-types.spicy:29:20-32:2"

    # Begin parsing production: Unit: foo_Pub3 -> foo_Priv5_2 foo_Priv6_2
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_Pub3 -> foo_Priv5_2 foo_Priv6_2

    if ( error ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::Pub3::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/unused-types.spicy:29:20-32:2"
    local value_ref<Pub3> unit = value_ref(default<Pub3>())value_ref(default<Pub3>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(Pub3));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/unused-types.spicy:29:20-32:2"

    # Begin parsing production: Unit: foo_Pub3 -> foo_Priv5_2 foo_Priv6_2
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_Pub3 -> foo_Priv5_2 foo_Priv6_2

    if ( error ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::Pub3::parse2(inout value_ref<Pub3> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/unused-types.spicy:29:20-32:2"
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/unused-types.spicy:29:20-32:2"

    # Begin parsing production: Unit: foo_Pub3 -> foo_Priv5_2 foo_Priv6_2
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_Pub3 -> foo_Priv5_2 foo_Priv6_2

    if ( error ) 
        throw ;

    return ncur;
}

init function void __register_foo_Pub3() {
    foo::Pub3::__parser = [$name="foo::Pub3", $is_public=True, $parse1=foo::Pub3::parse1, $parse2=foo::Pub3::parse2, $parse3=foo::Pub3::parse3, $context_new=Null, $type_info=typeinfo(Pub3), $description="", $mime_types=vector(), $ports=vector()];
    spicy_rt::registerParser(foo::Pub3::__parser, $scope, Null);
}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::Priv10::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:43:22-46:2"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;
    try {
        hilti::debugIndent("spicy");
        local iterator<stream> __begin = begin(__cur);
        (*self).__error = __error;
        __error = (*self).__error;
        local strong_ref<stream> filtered = Null;

        if ( ! filtered ) 
            __result = (*self).__parse_foo_Priv10_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error);

    }
    catch ( hilti::SystemException __except ) {
        (*self).__error = __error;
        __error = (*self).__error;
        throw;
    }

    (*self).__error = __error;
    __error = (*self).__error;
    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::Priv10::__parse_foo_Priv10_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-types.spicy:43:22-46:2"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;
    (*self).__error = __error;
    __error = (*self).__error;
    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

method extern method view<stream> foo::Priv10::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/unused-types.spicy:43:22-46:2"
    local value_ref<Priv10> unit = value_ref(default<Priv10>())value_ref(default<Priv10>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/unused-types.spicy:43:22-46:2"

    # Begin parsing production: Unit: foo_Priv10 ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_Priv10 ->

    if ( error ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::Priv10::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/unused-types.spicy:43:22-46:2"
    local value_ref<Priv10> unit = value_ref(default<Priv10>())value_ref(default<Priv10>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(Priv10));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/unused-types.spicy:43:22-46:2"

    # Begin parsing production: Unit: foo_Priv10 ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_Priv10 ->

    if ( error ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::Priv10::parse2(inout value_ref<Priv10> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/unused-types.spicy:43:22-46:2"
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/unused-types.spicy:43:22-46:2"

    # Begin parsing production: Unit: foo_Priv10 ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_Priv10 ->

    if ( error ) 
        throw ;

    return ncur;
}

init function void __register_foo_Priv10() {
    foo::Priv10::__parser = [$name="foo::Priv10", $is_public=True, $parse1=foo::Priv10::parse1, $parse2=foo::Priv10::parse2, $parse3=foo::Priv10::parse3, $context_new=Null, $type_info=typeinfo(Priv10), $description="", $mime_types=vector(), $ports=vector()];
    spicy_rt::registerParser(foo::Priv10::__parser, $scope, Null);
}

}
