### BTest baseline data generated by btest-diff. Do not edit. Use "btest -U/-u" to update. Requires BTest >= 0.63.
module foo {

import spicy_rt;
import hilti;

type X1 = struct {
    optional<iterator<stream>> __begin &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks";
    spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";
    strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";
    hook void __on_0x25_init();
    hook void __on_0x25_done();
    hook void __on_0x25_error();
    hook optional<string> __str__();
    hook void __on_0x25_finally();
    hook void __on_0x25_gap(uint<64> seq, uint<64> len);
    hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);
    hook void __on_0x25_skipped(uint<64> seq);
    hook void __on_0x25_undelivered(uint<64> seq, bytes data);
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse2(inout value_ref<X1> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_foo_X1_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
} &on-heap;
type X2 = struct {
    optional<iterator<stream>> __begin &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks";
    spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";
    strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";
    hook void __on_0x25_init();
    hook void __on_0x25_done();
    hook void __on_0x25_error();
    hook optional<string> __str__();
    hook void __on_0x25_finally();
    hook void __on_0x25_gap(uint<64> seq, uint<64> len);
    hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);
    hook void __on_0x25_skipped(uint<64> seq);
    hook void __on_0x25_undelivered(uint<64> seq, bytes data);
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse2(inout value_ref<X2> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_foo_X2_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
} &on-heap;
type X3 = struct {
    optional<iterator<stream>> __begin &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks" &needed-by-feature="is_filter";
    spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";
    strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";
    weak_ref<spicy_rt::Forward> __forward &internal &needed-by-feature="is_filter";
    hook void __on_0x25_init();
    hook void __on_0x25_done();
    hook void __on_0x25_error();
    hook optional<string> __str__();
    hook void __on_0x25_finally();
    hook void __on_0x25_gap(uint<64> seq, uint<64> len);
    hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);
    hook void __on_0x25_skipped(uint<64> seq);
    hook void __on_0x25_undelivered(uint<64> seq, bytes data);
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse2(inout value_ref<X3> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_foo_X3_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
} &on-heap;
type X4 = struct {
    optional<iterator<stream>> __begin &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks" &needed-by-feature="is_filter";
    spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";
    strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";
    weak_ref<spicy_rt::Forward> __forward &internal &needed-by-feature="is_filter";
    hook void __on_0x25_init();
    hook void __on_0x25_done();
    hook void __on_0x25_error();
    hook optional<string> __str__();
    hook void __on_0x25_finally();
    hook void __on_0x25_gap(uint<64> seq, uint<64> len);
    hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);
    hook void __on_0x25_skipped(uint<64> seq);
    hook void __on_0x25_undelivered(uint<64> seq, bytes data);
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse2(inout value_ref<X4> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_foo_X4_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
} &on-heap;
public type X5 = struct {
    optional<iterator<stream>> __begin &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &always-emit;
    spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";
    strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";
    hook void __on_0x25_init();
    hook void __on_0x25_done();
    hook void __on_0x25_error();
    hook optional<string> __str__();
    hook void __on_0x25_finally();
    hook void __on_0x25_gap(uint<64> seq, uint<64> len);
    hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);
    hook void __on_0x25_skipped(uint<64> seq);
    hook void __on_0x25_undelivered(uint<64> seq, bytes data);
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse2(inout value_ref<X5> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_foo_X5_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
} &on-heap;
type X6 = struct {
    strong_ref<spicy_rt::Sink> data &default=new spicy_rt::Sink() &internal &needed-by-feature="supports_sinks";
    optional<iterator<stream>> __begin &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks";
    spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";
    strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";
    hook void __on_0x25_init();
    hook void __on_0x25_done();
    hook void __on_0x25_error();
    hook optional<string> __str__();
    hook void __on_0x25_finally();
    hook void __on_0x25_gap(uint<64> seq, uint<64> len);
    hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);
    hook void __on_0x25_skipped(uint<64> seq);
    hook void __on_0x25_undelivered(uint<64> seq, bytes data);
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse2(inout value_ref<X6> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_foo_X6_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
} &on-heap;

const bool __feat%foo__X1%uses_random_access = True;
const bool __feat%foo__X1%is_filter = False;
const bool __feat%foo__X1%supports_filters = True;
const bool __feat%foo__X1%supports_sinks = True;
const bool __feat%foo__X2%uses_random_access = True;
const bool __feat%foo__X2%is_filter = False;
const bool __feat%foo__X2%supports_filters = True;
const bool __feat%foo__X2%supports_sinks = True;
const bool __feat%foo__X3%uses_random_access = True;
const bool __feat%foo__X3%is_filter = True;
const bool __feat%foo__X3%supports_filters = True;
const bool __feat%foo__X3%supports_sinks = True;
const bool __feat%foo__X4%uses_random_access = True;
const bool __feat%foo__X4%is_filter = True;
const bool __feat%foo__X4%supports_filters = True;
const bool __feat%foo__X4%supports_sinks = True;
const bool __feat%foo__X5%uses_random_access = True;
const bool __feat%foo__X5%is_filter = False;
const bool __feat%foo__X5%supports_filters = True;
const bool __feat%foo__X5%supports_sinks = True;
const bool __feat%foo__X6%uses_random_access = True;
const bool __feat%foo__X6%is_filter = False;
const bool __feat%foo__X6%supports_filters = True;
const bool __feat%foo__X6%supports_sinks = True;

method hook void foo::X1::__on_0x25_init() {
    cast<uint<64>>((*(*self).__position) - (*(*self).__begin));
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::X1::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    try {

        if ( __feat%foo__X1%uses_random_access ) 
            __trim = False;

        hilti::debugIndent("spicy");

        if ( __feat%foo__X1%uses_random_access ) {
            (*self).__begin = begin(__cur);
            (*self).__position = begin(__cur);
        }


        if ( __feat%foo__X1%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_init();

        if ( __feat%foo__X1%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        local strong_ref<stream> filtered = Null;

        if ( __feat%foo__X1%supports_filters ) 

            if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) {
                local value_ref<stream> filtered_data = filtered;
                (*self).__parse_foo_X1_stage2(filtered_data, (*filtered_data), __trim, __lah, __lahe);
                __cur = __cur.advance(|__cur|);

                if ( __trim ) 
                    (*__data).trim(begin(__cur));

                __result = (__cur, __lah, __lahe);
            }



        if ( ! filtered ) 
            __result = (*self).__parse_foo_X1_stage2(__data, __cur, __trim, __lah, __lahe);

    }
    catch {

        if ( __feat%foo__X1%uses_random_access ) 
            (*self).__position = begin(__cur);

        (*self).__on_0x25_error();

        if ( __feat%foo__X1%supports_filters ) 
            spicy_rt::filter_disconnect(self);


        if ( __feat%foo__X1%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_finally();

        if ( __feat%foo__X1%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        throw;
    }


    if ( __feat%foo__X1%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_finally();

    if ( __feat%foo__X1%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::X1::__parse_foo_X1_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    local int<64> __next_field = 0;

    if ( __feat%foo__X1%uses_random_access ) 
        (*self).__position = begin(__cur);


    if ( __feat%foo__X1%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_done();

    if ( __feat%foo__X1%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }



    if ( __feat%foo__X1%supports_filters ) 
        spicy_rt::filter_disconnect(self);

    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe);
    return __result;
}

method extern method view<stream> foo::X1::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local value_ref<X1> unit = value_ref(default<X1>())value_ref(default<X1>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_X1 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_X1 ->

    if ( __feat%foo__X1%uses_random_access ) 
        (*unit).__position = begin(ncur);

    return ncur;
}

method extern method view<stream> foo::X1::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local value_ref<X1> unit = value_ref(default<X1>())value_ref(default<X1>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(foo::X1));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_X1 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_X1 ->

    if ( __feat%foo__X1%uses_random_access ) 
        (*unit).__position = begin(ncur);

    return ncur;
}

method extern method view<stream> foo::X1::parse2(inout value_ref<X1> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_X1 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_X1 ->

    if ( __feat%foo__X1%uses_random_access ) 
        (*unit).__position = begin(ncur);

    return ncur;
}

init function void __register_foo_X1() {

    if ( __feat%foo__X1%is_filter || __feat%foo__X1%supports_sinks ) {
        foo::X1::__parser = [$name="foo::X1", $is_public=False, $parse1=foo::X1::parse1, $parse2=foo::X1::parse2, $parse3=foo::X1::parse3, $context_new=Null, $type_info=typeinfo(X1), $description="", $mime_types=vector(), $ports=vector()];
        spicy_rt::registerParser(foo::X1::__parser, hilti::linker_scope(), Null);
    }

}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::X2::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    try {

        if ( __feat%foo__X2%uses_random_access ) 
            __trim = False;

        hilti::debugIndent("spicy");

        if ( __feat%foo__X2%uses_random_access ) {
            (*self).__begin = begin(__cur);
            (*self).__position = begin(__cur);
        }


        if ( __feat%foo__X2%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_init();

        if ( __feat%foo__X2%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        local strong_ref<stream> filtered = Null;

        if ( __feat%foo__X2%supports_filters ) 

            if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) {
                local value_ref<stream> filtered_data = filtered;
                (*self).__parse_foo_X2_stage2(filtered_data, (*filtered_data), __trim, __lah, __lahe);
                __cur = __cur.advance(|__cur|);

                if ( __trim ) 
                    (*__data).trim(begin(__cur));

                __result = (__cur, __lah, __lahe);
            }



        if ( ! filtered ) 
            __result = (*self).__parse_foo_X2_stage2(__data, __cur, __trim, __lah, __lahe);

    }
    catch {

        if ( __feat%foo__X2%uses_random_access ) 
            (*self).__position = begin(__cur);

        (*self).__on_0x25_error();

        if ( __feat%foo__X2%supports_filters ) 
            spicy_rt::filter_disconnect(self);


        if ( __feat%foo__X2%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_finally();

        if ( __feat%foo__X2%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        throw;
    }


    if ( __feat%foo__X2%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_finally();

    if ( __feat%foo__X2%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::X2::__parse_foo_X2_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    local int<64> __next_field = 0;

    if ( __feat%foo__X2%uses_random_access ) 
        (*self).__position = begin(__cur);


    if ( __feat%foo__X2%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_done();

    if ( __feat%foo__X2%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }



    if ( __feat%foo__X2%supports_filters ) 
        spicy_rt::filter_disconnect(self);

    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe);
    return __result;
}

method extern method view<stream> foo::X2::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local value_ref<X2> unit = value_ref(default<X2>())value_ref(default<X2>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_X2 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_X2 ->

    if ( __feat%foo__X2%uses_random_access ) 
        (*unit).__position = begin(ncur);

    return ncur;
}

method extern method view<stream> foo::X2::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local value_ref<X2> unit = value_ref(default<X2>())value_ref(default<X2>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(foo::X2));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_X2 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_X2 ->

    if ( __feat%foo__X2%uses_random_access ) 
        (*unit).__position = begin(ncur);

    return ncur;
}

method extern method view<stream> foo::X2::parse2(inout value_ref<X2> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_X2 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_X2 ->

    if ( __feat%foo__X2%uses_random_access ) 
        (*unit).__position = begin(ncur);

    return ncur;
}

init function void __register_foo_X2() {

    if ( __feat%foo__X2%is_filter || __feat%foo__X2%supports_sinks ) {
        foo::X2::__parser = [$name="foo::X2", $is_public=False, $parse1=foo::X2::parse1, $parse2=foo::X2::parse2, $parse3=foo::X2::parse3, $context_new=Null, $type_info=typeinfo(X2), $description="", $mime_types=vector(), $ports=vector()];
        spicy_rt::registerParser(foo::X2::__parser, hilti::linker_scope(), Null);
    }

}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::X3::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    try {

        if ( __feat%foo__X3%uses_random_access ) 
            __trim = False;

        hilti::debugIndent("spicy");

        if ( __feat%foo__X3%uses_random_access ) {
            (*self).__begin = begin(__cur);
            (*self).__position = begin(__cur);
        }


        if ( __feat%foo__X3%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_init();

        if ( __feat%foo__X3%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        local strong_ref<stream> filtered = Null;

        if ( __feat%foo__X3%supports_filters ) 

            if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) {
                local value_ref<stream> filtered_data = filtered;
                (*self).__parse_foo_X3_stage2(filtered_data, (*filtered_data), __trim, __lah, __lahe);
                __cur = __cur.advance(|__cur|);

                if ( __trim ) 
                    (*__data).trim(begin(__cur));

                __result = (__cur, __lah, __lahe);
            }



        if ( ! filtered ) 
            __result = (*self).__parse_foo_X3_stage2(__data, __cur, __trim, __lah, __lahe);

    }
    catch {

        if ( __feat%foo__X3%uses_random_access ) 
            (*self).__position = begin(__cur);

        (*self).__on_0x25_error();

        if ( __feat%foo__X3%supports_filters ) 
            spicy_rt::filter_disconnect(self);


        if ( __feat%foo__X3%is_filter ) 
            spicy_rt::filter_forward_eod(self);


        if ( __feat%foo__X3%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_finally();

        if ( __feat%foo__X3%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        throw;
    }


    if ( __feat%foo__X3%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_finally();

    if ( __feat%foo__X3%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::X3::__parse_foo_X3_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    local int<64> __next_field = 0;

    if ( __feat%foo__X3%uses_random_access ) 
        (*self).__position = begin(__cur);


    if ( __feat%foo__X3%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_done();

    if ( __feat%foo__X3%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }



    if ( __feat%foo__X3%supports_filters ) 
        spicy_rt::filter_disconnect(self);


    if ( __feat%foo__X3%is_filter ) 
        spicy_rt::filter_forward_eod(self);

    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe);
    return __result;
}

method extern method view<stream> foo::X3::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local value_ref<X3> unit = value_ref(default<X3>())value_ref(default<X3>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_X3 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_X3 ->

    if ( __feat%foo__X3%uses_random_access ) 
        (*unit).__position = begin(ncur);

    return ncur;
}

method extern method view<stream> foo::X3::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local value_ref<X3> unit = value_ref(default<X3>())value_ref(default<X3>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(foo::X3));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_X3 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_X3 ->

    if ( __feat%foo__X3%uses_random_access ) 
        (*unit).__position = begin(ncur);

    return ncur;
}

method extern method view<stream> foo::X3::parse2(inout value_ref<X3> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_X3 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_X3 ->

    if ( __feat%foo__X3%uses_random_access ) 
        (*unit).__position = begin(ncur);

    return ncur;
}

init function void __register_foo_X3() {

    if ( __feat%foo__X3%is_filter || __feat%foo__X3%supports_sinks ) {
        foo::X3::__parser = [$name="foo::X3", $is_public=False, $parse1=foo::X3::parse1, $parse2=foo::X3::parse2, $parse3=foo::X3::parse3, $context_new=Null, $type_info=typeinfo(X3), $description="", $mime_types=vector(), $ports=vector()];
        spicy_rt::registerParser(foo::X3::__parser, hilti::linker_scope(), Null);
    }

}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::X4::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    try {

        if ( __feat%foo__X4%uses_random_access ) 
            __trim = False;

        hilti::debugIndent("spicy");

        if ( __feat%foo__X4%uses_random_access ) {
            (*self).__begin = begin(__cur);
            (*self).__position = begin(__cur);
        }


        if ( __feat%foo__X4%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_init();

        if ( __feat%foo__X4%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        local strong_ref<stream> filtered = Null;

        if ( __feat%foo__X4%supports_filters ) 

            if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) {
                local value_ref<stream> filtered_data = filtered;
                (*self).__parse_foo_X4_stage2(filtered_data, (*filtered_data), __trim, __lah, __lahe);
                __cur = __cur.advance(|__cur|);

                if ( __trim ) 
                    (*__data).trim(begin(__cur));

                __result = (__cur, __lah, __lahe);
            }



        if ( ! filtered ) 
            __result = (*self).__parse_foo_X4_stage2(__data, __cur, __trim, __lah, __lahe);

    }
    catch {

        if ( __feat%foo__X4%uses_random_access ) 
            (*self).__position = begin(__cur);

        (*self).__on_0x25_error();

        if ( __feat%foo__X4%supports_filters ) 
            spicy_rt::filter_disconnect(self);


        if ( __feat%foo__X4%is_filter ) 
            spicy_rt::filter_forward_eod(self);


        if ( __feat%foo__X4%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_finally();

        if ( __feat%foo__X4%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        throw;
    }


    if ( __feat%foo__X4%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_finally();

    if ( __feat%foo__X4%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::X4::__parse_foo_X4_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    local int<64> __next_field = 0;

    if ( __feat%foo__X4%uses_random_access ) 
        (*self).__position = begin(__cur);


    if ( __feat%foo__X4%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_done();

    if ( __feat%foo__X4%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }



    if ( __feat%foo__X4%supports_filters ) 
        spicy_rt::filter_disconnect(self);


    if ( __feat%foo__X4%is_filter ) 
        spicy_rt::filter_forward_eod(self);

    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe);
    return __result;
}

method extern method view<stream> foo::X4::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local value_ref<X4> unit = value_ref(default<X4>())value_ref(default<X4>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_X4 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_X4 ->

    if ( __feat%foo__X4%uses_random_access ) 
        (*unit).__position = begin(ncur);

    return ncur;
}

method extern method view<stream> foo::X4::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local value_ref<X4> unit = value_ref(default<X4>())value_ref(default<X4>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(foo::X4));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_X4 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_X4 ->

    if ( __feat%foo__X4%uses_random_access ) 
        (*unit).__position = begin(ncur);

    return ncur;
}

method extern method view<stream> foo::X4::parse2(inout value_ref<X4> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_X4 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_X4 ->

    if ( __feat%foo__X4%uses_random_access ) 
        (*unit).__position = begin(ncur);

    return ncur;
}

init function void __register_foo_X4() {

    if ( __feat%foo__X4%is_filter || __feat%foo__X4%supports_sinks ) {
        foo::X4::__parser = [$name="foo::X4", $is_public=False, $parse1=foo::X4::parse1, $parse2=foo::X4::parse2, $parse3=foo::X4::parse3, $context_new=Null, $type_info=typeinfo(X4), $description="", $mime_types=vector(), $ports=vector()];
        spicy_rt::registerParser(foo::X4::__parser, hilti::linker_scope(), Null);
    }

}

method hook void foo::X5::__on_0x25_init() {
    spicy_rt::filter_connect((*self), new foo::X4());
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::X5::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    try {

        if ( __feat%foo__X5%uses_random_access ) 
            __trim = False;

        hilti::debugIndent("spicy");

        if ( __feat%foo__X5%uses_random_access ) {
            (*self).__begin = begin(__cur);
            (*self).__position = begin(__cur);
        }


        if ( __feat%foo__X5%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_init();

        if ( __feat%foo__X5%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        local strong_ref<stream> filtered = Null;

        if ( __feat%foo__X5%supports_filters ) 

            if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) {
                local value_ref<stream> filtered_data = filtered;
                (*self).__parse_foo_X5_stage2(filtered_data, (*filtered_data), __trim, __lah, __lahe);
                __cur = __cur.advance(|__cur|);

                if ( __trim ) 
                    (*__data).trim(begin(__cur));

                __result = (__cur, __lah, __lahe);
            }



        if ( ! filtered ) 
            __result = (*self).__parse_foo_X5_stage2(__data, __cur, __trim, __lah, __lahe);

    }
    catch {

        if ( __feat%foo__X5%uses_random_access ) 
            (*self).__position = begin(__cur);

        (*self).__on_0x25_error();

        if ( __feat%foo__X5%supports_filters ) 
            spicy_rt::filter_disconnect(self);


        if ( __feat%foo__X5%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_finally();

        if ( __feat%foo__X5%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        throw;
    }


    if ( __feat%foo__X5%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_finally();

    if ( __feat%foo__X5%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::X5::__parse_foo_X5_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    local int<64> __next_field = 0;

    if ( __feat%foo__X5%uses_random_access ) 
        (*self).__position = begin(__cur);


    if ( __feat%foo__X5%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_done();

    if ( __feat%foo__X5%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }



    if ( __feat%foo__X5%supports_filters ) 
        spicy_rt::filter_disconnect(self);

    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe);
    return __result;
}

method extern method view<stream> foo::X5::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local value_ref<X5> unit = value_ref(default<X5>())value_ref(default<X5>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_X5 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_X5 ->

    if ( __feat%foo__X5%uses_random_access ) 
        (*unit).__position = begin(ncur);

    return ncur;
}

method extern method view<stream> foo::X5::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local value_ref<X5> unit = value_ref(default<X5>())value_ref(default<X5>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(foo::X5));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_X5 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_X5 ->

    if ( __feat%foo__X5%uses_random_access ) 
        (*unit).__position = begin(ncur);

    return ncur;
}

method extern method view<stream> foo::X5::parse2(inout value_ref<X5> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_X5 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_X5 ->

    if ( __feat%foo__X5%uses_random_access ) 
        (*unit).__position = begin(ncur);

    return ncur;
}

init function void __register_foo_X5() {
    foo::X5::__parser = [$name="foo::X5", $is_public=True, $parse1=foo::X5::parse1, $parse2=foo::X5::parse2, $parse3=foo::X5::parse3, $context_new=Null, $type_info=typeinfo(X5), $description="", $mime_types=vector(), $ports=vector()];
    spicy_rt::registerParser(foo::X5::__parser, hilti::linker_scope(), Null);
}

method hook void foo::X6::__on_0x25_init() {
    (*(*self).data).write(b"", Null, Null);
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::X6::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    try {

        if ( __feat%foo__X6%uses_random_access ) 
            __trim = False;

        hilti::debugIndent("spicy");

        if ( __feat%foo__X6%uses_random_access ) {
            (*self).__begin = begin(__cur);
            (*self).__position = begin(__cur);
        }


        if ( __feat%foo__X6%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_init();

        if ( __feat%foo__X6%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        local strong_ref<stream> filtered = Null;

        if ( __feat%foo__X6%supports_filters ) 

            if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) {
                local value_ref<stream> filtered_data = filtered;
                (*self).__parse_foo_X6_stage2(filtered_data, (*filtered_data), __trim, __lah, __lahe);
                __cur = __cur.advance(|__cur|);

                if ( __trim ) 
                    (*__data).trim(begin(__cur));

                __result = (__cur, __lah, __lahe);
            }



        if ( ! filtered ) 
            __result = (*self).__parse_foo_X6_stage2(__data, __cur, __trim, __lah, __lahe);

    }
    catch {

        if ( __feat%foo__X6%uses_random_access ) 
            (*self).__position = begin(__cur);

        (*self).__on_0x25_error();

        if ( __feat%foo__X6%supports_filters ) 
            spicy_rt::filter_disconnect(self);

        (*(*self).data).close();

        if ( __feat%foo__X6%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_finally();

        if ( __feat%foo__X6%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        throw;
    }


    if ( __feat%foo__X6%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_finally();

    if ( __feat%foo__X6%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::X6::__parse_foo_X6_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    local int<64> __next_field = 0;

    if ( __feat%foo__X6%uses_random_access ) 
        (*self).__position = begin(__cur);


    if ( __feat%foo__X6%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_done();

    if ( __feat%foo__X6%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }



    if ( __feat%foo__X6%supports_filters ) 
        spicy_rt::filter_disconnect(self);

    (*(*self).data).close();
    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe);
    return __result;
}

method extern method view<stream> foo::X6::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local value_ref<X6> unit = value_ref(default<X6>())value_ref(default<X6>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_X6 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_X6 ->

    if ( __feat%foo__X6%uses_random_access ) 
        (*unit).__position = begin(ncur);

    return ncur;
}

method extern method view<stream> foo::X6::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local value_ref<X6> unit = value_ref(default<X6>())value_ref(default<X6>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(foo::X6));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_X6 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_X6 ->

    if ( __feat%foo__X6%uses_random_access ) 
        (*unit).__position = begin(ncur);

    return ncur;
}

method extern method view<stream> foo::X6::parse2(inout value_ref<X6> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_X6 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_X6 ->

    if ( __feat%foo__X6%uses_random_access ) 
        (*unit).__position = begin(ncur);

    return ncur;
}

init function void __register_foo_X6() {

    if ( __feat%foo__X6%is_filter || __feat%foo__X6%supports_sinks ) {
        foo::X6::__parser = [$name="foo::X6", $is_public=False, $parse1=foo::X6::parse1, $parse2=foo::X6::parse2, $parse3=foo::X6::parse3, $context_new=Null, $type_info=typeinfo(X6), $description="", $mime_types=vector(), $ports=vector()];
        spicy_rt::registerParser(foo::X6::__parser, hilti::linker_scope(), Null);
    }

}

}
