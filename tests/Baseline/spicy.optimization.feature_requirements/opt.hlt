### BTest baseline data generated by btest-diff. Do not edit. Use "btest -U/-u" to update. Requires BTest >= 0.63.
module foo {

import spicy_rt;
import hilti;

# Type X0 supports the following features:
#     - uses_offset
type X0 = struct {
    uint<64> __offset &internal &needed-by-feature="uses_offset";
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    hook void __on_0x25_init() ;
} &on-heap;
# Type X1 supports the following features:
#     - uses_random_access
type X1 = struct {
    iterator<stream> __begin &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    hook void __on_0x25_init() ;
} &on-heap;
# Type X4 supports the following features:
#     - is_filter
type X4 = struct {
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks" &needed-by-feature="is_filter";
    weak_ref<spicy_rt::Forward> __forward &internal &needed-by-feature="is_filter";
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse2(inout value_ref<X4> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo_X4_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;
# Type X5 supports the following features:
#     - supports_filters
public type X5 = struct {
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &always-emit;
    strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    hook void __on_0x25_init() ;
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse2(inout value_ref<X5> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo_X5_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;
# Type X6 supports the following features:
#     - supports_sinks
type X6 = struct {
    strong_ref<spicy_rt::Sink> data &default=new spicy_rt::Sink() &internal &needed-by-feature="supports_sinks";
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks";
    spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    hook void __on_0x25_init() ;
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse2(inout value_ref<X6> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo_X6_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;

const bool __feat%foo@@X0%uses_offset = True;
const bool __feat%foo@@X0%uses_random_access = False;
const bool __feat%foo@@X0%is_filter = False;
const bool __feat%foo@@X0%supports_filters = False;
const bool __feat%foo@@X0%supports_sinks = False;
const bool __feat%foo@@X0%synchronization = False;
const bool __feat%foo@@X1%uses_offset = False;
const bool __feat%foo@@X1%uses_random_access = True;
const bool __feat%foo@@X1%is_filter = False;
const bool __feat%foo@@X1%supports_filters = False;
const bool __feat%foo@@X1%supports_sinks = False;
const bool __feat%foo@@X1%synchronization = False;
const bool __feat%foo@@X2%uses_offset = False;
const bool __feat%foo@@X2%uses_random_access = False;
const bool __feat%foo@@X2%is_filter = False;
const bool __feat%foo@@X2%supports_filters = False;
const bool __feat%foo@@X2%supports_sinks = False;
const bool __feat%foo@@X2%synchronization = False;
const bool __feat%foo@@X3%uses_offset = False;
const bool __feat%foo@@X3%uses_random_access = False;
const bool __feat%foo@@X3%is_filter = False;
const bool __feat%foo@@X3%supports_filters = False;
const bool __feat%foo@@X3%supports_sinks = False;
const bool __feat%foo@@X3%synchronization = False;
const bool __feat%foo@@X4%uses_offset = False;
const bool __feat%foo@@X4%uses_random_access = False;
const bool __feat%foo@@X4%is_filter = True;
const bool __feat%foo@@X4%supports_filters = False;
const bool __feat%foo@@X4%supports_sinks = False;
const bool __feat%foo@@X4%synchronization = False;
const bool __feat%foo@@X5%uses_offset = False;
const bool __feat%foo@@X5%uses_random_access = False;
const bool __feat%foo@@X5%is_filter = False;
const bool __feat%foo@@X5%supports_filters = True;
const bool __feat%foo@@X5%supports_sinks = False;
const bool __feat%foo@@X5%synchronization = False;
const bool __feat%foo@@X6%uses_offset = False;
const bool __feat%foo@@X6%uses_random_access = False;
const bool __feat%foo@@X6%is_filter = False;
const bool __feat%foo@@X6%supports_filters = False;
const bool __feat%foo@@X6%supports_sinks = True;
const bool __feat%foo@@X6%synchronization = False;

method hook void foo::X0::__on_0x25_init() {
    self.__offset;
}

init function void __register_foo_X0() &pure {
}

method hook void foo::X1::__on_0x25_init() {
    self.__begin;
}

init function void __register_foo_X1() &pure {
}

init function void __register_foo_X2() &pure {
}

init function void __register_foo_X3() &pure {
}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::X4::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/feature_requirements.spicy:32:11-34:2"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;
    try {
        hilti::debugIndent("spicy");
        local iterator<stream> __begin = begin(__cur);
        (*self).__error = __error;
        __error = (*self).__error;
        local strong_ref<stream> filtered = Null;

        if ( ! filtered ) 
            __result = (*self).__parse_foo_X4_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error);

    }
    catch ( hilti::SystemException __except ) {
        
            spicy_rt::filter_forward_eod(self);

        (*self).__error = __error;
        __error = (*self).__error;
        throw;
    }

    (*self).__error = __error;
    __error = (*self).__error;
    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::X4::__parse_foo_X4_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/feature_requirements.spicy:32:11-34:2"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;
    (*self).__error = __error;
    __error = (*self).__error;
    
        spicy_rt::filter_forward_eod(self);

    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

method extern method view<stream> foo::X4::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/feature_requirements.spicy:32:11-34:2"
    local value_ref<X4> unit = value_ref(default<X4>())value_ref(default<X4>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/feature_requirements.spicy:32:11-34:2"

    # Begin parsing production: Unit: foo_X4 ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_X4 ->

    if ( error ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::X4::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/feature_requirements.spicy:32:11-34:2"
    local value_ref<X4> unit = value_ref(default<X4>())value_ref(default<X4>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(X4));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/feature_requirements.spicy:32:11-34:2"

    # Begin parsing production: Unit: foo_X4 ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_X4 ->

    if ( error ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::X4::parse2(inout value_ref<X4> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/feature_requirements.spicy:32:11-34:2"
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/feature_requirements.spicy:32:11-34:2"

    # Begin parsing production: Unit: foo_X4 ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_X4 ->

    if ( error ) 
        throw ;

    return ncur;
}

init function void __register_foo_X4() {
    {
        foo::X4::__parser = [$name="foo::X4", $is_public=False, $parse1=foo::X4::parse1, $parse2=foo::X4::parse2, $parse3=foo::X4::parse3, $context_new=Null, $type_info=typeinfo(X4), $description="", $mime_types=vector(), $ports=vector()];
        spicy_rt::registerParser(foo::X4::__parser, $scope, Null);
    }

}

method hook void foo::X5::__on_0x25_init() {
    spicy_rt::filter_connect(self, new X4());
}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::X5::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/feature_requirements.spicy:36:18-40:2"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;
    try {
        hilti::debugIndent("spicy");
        local iterator<stream> __begin = begin(__cur);
        (*self).__error = __error;
        (*self).__on_0x25_init();
        __error = (*self).__error;
        local strong_ref<stream> filtered = Null;
        

            if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) {
                local value_ref<stream> filtered_data = filtered;
                (*self).__parse_foo_X5_stage2(filtered_data, begin((*filtered_data)), (*filtered_data), __trim, __lah, __lahe, __error);
                __cur = __cur.advance(|__cur|);

                if ( __trim ) 
                    (*__data).trim(begin(__cur));

                __result = (__cur, __lah, __lahe, __error);
            }



        if ( ! filtered ) 
            __result = (*self).__parse_foo_X5_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error);

    }
    catch ( hilti::SystemException __except ) {
        
            spicy_rt::filter_disconnect(self);

        (*self).__error = __error;
        __error = (*self).__error;
        throw;
    }

    (*self).__error = __error;
    __error = (*self).__error;
    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::X5::__parse_foo_X5_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/feature_requirements.spicy:36:18-40:2"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;
    (*self).__error = __error;
    __error = (*self).__error;
    
        spicy_rt::filter_disconnect(self);

    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

method extern method view<stream> foo::X5::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/feature_requirements.spicy:36:18-40:2"
    local value_ref<X5> unit = value_ref(default<X5>())value_ref(default<X5>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/feature_requirements.spicy:36:18-40:2"

    # Begin parsing production: Unit: foo_X5 ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_X5 ->

    if ( error ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::X5::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/feature_requirements.spicy:36:18-40:2"
    local value_ref<X5> unit = value_ref(default<X5>())value_ref(default<X5>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(X5));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/feature_requirements.spicy:36:18-40:2"

    # Begin parsing production: Unit: foo_X5 ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_X5 ->

    if ( error ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::X5::parse2(inout value_ref<X5> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/feature_requirements.spicy:36:18-40:2"
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/feature_requirements.spicy:36:18-40:2"

    # Begin parsing production: Unit: foo_X5 ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_X5 ->

    if ( error ) 
        throw ;

    return ncur;
}

init function void __register_foo_X5() {
    foo::X5::__parser = [$name="foo::X5", $is_public=True, $parse1=foo::X5::parse1, $parse2=foo::X5::parse2, $parse3=foo::X5::parse3, $context_new=Null, $type_info=typeinfo(X5), $description="", $mime_types=vector(), $ports=vector()];
    spicy_rt::registerParser(foo::X5::__parser, $scope, Null);
}

method hook void foo::X6::__on_0x25_init() {
    (*(*self).data).write(b"", Null, Null);
}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::X6::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/feature_requirements.spicy:43:11-46:2"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;
    try {
        hilti::debugIndent("spicy");
        local iterator<stream> __begin = begin(__cur);
        (*self).__error = __error;
        (*self).__on_0x25_init();
        __error = (*self).__error;
        local strong_ref<stream> filtered = Null;

        if ( ! filtered ) 
            __result = (*self).__parse_foo_X6_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error);

    }
    catch ( hilti::SystemException __except ) {
        (*(*self).data).close();
        (*self).__error = __error;
        __error = (*self).__error;
        throw;
    }

    (*self).__error = __error;
    __error = (*self).__error;
    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> foo::X6::__parse_foo_X6_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/feature_requirements.spicy:43:11-46:2"
    local tuple<view<stream>, int<64>, iterator<stream>, optional<hilti::RecoverableFailure>> __result;
    (*self).__error = __error;
    __error = (*self).__error;
    (*(*self).data).close();
    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

method extern method view<stream> foo::X6::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/feature_requirements.spicy:43:11-46:2"
    local value_ref<X6> unit = value_ref(default<X6>())value_ref(default<X6>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/feature_requirements.spicy:43:11-46:2"

    # Begin parsing production: Unit: foo_X6 ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_X6 ->

    if ( error ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::X6::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/feature_requirements.spicy:43:11-46:2"
    local value_ref<X6> unit = value_ref(default<X6>())value_ref(default<X6>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(X6));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/feature_requirements.spicy:43:11-46:2"

    # Begin parsing production: Unit: foo_X6 ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_X6 ->

    if ( error ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::X6::parse2(inout value_ref<X6> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    # "<...>/feature_requirements.spicy:43:11-46:2"
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<hilti::RecoverableFailure> error = Null;
    # "<...>/feature_requirements.spicy:43:11-46:2"

    # Begin parsing production: Unit: foo_X6 ->
    (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error);
    # End parsing production: Unit: foo_X6 ->

    if ( error ) 
        throw ;

    return ncur;
}

init function void __register_foo_X6() {
    {
        foo::X6::__parser = [$name="foo::X6", $is_public=False, $parse1=foo::X6::parse1, $parse2=foo::X6::parse2, $parse3=foo::X6::parse3, $context_new=Null, $type_info=typeinfo(X6), $description="", $mime_types=vector(), $ports=vector()];
        spicy_rt::registerParser(foo::X6::__parser, $scope, Null);
    }

}

}
