### BTest baseline data generated by btest-diff. Do not edit. Use "btest -U/-u" to update. Requires BTest >= 0.63.
[debug/optimizer] [<no location>] declaration::Field "iterator<stream> __begin &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "iterator<stream> __begin &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "iterator<stream> __begin &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "iterator<stream> __begin &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "iterator<stream> __begin &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "iterator<stream> __begin &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "iterator<stream> __begin &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo__X0_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);" -> null
[debug/optimizer] [<no location>] declaration::Field "method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo__X1_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);" -> null
[debug/optimizer] [<no location>] declaration::Field "method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);" -> null
[debug/optimizer] [<no location>] declaration::Field "method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);" -> null
[debug/optimizer] [<no location>] declaration::Field "method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);" -> null
[debug/optimizer] [<no location>] declaration::Field "method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);" -> null
[debug/optimizer] [<no location>] declaration::Field "method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse2(inout value_ref<foo::X0> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse2(inout value_ref<foo::X1> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse2(inout value_ref<foo::X2> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse2(inout value_ref<foo::X3> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse2(inout value_ref<foo::X7> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks" &needed-by-feature="is_filter";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "uint<64> __offset &internal &needed-by-feature="uses_offset";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "uint<64> __offset &internal &needed-by-feature="uses_offset";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "uint<64> __offset &internal &needed-by-feature="uses_offset";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "uint<64> __offset &internal &needed-by-feature="uses_offset";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "uint<64> __offset &internal &needed-by-feature="uses_offset";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "uint<64> __offset &internal &needed-by-feature="uses_offset";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "uint<64> __offset &internal &needed-by-feature="uses_offset";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "weak_ref<const stream> __stream &internal &needed-by-feature="uses_stream";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "weak_ref<const stream> __stream &internal &needed-by-feature="uses_stream";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "weak_ref<const stream> __stream &internal &needed-by-feature="uses_stream";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "weak_ref<const stream> __stream &internal &needed-by-feature="uses_stream";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "weak_ref<const stream> __stream &internal &needed-by-feature="uses_stream";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "weak_ref<const stream> __stream &internal &needed-by-feature="uses_stream";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "weak_ref<const stream> __stream &internal &needed-by-feature="uses_stream";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "weak_ref<const stream> __stream &internal &needed-by-feature="uses_stream";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "weak_ref<spicy_rt::Forward> __forward &internal &needed-by-feature="is_filter";" -> null (removing unused member)
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || True" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "False || True" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "False || True" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "False || True" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "False || True" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "False || True" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "False || True" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "False || True" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "False || True" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "True || False" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "True || False" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "True || False" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "True || False" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "True || False" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "True || False" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "True || False" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "True || False" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "True || False" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_stream" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_stream" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_stream" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_stream" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%is_filter" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%is_filter" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%is_filter" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_stream" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%supports_filters" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%supports_filters" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%supports_filters" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_stream" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%supports_sinks" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%supports_sinks" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%supports_sinks" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_stream" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X7%uses_stream" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*(*self).data).close(); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*(*self).data).close(); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__stream = __data; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__stream = __data; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__stream = __data; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__stream = __data; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__stream = __data; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__stream = __data; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__stream = __data; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__stream = __data; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { __trim = False; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { __trim = False; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { __trim = False; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { __trim = False; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { __trim = False; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { __trim = False; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { __trim = False; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { foo::X0::__parser = [$name="foo::X0", $is_public=False, $parse1=foo::X0::parse1, $parse2=foo::X0::parse2, $parse3=foo::X0::parse3, $context_new=Null, $type_info=typeinfo(foo::X0), $description="", $mime_types=vector(), $ports=vector()]; spicy_rt::registerParser(foo::X0::__parser, $scope, Null); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { foo::X1::__parser = [$name="foo::X1", $is_public=False, $parse1=foo::X1::parse1, $parse2=foo::X1::parse2, $parse3=foo::X1::parse3, $context_new=Null, $type_info=typeinfo(foo::X1), $description="", $mime_types=vector(), $ports=vector()]; spicy_rt::registerParser(foo::X1::__parser, $scope, Null); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { foo::X2::__parser = [$name="foo::X2", $is_public=False, $parse1=foo::X2::parse1, $parse2=foo::X2::parse2, $parse3=foo::X2::parse3, $context_new=Null, $type_info=typeinfo(foo::X2), $description="", $mime_types=vector(), $ports=vector()]; spicy_rt::registerParser(foo::X2::__parser, $scope, Null); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { foo::X3::__parser = [$name="foo::X3", $is_public=False, $parse1=foo::X3::parse1, $parse2=foo::X3::parse2, $parse3=foo::X3::parse3, $context_new=Null, $type_info=typeinfo(foo::X3), $description="", $mime_types=vector(), $ports=vector()]; spicy_rt::registerParser(foo::X3::__parser, $scope, Null); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { foo::X7::__parser = [$name="foo::X7", $is_public=False, $parse1=foo::X7::parse1, $parse2=foo::X7::parse2, $parse3=foo::X7::parse3, $context_new=Null, $type_info=typeinfo(foo::X7), $description="", $mime_types=vector(), $ports=vector()]; spicy_rt::registerParser(foo::X7::__parser, $scope, Null); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo__X0_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo__X1_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo__X2_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo__X3_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo__X4_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo__X6_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo__X7_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_forward_eod(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_forward_eod(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { }" -> null
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*(*self).data).close(); }" -> statement::Block "{ (*(*self).data).close(); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*(*self).data).close(); }" -> statement::Block "{ (*(*self).data).close(); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*__unit).__begin = begin(__ncur); }" -> statement::Block "{ (*__unit).__begin = begin(__ncur); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*__unit).__begin = begin(__ncur); }" -> statement::Block "{ (*__unit).__begin = begin(__ncur); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*__unit).__begin = begin(__ncur); }" -> statement::Block "{ (*__unit).__begin = begin(__ncur); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> statement::Block "{ (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> statement::Block "{ (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> statement::Block "{ (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__begin = __begin; }" -> statement::Block "{ (*self).__begin = __begin; }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__begin = __begin; }" -> statement::Block "{ (*self).__begin = __begin; }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__begin = __begin; }" -> statement::Block "{ (*self).__begin = __begin; }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> statement::Block "{ (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> statement::Block "{ (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> statement::Block "{ (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__position_update = Null; }" -> statement::Block "{ (*self).__position_update = Null; }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__position_update = Null; }" -> statement::Block "{ (*self).__position_update = Null; }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__position_update = Null; }" -> statement::Block "{ (*self).__position_update = Null; }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__position_update = Null; }" -> statement::Block "{ (*self).__position_update = Null; }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__position_update = Null; }" -> statement::Block "{ (*self).__position_update = Null; }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__position_update = Null; }" -> statement::Block "{ (*self).__position_update = Null; }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__position_update = Null; }" -> statement::Block "{ (*self).__position_update = Null; }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__position_update = Null; }" -> statement::Block "{ (*self).__position_update = Null; }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { __trim = False; }" -> statement::Block "{ __trim = False; }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { foo::X4::__parser = [$name="foo::X4", $is_public=False, $parse1=foo::X4::parse1, $parse2=foo::X4::parse2, $parse3=foo::X4::parse3, $context_new=Null, $type_info=typeinfo(foo::X4), $description="", $mime_types=vector(), $ports=vector()]; spicy_rt::registerParser(foo::X4::__parser, $scope, Null); }" -> statement::Block "{ foo::X4::__parser = [$name="foo::X4", $is_public=False, $parse1=foo::X4::parse1, $parse2=foo::X4::parse2, $parse3=foo::X4::parse3, $context_new=Null, $type_info=typeinfo(foo::X4), $description="", $mime_types=vector(), $ports=vector()]; spicy_rt::registerParser(foo::X4::__parser, $scope, Null); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { foo::X6::__parser = [$name="foo::X6", $is_public=False, $parse1=foo::X6::parse1, $parse2=foo::X6::parse2, $parse3=foo::X6::parse3, $context_new=Null, $type_info=typeinfo(foo::X6), $description="", $mime_types=vector(), $ports=vector()]; spicy_rt::registerParser(foo::X6::__parser, $scope, Null); }" -> statement::Block "{ foo::X6::__parser = [$name="foo::X6", $is_public=False, $parse1=foo::X6::parse1, $parse2=foo::X6::parse2, $parse3=foo::X6::parse3, $context_new=Null, $type_info=typeinfo(foo::X6), $description="", $mime_types=vector(), $ports=vector()]; spicy_rt::registerParser(foo::X6::__parser, $scope, Null); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> statement::Block "{ if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> statement::Block "{ if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> statement::Block "{ if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> statement::Block "{ if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> statement::Block "{ if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> statement::Block "{ if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> statement::Block "{ if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> statement::Block "{ if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo__X5_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> statement::Block "{ local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo__X5_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { spicy_rt::filter_disconnect(self); }" -> statement::Block "{ spicy_rt::filter_disconnect(self); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { spicy_rt::filter_disconnect(self); }" -> statement::Block "{ spicy_rt::filter_disconnect(self); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { spicy_rt::filter_forward_eod(self); }" -> statement::Block "{ spicy_rt::filter_forward_eod(self); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { spicy_rt::filter_forward_eod(self); }" -> statement::Block "{ spicy_rt::filter_forward_eod(self); }"
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X0%supports_filters = False;" -> disabled feature 'supports_filters' of type 'foo::X0' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X0%supports_sinks = False;" -> disabled feature 'supports_sinks' of type 'foo::X0' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X0%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::X0' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X0%uses_random_access = False;" -> disabled feature 'uses_random_access' of type 'foo::X0' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X0%uses_stream = False;" -> disabled feature 'uses_stream' of type 'foo::X0' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X0%uses_sync_advance = False;" -> disabled feature 'uses_sync_advance' of type 'foo::X0' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X1%supports_filters = False;" -> disabled feature 'supports_filters' of type 'foo::X1' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X1%supports_sinks = False;" -> disabled feature 'supports_sinks' of type 'foo::X1' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X1%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::X1' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X1%uses_offset = False;" -> disabled feature 'uses_offset' of type 'foo::X1' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X1%uses_stream = False;" -> disabled feature 'uses_stream' of type 'foo::X1' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X1%uses_sync_advance = False;" -> disabled feature 'uses_sync_advance' of type 'foo::X1' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X2%supports_filters = False;" -> disabled feature 'supports_filters' of type 'foo::X2' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X2%supports_sinks = False;" -> disabled feature 'supports_sinks' of type 'foo::X2' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X2%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::X2' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X2%uses_offset = False;" -> disabled feature 'uses_offset' of type 'foo::X2' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X2%uses_random_access = False;" -> disabled feature 'uses_random_access' of type 'foo::X2' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X2%uses_stream = False;" -> disabled feature 'uses_stream' of type 'foo::X2' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X2%uses_sync_advance = False;" -> disabled feature 'uses_sync_advance' of type 'foo::X2' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X3%is_filter = False;" -> disabled feature 'is_filter' of type 'foo::X3' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X3%supports_filters = False;" -> disabled feature 'supports_filters' of type 'foo::X3' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X3%supports_sinks = False;" -> disabled feature 'supports_sinks' of type 'foo::X3' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X3%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::X3' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X3%uses_offset = False;" -> disabled feature 'uses_offset' of type 'foo::X3' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X3%uses_random_access = False;" -> disabled feature 'uses_random_access' of type 'foo::X3' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X3%uses_stream = False;" -> disabled feature 'uses_stream' of type 'foo::X3' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X3%uses_sync_advance = False;" -> disabled feature 'uses_sync_advance' of type 'foo::X3' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X4%supports_filters = False;" -> disabled feature 'supports_filters' of type 'foo::X4' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X4%supports_sinks = False;" -> disabled feature 'supports_sinks' of type 'foo::X4' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X4%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::X4' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X4%uses_offset = False;" -> disabled feature 'uses_offset' of type 'foo::X4' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X4%uses_random_access = False;" -> disabled feature 'uses_random_access' of type 'foo::X4' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X4%uses_stream = False;" -> disabled feature 'uses_stream' of type 'foo::X4' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X4%uses_sync_advance = False;" -> disabled feature 'uses_sync_advance' of type 'foo::X4' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X5%supports_sinks = False;" -> disabled feature 'supports_sinks' of type 'foo::X5' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X5%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::X5' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X5%uses_offset = False;" -> disabled feature 'uses_offset' of type 'foo::X5' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X5%uses_random_access = False;" -> disabled feature 'uses_random_access' of type 'foo::X5' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X5%uses_stream = False;" -> disabled feature 'uses_stream' of type 'foo::X5' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X5%uses_sync_advance = False;" -> disabled feature 'uses_sync_advance' of type 'foo::X5' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X6%supports_filters = False;" -> disabled feature 'supports_filters' of type 'foo::X6' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X6%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::X6' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X6%uses_offset = False;" -> disabled feature 'uses_offset' of type 'foo::X6' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X6%uses_random_access = False;" -> disabled feature 'uses_random_access' of type 'foo::X6' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X6%uses_stream = False;" -> disabled feature 'uses_stream' of type 'foo::X6' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X6%uses_sync_advance = False;" -> disabled feature 'uses_sync_advance' of type 'foo::X6' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X7%supports_filters = False;" -> disabled feature 'supports_filters' of type 'foo::X7' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X7%supports_sinks = False;" -> disabled feature 'supports_sinks' of type 'foo::X7' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X7%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::X7' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X7%uses_offset = False;" -> disabled feature 'uses_offset' of type 'foo::X7' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X7%uses_random_access = False;" -> disabled feature 'uses_random_access' of type 'foo::X7' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X7%uses_stream = False;" -> disabled feature 'uses_stream' of type 'foo::X7' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-51:2] declaration::Constant "const bool __feat%foo@@X7%uses_sync_advance = False;" -> disabled feature 'uses_sync_advance' of type 'foo::X7' since it is not used
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Field "hook optional<string> __str__();" -> null
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Field "hook void __on_0x25_sync_advance(uint<64> offset) &needed-by-feature="uses_sync_advance";" -> null
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Function "method extern method view<stream> foo::X0::parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:13:11-15:1" local value_ref<foo::X0> __unit = value_ref(default<const foo::X0>()); local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/feature_requirements.spicy:13:11-15:1" # Begin parsing production: Unit: foo__X0 -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo__X0 -> (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); if ( __error ) throw ; return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Function "method extern method view<stream> foo::X0::parse2(inout value_ref<foo::X0> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:13:11-15:1" local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/feature_requirements.spicy:13:11-15:1" # Begin parsing production: Unit: foo__X0 -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo__X0 -> (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); if ( __error ) throw ; return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Function "method extern method view<stream> foo::X0::parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:13:11-15:1" local value_ref<foo::X0> __unit = value_ref(default<const foo::X0>()); spicy_rt::initializeParsedUnit((*__gunit), __unit, typeinfo(foo::X0)); local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/feature_requirements.spicy:13:11-15:1" # Begin parsing production: Unit: foo__X0 -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo__X0 -> (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); if ( __error ) throw ; return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Function "method method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::X0::__parse_foo__X0_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/feature_requirements.spicy:13:11-15:1" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result; (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); (*self).__error = __error; (*self).__position_update = Null; default<void>(); if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } __error = (*self).__error; hilti::debugDedent("spicy"); __result = (__cur, __lah, __lahe, __error); return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Function "method method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::X0::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/feature_requirements.spicy:13:11-15:1" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result; try { hilti::debugIndent("spicy"); local iterator<stream> __begin = begin(__cur); (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); (*self).__error = __error; (*self).__position_update = Null; (*self).__on_0x25_init(); if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } __error = (*self).__error; local strong_ref<stream> filtered = Null; if ( ! filtered ) __result = (*self).__parse_foo__X0_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); } catch ( hilti::SystemException __except ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); default<void>(); (*self).__error = __error; (*self).__position_update = Null; default<void>(); if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } __error = (*self).__error; throw; } (*self).__error = __error; (*self).__position_update = Null; default<void>(); if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } __error = (*self).__error; return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Field "hook optional<string> __str__();" -> null
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Field "hook void __on_0x25_sync_advance(uint<64> offset) &needed-by-feature="uses_sync_advance";" -> null
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Function "method extern method view<stream> foo::X1::parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:18:11-20:1" local value_ref<foo::X1> __unit = value_ref(default<const foo::X1>()); local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/feature_requirements.spicy:18:11-20:1" # Begin parsing production: Unit: foo__X1 -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo__X1 -> (*__unit).__begin = begin(__ncur); if ( __error ) throw ; return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Function "method extern method view<stream> foo::X1::parse2(inout value_ref<foo::X1> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:18:11-20:1" local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/feature_requirements.spicy:18:11-20:1" # Begin parsing production: Unit: foo__X1 -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo__X1 -> (*__unit).__begin = begin(__ncur); if ( __error ) throw ; return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Function "method extern method view<stream> foo::X1::parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:18:11-20:1" local value_ref<foo::X1> __unit = value_ref(default<const foo::X1>()); spicy_rt::initializeParsedUnit((*__gunit), __unit, typeinfo(foo::X1)); local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/feature_requirements.spicy:18:11-20:1" # Begin parsing production: Unit: foo__X1 -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo__X1 -> (*__unit).__begin = begin(__ncur); if ( __error ) throw ; return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Function "method method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::X1::__parse_foo__X1_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/feature_requirements.spicy:18:11-20:1" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result; (*self).__begin = __begin; (*self).__error = __error; (*self).__position_update = Null; default<void>(); if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } __error = (*self).__error; hilti::debugDedent("spicy"); __result = (__cur, __lah, __lahe, __error); return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Function "method method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::X1::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/feature_requirements.spicy:18:11-20:1" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result; try { __trim = False; hilti::debugIndent("spicy"); local iterator<stream> __begin = begin(__cur); (*self).__begin = __begin; (*self).__error = __error; (*self).__position_update = Null; (*self).__on_0x25_init(); if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } __error = (*self).__error; local strong_ref<stream> filtered = Null; if ( ! filtered ) __result = (*self).__parse_foo__X1_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); } catch ( hilti::SystemException __except ) { (*self).__begin = __begin; default<void>(); (*self).__error = __error; (*self).__position_update = Null; default<void>(); if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } __error = (*self).__error; throw; } (*self).__error = __error; (*self).__position_update = Null; default<void>(); if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } __error = (*self).__error; return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:23:1-23:18] declaration::Type "type X2 = struct { optional<hilti::RecoverableFailure> __error &always-emit &internal; method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo__X2_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error); };" -> null (removing unused type)
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook optional<string> __str__();" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook void __on_0x25_init();" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook void __on_0x25_sync_advance(uint<64> offset) &needed-by-feature="uses_sync_advance";" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Function "method extern method view<stream> foo::X2::parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:23:11-23:17" local value_ref<foo::X2> __unit = value_ref(default<const foo::X2>()); local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/feature_requirements.spicy:23:11-23:17" # Begin parsing production: Unit: foo__X2 -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo__X2 -> if ( __error ) throw ; return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Function "method extern method view<stream> foo::X2::parse2(inout value_ref<foo::X2> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:23:11-23:17" local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/feature_requirements.spicy:23:11-23:17" # Begin parsing production: Unit: foo__X2 -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo__X2 -> if ( __error ) throw ; return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Function "method extern method view<stream> foo::X2::parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:23:11-23:17" local value_ref<foo::X2> __unit = value_ref(default<const foo::X2>()); spicy_rt::initializeParsedUnit((*__gunit), __unit, typeinfo(foo::X2)); local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/feature_requirements.spicy:23:11-23:17" # Begin parsing production: Unit: foo__X2 -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo__X2 -> if ( __error ) throw ; return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Function "method method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::X2::__parse_foo__X2_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/feature_requirements.spicy:23:11-23:17" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result; (*self).__error = __error; default<void>(); __error = (*self).__error; hilti::debugDedent("spicy"); __result = (__cur, __lah, __lahe, __error); return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Function "method method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::X2::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/feature_requirements.spicy:23:11-23:17" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result; try { hilti::debugIndent("spicy"); local iterator<stream> __begin = begin(__cur); (*self).__error = __error; default<void>(); __error = (*self).__error; local strong_ref<stream> filtered = Null; if ( ! filtered ) __result = (*self).__parse_foo__X2_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); } catch ( hilti::SystemException __except ) { default<void>(); (*self).__error = __error; default<void>(); __error = (*self).__error; throw; } (*self).__error = __error; default<void>(); __error = (*self).__error; return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] operator_::struct_::MemberCall "(*self).__on_0x25_init()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:26:1-28:2] declaration::Type "type X3 = struct { optional<hilti::RecoverableFailure> __error &always-emit &internal; method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo__X3_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error); };" -> null (removing unused type)
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook optional<string> __str__();" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook void __on_0x25_init();" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook void __on_0x25_sync_advance(uint<64> offset) &needed-by-feature="uses_sync_advance";" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Function "method extern method view<stream> foo::X3::parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:26:11-28:1" local value_ref<foo::X3> __unit = value_ref(default<const foo::X3>()); local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/feature_requirements.spicy:26:11-28:1" # Begin parsing production: Unit: foo__X3 -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo__X3 -> if ( __error ) throw ; return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Function "method extern method view<stream> foo::X3::parse2(inout value_ref<foo::X3> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:26:11-28:1" local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/feature_requirements.spicy:26:11-28:1" # Begin parsing production: Unit: foo__X3 -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo__X3 -> if ( __error ) throw ; return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Function "method extern method view<stream> foo::X3::parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:26:11-28:1" local value_ref<foo::X3> __unit = value_ref(default<const foo::X3>()); spicy_rt::initializeParsedUnit((*__gunit), __unit, typeinfo(foo::X3)); local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/feature_requirements.spicy:26:11-28:1" # Begin parsing production: Unit: foo__X3 -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo__X3 -> if ( __error ) throw ; return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Function "method method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::X3::__parse_foo__X3_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/feature_requirements.spicy:26:11-28:1" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result; (*self).__error = __error; default<void>(); __error = (*self).__error; hilti::debugDedent("spicy"); __result = (__cur, __lah, __lahe, __error); return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Function "method method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::X3::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/feature_requirements.spicy:26:11-28:1" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result; try { hilti::debugIndent("spicy"); local iterator<stream> __begin = begin(__cur); (*self).__error = __error; default<void>(); __error = (*self).__error; local strong_ref<stream> filtered = Null; if ( ! filtered ) __result = (*self).__parse_foo__X3_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); } catch ( hilti::SystemException __except ) { default<void>(); (*self).__error = __error; default<void>(); __error = (*self).__error; throw; } (*self).__error = __error; default<void>(); __error = (*self).__error; return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] operator_::struct_::MemberCall "(*self).__on_0x25_init()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook optional<string> __str__();" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook void __on_0x25_init();" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook void __on_0x25_sync_advance(uint<64> offset) &needed-by-feature="uses_sync_advance";" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context);" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "method view<stream> parse2(inout value_ref<foo::X4> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context);" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context);" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] operator_::struct_::MemberCall "(*self).__on_0x25_init()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook optional<string> __str__();" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_sync_advance(uint<64> offset) &needed-by-feature="uses_sync_advance";" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context);" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "method view<stream> parse2(inout value_ref<foo::X5> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context);" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context);" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "hook optional<string> __str__();" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "hook void __on_0x25_sync_advance(uint<64> offset) &needed-by-feature="uses_sync_advance";" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context);" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "method view<stream> parse2(inout value_ref<foo::X6> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context);" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context);" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:49:1-51:2] declaration::Type "type X7 = struct { optional<hilti::RecoverableFailure> __error &always-emit &internal; method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo__X7_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error); };" -> null (removing unused type)
[debug/optimizer] [feature_requirements.spicy:49:11-51:1] declaration::Field "hook optional<string> __str__();" -> null
[debug/optimizer] [feature_requirements.spicy:49:11-51:1] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:49:11-51:1] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [feature_requirements.spicy:49:11-51:1] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [feature_requirements.spicy:49:11-51:1] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [feature_requirements.spicy:49:11-51:1] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [feature_requirements.spicy:49:11-51:1] declaration::Field "hook void __on_0x25_init();" -> null
[debug/optimizer] [feature_requirements.spicy:49:11-51:1] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [feature_requirements.spicy:49:11-51:1] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:49:11-51:1] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [feature_requirements.spicy:49:11-51:1] declaration::Field "hook void __on_0x25_sync_advance(uint<64> offset) &needed-by-feature="uses_sync_advance";" -> null
[debug/optimizer] [feature_requirements.spicy:49:11-51:1] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:49:11-51:1] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [feature_requirements.spicy:49:11-51:1] declaration::Function "method extern method view<stream> foo::X7::parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:49:11-51:1" local value_ref<foo::X7> __unit = value_ref(default<const foo::X7>()); local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/feature_requirements.spicy:49:11-51:1" # Begin parsing production: Unit: foo__X7 -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo__X7 -> if ( __error ) throw ; return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:49:11-51:1] declaration::Function "method extern method view<stream> foo::X7::parse2(inout value_ref<foo::X7> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:49:11-51:1" local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/feature_requirements.spicy:49:11-51:1" # Begin parsing production: Unit: foo__X7 -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo__X7 -> if ( __error ) throw ; return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:49:11-51:1] declaration::Function "method extern method view<stream> foo::X7::parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:49:11-51:1" local value_ref<foo::X7> __unit = value_ref(default<const foo::X7>()); spicy_rt::initializeParsedUnit((*__gunit), __unit, typeinfo(foo::X7)); local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/feature_requirements.spicy:49:11-51:1" # Begin parsing production: Unit: foo__X7 -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo__X7 -> if ( __error ) throw ; return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:49:11-51:1] declaration::Function "method method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::X7::__parse_foo__X7_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/feature_requirements.spicy:49:11-51:1" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result; (*self).__error = __error; default<void>(); __error = (*self).__error; hilti::debugDedent("spicy"); __result = (__cur, __lah, __lahe, __error); return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:49:11-51:1] declaration::Function "method method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::X7::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/feature_requirements.spicy:49:11-51:1" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result; try { hilti::debugIndent("spicy"); local iterator<stream> __begin = begin(__cur); (*self).__error = __error; default<void>(); __error = (*self).__error; local strong_ref<stream> filtered = Null; if ( ! filtered ) __result = (*self).__parse_foo__X7_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); } catch ( hilti::SystemException __except ) { default<void>(); (*self).__error = __error; default<void>(); __error = (*self).__error; throw; } (*self).__error = __error; default<void>(); __error = (*self).__error; return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:49:11-51:1] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:49:11-51:1] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:49:11-51:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:49:11-51:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:49:11-51:1] operator_::struct_::MemberCall "(*self).__on_0x25_init()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:50:5-50:14] declaration::Field "strong_ref<spicy_rt::Sink> data &default=new spicy_rt::Sink() &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [spicy_rt.hlt:28:5-28:76] declaration::Field "method void connect_mime_type(string mime_type, string scope) &internal;" -> null (removing unused member)
[debug/optimizer] [spicy_rt.hlt:29:5-29:75] declaration::Field "method void connect_mime_type(bytes mime_type, string scope) &internal;" -> null (removing unused member)
[debug/optimizer] removing field for unused method foo::X0::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::X0::__on_0x25_done
[debug/optimizer] removing field for unused method foo::X0::__on_0x25_error
[debug/optimizer] removing field for unused method foo::X0::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::X0::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::X0::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::X0::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::X0::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::X0::__on_0x25_sync_advance
[debug/optimizer] removing field for unused method foo::X0::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::X0::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::X0::__parse_foo__X0_stage2
[debug/optimizer] removing field for unused method foo::X0::__parse_stage1
[debug/optimizer] removing field for unused method foo::X0::__str__
[debug/optimizer] removing field for unused method foo::X0::parse1
[debug/optimizer] removing field for unused method foo::X0::parse2
[debug/optimizer] removing field for unused method foo::X0::parse3
[debug/optimizer] removing field for unused method foo::X1::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::X1::__on_0x25_done
[debug/optimizer] removing field for unused method foo::X1::__on_0x25_error
[debug/optimizer] removing field for unused method foo::X1::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::X1::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::X1::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::X1::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::X1::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::X1::__on_0x25_sync_advance
[debug/optimizer] removing field for unused method foo::X1::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::X1::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::X1::__parse_foo__X1_stage2
[debug/optimizer] removing field for unused method foo::X1::__parse_stage1
[debug/optimizer] removing field for unused method foo::X1::__str__
[debug/optimizer] removing field for unused method foo::X1::parse1
[debug/optimizer] removing field for unused method foo::X1::parse2
[debug/optimizer] removing field for unused method foo::X1::parse3
[debug/optimizer] removing field for unused method foo::X2::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::X2::__on_0x25_done
[debug/optimizer] removing field for unused method foo::X2::__on_0x25_error
[debug/optimizer] removing field for unused method foo::X2::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::X2::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::X2::__on_0x25_init
[debug/optimizer] removing field for unused method foo::X2::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::X2::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::X2::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::X2::__on_0x25_sync_advance
[debug/optimizer] removing field for unused method foo::X2::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::X2::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::X2::__parse_stage1
[debug/optimizer] removing field for unused method foo::X2::__str__
[debug/optimizer] removing field for unused method foo::X2::parse1
[debug/optimizer] removing field for unused method foo::X2::parse2
[debug/optimizer] removing field for unused method foo::X2::parse3
[debug/optimizer] removing field for unused method foo::X3::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::X3::__on_0x25_done
[debug/optimizer] removing field for unused method foo::X3::__on_0x25_error
[debug/optimizer] removing field for unused method foo::X3::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::X3::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::X3::__on_0x25_init
[debug/optimizer] removing field for unused method foo::X3::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::X3::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::X3::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::X3::__on_0x25_sync_advance
[debug/optimizer] removing field for unused method foo::X3::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::X3::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::X3::__parse_stage1
[debug/optimizer] removing field for unused method foo::X3::__str__
[debug/optimizer] removing field for unused method foo::X3::parse1
[debug/optimizer] removing field for unused method foo::X3::parse2
[debug/optimizer] removing field for unused method foo::X3::parse3
[debug/optimizer] removing field for unused method foo::X4::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::X4::__on_0x25_done
[debug/optimizer] removing field for unused method foo::X4::__on_0x25_error
[debug/optimizer] removing field for unused method foo::X4::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::X4::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::X4::__on_0x25_init
[debug/optimizer] removing field for unused method foo::X4::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::X4::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::X4::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::X4::__on_0x25_sync_advance
[debug/optimizer] removing field for unused method foo::X4::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::X4::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::X4::__str__
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_done
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_error
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_sync_advance
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::X5::__str__
[debug/optimizer] removing field for unused method foo::X6::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::X6::__on_0x25_done
[debug/optimizer] removing field for unused method foo::X6::__on_0x25_error
[debug/optimizer] removing field for unused method foo::X6::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::X6::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::X6::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::X6::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::X6::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::X6::__on_0x25_sync_advance
[debug/optimizer] removing field for unused method foo::X6::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::X6::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::X6::__str__
[debug/optimizer] removing field for unused method foo::X7::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::X7::__on_0x25_done
[debug/optimizer] removing field for unused method foo::X7::__on_0x25_error
[debug/optimizer] removing field for unused method foo::X7::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::X7::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::X7::__on_0x25_init
[debug/optimizer] removing field for unused method foo::X7::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::X7::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::X7::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::X7::__on_0x25_sync_advance
[debug/optimizer] removing field for unused method foo::X7::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::X7::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::X7::__parse_stage1
[debug/optimizer] removing field for unused method foo::X7::__str__
[debug/optimizer] removing field for unused method foo::X7::parse1
[debug/optimizer] removing field for unused method foo::X7::parse2
[debug/optimizer] removing field for unused method foo::X7::parse3
[debug/optimizer] removing field for unused method struct_6::parse1
[debug/optimizer] removing field for unused method struct_6::parse2
[debug/optimizer] removing field for unused method struct_6::parse3
[debug/optimizer] removing field for unused method struct_7::parse1
[debug/optimizer] removing field for unused method struct_7::parse2
[debug/optimizer] removing field for unused method struct_7::parse3
[debug/optimizer] removing field for unused method struct_8::parse1
[debug/optimizer] removing field for unused method struct_8::parse2
[debug/optimizer] removing field for unused method struct_8::parse3
