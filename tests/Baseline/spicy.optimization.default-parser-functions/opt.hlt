### BTest baseline data generated by btest-diff. Do not edit. Use "btest -U/-u" to update. Requires BTest >= 0.63.
module foo {

import spicy_rt;
import hilti;

public type P1 = struct {
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &always-emit;
    optional<spicy_rt::ParseError> __trial_mode &always-emit &internal;
    hook void __on_0x25_confirmed() &always-emit;
    hook void __on_0x25_rejected() &always-emit;
    hook void __on_0x25_synced() &always-emit;
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, inout optional<spicy_rt::ParseError> __trial_mode);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse2(inout value_ref<P1> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_foo_P1_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, inout optional<spicy_rt::ParseError> __trial_mode);
} &on-heap;
# Type P2 supports the following features:
#     - supports_filters
public type P2 = struct {
    uint<8> x &optional;
    uint<8> y &optional;
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &always-emit;
    strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";
    optional<spicy_rt::ParseError> __trial_mode &always-emit &internal;
    hook void __on_y(uint<8> __dd);
    hook void __on_0x25_error() ;
    hook void __on_0x25_confirmed() &always-emit;
    hook void __on_0x25_rejected() &always-emit;
    hook void __on_0x25_synced() &always-emit;
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, inout optional<spicy_rt::ParseError> __trial_mode);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse2(inout value_ref<P2> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_foo_P2_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, inout optional<spicy_rt::ParseError> __trial_mode);
} &on-heap;

const bool __feat%foo__P0%uses_random_access = False;
const bool __feat%foo__P0%is_filter = False;
const bool __feat%foo__P0%supports_filters = False;
const bool __feat%foo__P0%supports_sinks = False;
const bool __feat%foo__P1%uses_random_access = False;
const bool __feat%foo__P1%is_filter = False;
const bool __feat%foo__P1%supports_filters = False;
const bool __feat%foo__P1%supports_sinks = False;
const bool __feat%foo__P2%uses_random_access = False;
const bool __feat%foo__P2%is_filter = False;
const bool __feat%foo__P2%supports_filters = True;
const bool __feat%foo__P2%supports_sinks = False;

init function void __register_foo_P0() {
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::P1::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, inout optional<spicy_rt::ParseError> __trial_mode) {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    try {
        hilti::debugIndent("spicy");
        (*self).__trial_mode = __trial_mode;
        default<void>();
        local strong_ref<stream> filtered = Null;

        if ( ! filtered ) 
            __result = (*self).__parse_foo_P1_stage2(__data, __cur, __trim, __lah, __lahe, __trial_mode);

    }
    catch {
        default<void>();
        __trial_mode = (*self).__trial_mode;
        default<void>();
        throw;
    }

    default<void>();
    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::P1::__parse_foo_P1_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, inout optional<spicy_rt::ParseError> __trial_mode) {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    default<void>();
    __trial_mode = (*self).__trial_mode;
    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe);
    return __result;
}

method extern method view<stream> foo::P1::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local value_ref<P1> unit = value_ref(default<P1>())value_ref(default<P1>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<spicy_rt::ParseError> trial_mode = Null;

    # Begin parsing production: Unit: foo_P1 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end, trial_mode);
    # End parsing production: Unit: foo_P1 ->

    if ( trial_mode ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::P1::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local value_ref<P1> unit = value_ref(default<P1>())value_ref(default<P1>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(foo::P1));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<spicy_rt::ParseError> trial_mode = Null;

    # Begin parsing production: Unit: foo_P1 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end, trial_mode);
    # End parsing production: Unit: foo_P1 ->

    if ( trial_mode ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::P1::parse2(inout value_ref<P1> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<spicy_rt::ParseError> trial_mode = Null;

    # Begin parsing production: Unit: foo_P1 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end, trial_mode);
    # End parsing production: Unit: foo_P1 ->

    if ( trial_mode ) 
        throw ;

    return ncur;
}

init function void __register_foo_P1() {
    foo::P1::__parser = [$name="foo::P1", $is_public=True, $parse1=foo::P1::parse1, $parse2=foo::P1::parse2, $parse3=foo::P1::parse3, $context_new=Null, $type_info=typeinfo(P1), $description="", $mime_types=vector(), $ports=vector()];
    spicy_rt::registerParser(foo::P1::__parser, hilti::linker_scope(), Null);
}

method hook void foo::P2::__on_y(uint<8> __dd) {
}

method hook void foo::P2::__on_0x25_error() {
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::P2::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, inout optional<spicy_rt::ParseError> __trial_mode) {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    try {
        hilti::debugIndent("spicy");
        (*self).__trial_mode = __trial_mode;
        default<void>();
        local strong_ref<stream> filtered = Null;
        

            if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) {
                local value_ref<stream> filtered_data = filtered;
                (*self).__parse_foo_P2_stage2(filtered_data, (*filtered_data), __trim, __lah, __lahe, __trial_mode);
                __cur = __cur.advance(|__cur|);

                if ( __trim ) 
                    (*__data).trim(begin(__cur));

                __result = (__cur, __lah, __lahe);
            }



        if ( ! filtered ) 
            __result = (*self).__parse_foo_P2_stage2(__data, __cur, __trim, __lah, __lahe, __trial_mode);

    }
    catch {
        (*self).__on_0x25_error();
        
            spicy_rt::filter_disconnect(self);

        __trial_mode = (*self).__trial_mode;
        default<void>();
        throw;
    }

    default<void>();
    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::P2::__parse_foo_P2_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, inout optional<spicy_rt::ParseError> __trial_mode) {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;

    # Begin parsing production: Variable: x   -> uint<8>
    spicy_rt::waitForInput(__data, __cur, 1, "expecting 1 bytes for unpacking value", "<...>/default-parser-functions.spicy:17:8", (*self).__filters);
    ((*self).x, __cur) = (*unpack<uint<8>>((__cur, hilti::ByteOrder::Network)));

    if ( __trim ) 
        (*__data).trim(begin(__cur));

    # End parsing production: Variable: x   -> uint<8>

    default<void>();

    # Begin parsing production: Variable: y   -> uint<8>
    spicy_rt::waitForInput(__data, __cur, 1, "expecting 1 bytes for unpacking value", "<...>/default-parser-functions.spicy:18:8", (*self).__filters);
    ((*self).y, __cur) = (*unpack<uint<8>>((__cur, hilti::ByteOrder::Network)));

    if ( __trim ) 
        (*__data).trim(begin(__cur));

    # End parsing production: Variable: y   -> uint<8>

    (*self).__on_y((*self).y);
    default<void>();
    
        spicy_rt::filter_disconnect(self);

    __trial_mode = (*self).__trial_mode;
    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe);
    return __result;
}

method extern method view<stream> foo::P2::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local value_ref<P2> unit = value_ref(default<P2>())value_ref(default<P2>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<spicy_rt::ParseError> trial_mode = Null;

    # Begin parsing production: Unit: foo_P2 -> x y
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end, trial_mode);
    # End parsing production: Unit: foo_P2 -> x y

    if ( trial_mode ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::P2::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local value_ref<P2> unit = value_ref(default<P2>())value_ref(default<P2>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(foo::P2));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<spicy_rt::ParseError> trial_mode = Null;

    # Begin parsing production: Unit: foo_P2 -> x y
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end, trial_mode);
    # End parsing production: Unit: foo_P2 -> x y

    if ( trial_mode ) 
        throw ;

    return ncur;
}

method extern method view<stream> foo::P2::parse2(inout value_ref<P2> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;
    local optional<spicy_rt::ParseError> trial_mode = Null;

    # Begin parsing production: Unit: foo_P2 -> x y
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end, trial_mode);
    # End parsing production: Unit: foo_P2 -> x y

    if ( trial_mode ) 
        throw ;

    return ncur;
}

init function void __register_foo_P2() {
    foo::P2::__parser = [$name="foo::P2", $is_public=True, $parse1=foo::P2::parse1, $parse2=foo::P2::parse2, $parse3=foo::P2::parse3, $context_new=Null, $type_info=typeinfo(P2), $description="", $mime_types=vector(), $ports=vector()];
    spicy_rt::registerParser(foo::P2::__parser, hilti::linker_scope(), Null);
}

}
