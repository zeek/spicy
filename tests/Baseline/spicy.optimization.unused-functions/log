### BTest baseline data generated by btest-diff. Do not edit. Use "btest -U/-u" to update. Requires BTest >= 0.63.
[debug/optimizer] [<no location>] declaration::Field "iterator<stream> __begin &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "iterator<stream> __begin &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "iterator<stream> __begin &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "iterator<stream> __begin &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "iterator<stream> __begin &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);" -> null
[debug/optimizer] [<no location>] declaration::Field "method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse2(inout value_ref<foo::A> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse2(inout value_ref<foo::C> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse2(inout value_ref<foo::F> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks" &needed-by-feature="is_filter";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "uint<64> __offset &internal &needed-by-feature="uses_offset";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "uint<64> __offset &internal &needed-by-feature="uses_offset";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "uint<64> __offset &internal &needed-by-feature="uses_offset";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "uint<64> __offset &internal &needed-by-feature="uses_offset";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "uint<64> __offset &internal &needed-by-feature="uses_offset";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "weak_ref<const stream> __stream &internal &needed-by-feature="uses_stream";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "weak_ref<const stream> __stream &internal &needed-by-feature="uses_stream";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "weak_ref<const stream> __stream &internal &needed-by-feature="uses_stream";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "weak_ref<const stream> __stream &internal &needed-by-feature="uses_stream";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "weak_ref<const stream> __stream &internal &needed-by-feature="uses_stream";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "weak_ref<spicy_rt::Forward> __forward &internal &needed-by-feature="is_filter";" -> null (removing unused member)
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_stream" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_stream" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_stream" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_stream" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_stream" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] statement::Expression "(*self).__error = __error;" -> removing unneeded error push/pop statements
[debug/optimizer] [<no location>] statement::Expression "(*self).__error = __error;" -> removing unneeded error push/pop statements
[debug/optimizer] [<no location>] statement::Expression "(*self).__error = __error;" -> removing unneeded error push/pop statements
[debug/optimizer] [<no location>] statement::Expression "(*self).__error = __error;" -> removing unneeded error push/pop statements
[debug/optimizer] [<no location>] statement::Expression "(*self).__error = __error;" -> removing unneeded error push/pop statements
[debug/optimizer] [<no location>] statement::Expression "(*self).__error = __error;" -> removing unneeded error push/pop statements
[debug/optimizer] [<no location>] statement::Expression "(*self).__error = __error;" -> removing unneeded error push/pop statements
[debug/optimizer] [<no location>] statement::Expression "(*self).__error = __error;" -> removing unneeded error push/pop statements
[debug/optimizer] [<no location>] statement::Expression "(*self).__error = __error;" -> removing unneeded error push/pop statements
[debug/optimizer] [<no location>] statement::Expression "(*self).__error = __error;" -> removing unneeded error push/pop statements
[debug/optimizer] [<no location>] statement::Expression "(*self).__error = __error;" -> removing unneeded error push/pop statements
[debug/optimizer] [<no location>] statement::Expression "(*self).__error = __error;" -> removing unneeded error push/pop statements
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__stream = __data; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__stream = __data; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__stream = __data; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__stream = __data; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__stream = __data; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { __trim = False; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { __trim = False; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { __trim = False; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { __trim = False; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { __trim = False; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { foo::A::__parser = [$name="foo::A", $is_public=False, $parse1=foo::A::parse1, $parse2=foo::A::parse2, $parse3=foo::A::parse3, $context_new=Null, $type_=foo::A, $description="", $mime_types=vector(), $ports=vector()]; spicy_rt::registerParser(foo::A::__parser, $scope, Null); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { foo::C::__parser = [$name="foo::C", $is_public=False, $parse1=foo::C::parse1, $parse2=foo::C::parse2, $parse3=foo::C::parse3, $context_new=Null, $type_=foo::C, $description="", $mime_types=vector(), $ports=vector()]; spicy_rt::registerParser(foo::C::__parser, $scope, Null); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { foo::F::__parser = [$name="foo::F", $is_public=False, $parse1=foo::F::parse1, $parse2=foo::F::parse2, $parse3=foo::F::parse3, $context_new=Null, $type_=foo::F, $description="", $mime_types=vector(), $ports=vector()]; spicy_rt::registerParser(foo::F::__parser, $scope, Null); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo__A_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo__B_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo__C_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo__D_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo__F_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_forward_eod(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_forward_eod(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { }" -> null
[debug/optimizer] [<no location>] statement::Try "try { hilti::debugIndent("spicy"); local iterator<stream> __begin = begin(__cur); local strong_ref<stream> filtered = Null; if ( ! filtered ) __result = (*self).__parse_foo__B_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); } catch ( hilti::SystemException __except ) { throw; }" -> replacing rethrowing try/catch with just the block
[debug/optimizer] [<no location>] statement::Try "try { hilti::debugIndent("spicy"); local iterator<stream> __begin = begin(__cur); local strong_ref<stream> filtered = Null; if ( ! filtered ) __result = (*self).__parse_foo__B_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); } catch ( hilti::SystemException __except ) { throw; }" -> statement::Block "{ hilti::debugIndent("spicy"); local iterator<stream> __begin = begin(__cur); local strong_ref<stream> filtered = Null; if ( ! filtered ) __result = (*self).__parse_foo__B_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); }"
[debug/optimizer] [<no location>] statement::Try "try { hilti::debugIndent("spicy"); local iterator<stream> __begin = begin(__cur); local strong_ref<stream> filtered = Null; if ( ! filtered ) __result = (*self).__parse_foo__C_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); } catch ( hilti::SystemException __except ) { throw; }" -> replacing rethrowing try/catch with just the block
[debug/optimizer] [<no location>] statement::Try "try { hilti::debugIndent("spicy"); local iterator<stream> __begin = begin(__cur); local strong_ref<stream> filtered = Null; if ( ! filtered ) __result = (*self).__parse_foo__C_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); } catch ( hilti::SystemException __except ) { throw; }" -> statement::Block "{ hilti::debugIndent("spicy"); local iterator<stream> __begin = begin(__cur); local strong_ref<stream> filtered = Null; if ( ! filtered ) __result = (*self).__parse_foo__C_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); }"
[debug/optimizer] [<no location>] statement::Try "try { hilti::debugIndent("spicy"); local iterator<stream> __begin = begin(__cur); local strong_ref<stream> filtered = Null; if ( ! filtered ) __result = (*self).__parse_foo__D_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); } catch ( hilti::SystemException __except ) { throw; }" -> replacing rethrowing try/catch with just the block
[debug/optimizer] [<no location>] statement::Try "try { hilti::debugIndent("spicy"); local iterator<stream> __begin = begin(__cur); local strong_ref<stream> filtered = Null; if ( ! filtered ) __result = (*self).__parse_foo__D_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); } catch ( hilti::SystemException __except ) { throw; }" -> statement::Block "{ hilti::debugIndent("spicy"); local iterator<stream> __begin = begin(__cur); local strong_ref<stream> filtered = Null; if ( ! filtered ) __result = (*self).__parse_foo__D_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); }"
[debug/optimizer] [spicy_rt.hlt:27:5-27:78] declaration::Field "method void connect_mime_type(string mime_type, uint<64> scope) &internal;" -> null (removing unused member)
[debug/optimizer] [spicy_rt.hlt:28:5-28:77] declaration::Field "method void connect_mime_type(bytes mime_type, uint<64> scope) &internal;" -> null (removing unused member)
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@A%supports_filters = False;" -> disabled feature 'supports_filters' of type 'foo::A' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@A%supports_sinks = False;" -> disabled feature 'supports_sinks' of type 'foo::A' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@A%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::A' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@A%uses_offset = False;" -> disabled feature 'uses_offset' of type 'foo::A' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@A%uses_random_access = False;" -> disabled feature 'uses_random_access' of type 'foo::A' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@A%uses_stream = False;" -> disabled feature 'uses_stream' of type 'foo::A' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@A%uses_sync_advance = False;" -> disabled feature 'uses_sync_advance' of type 'foo::A' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@B%supports_filters = False;" -> disabled feature 'supports_filters' of type 'foo::B' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@B%supports_sinks = False;" -> disabled feature 'supports_sinks' of type 'foo::B' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@B%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::B' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@B%uses_offset = False;" -> disabled feature 'uses_offset' of type 'foo::B' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@B%uses_random_access = False;" -> disabled feature 'uses_random_access' of type 'foo::B' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@B%uses_stream = False;" -> disabled feature 'uses_stream' of type 'foo::B' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@B%uses_sync_advance = False;" -> disabled feature 'uses_sync_advance' of type 'foo::B' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@C%supports_filters = False;" -> disabled feature 'supports_filters' of type 'foo::C' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@C%supports_sinks = False;" -> disabled feature 'supports_sinks' of type 'foo::C' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@C%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::C' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@C%uses_offset = False;" -> disabled feature 'uses_offset' of type 'foo::C' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@C%uses_random_access = False;" -> disabled feature 'uses_random_access' of type 'foo::C' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@C%uses_stream = False;" -> disabled feature 'uses_stream' of type 'foo::C' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@C%uses_sync_advance = False;" -> disabled feature 'uses_sync_advance' of type 'foo::C' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@D%supports_filters = False;" -> disabled feature 'supports_filters' of type 'foo::D' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@D%supports_sinks = False;" -> disabled feature 'supports_sinks' of type 'foo::D' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@D%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::D' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@D%uses_offset = False;" -> disabled feature 'uses_offset' of type 'foo::D' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@D%uses_random_access = False;" -> disabled feature 'uses_random_access' of type 'foo::D' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@D%uses_stream = False;" -> disabled feature 'uses_stream' of type 'foo::D' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@D%uses_sync_advance = False;" -> disabled feature 'uses_sync_advance' of type 'foo::D' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@F%is_filter = False;" -> disabled feature 'is_filter' of type 'foo::F' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@F%supports_filters = False;" -> disabled feature 'supports_filters' of type 'foo::F' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@F%supports_sinks = False;" -> disabled feature 'supports_sinks' of type 'foo::F' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@F%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::F' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@F%uses_offset = False;" -> disabled feature 'uses_offset' of type 'foo::F' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@F%uses_random_access = False;" -> disabled feature 'uses_random_access' of type 'foo::F' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@F%uses_stream = False;" -> disabled feature 'uses_stream' of type 'foo::F' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@F%uses_sync_advance = False;" -> disabled feature 'uses_sync_advance' of type 'foo::F' since it is not used
[debug/optimizer] [unused-functions.spicy:13:1-13:16] declaration::Function "function void f1() { }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:18:1-18:17] declaration::Type "type A = struct { optional<hilti::RecoverableFailure> __error &always-emit &internal; method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo__A_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error); } &on-heap;" -> null (removing unused type)
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook optional<string> __hook_to_string();" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook void __on_0x25_init();" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook void __on_0x25_sync_advance(uint<64> offset) &needed-by-feature="uses_sync_advance";" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Function "method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::A::__parse_foo__A_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/unused-functions.spicy:18:10-18:16" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result(); (*self).__error = __error; default<void>(); __error = (*self).__error; hilti::debugDedent("spicy"); __result = (__cur, __lah, __lahe, __error); return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Function "method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::A::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/unused-functions.spicy:18:10-18:16" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result(); try { hilti::debugIndent("spicy"); local iterator<stream> __begin = begin(__cur); (*self).__error = __error; default<void>(); __error = (*self).__error; local strong_ref<stream> filtered = Null; if ( ! filtered ) __result = (*self).__parse_foo__A_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); } catch ( hilti::SystemException __except ) { default<void>(); (*self).__error = __error; default<void>(); __error = (*self).__error; throw; } (*self).__error = __error; default<void>(); __error = (*self).__error; return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Function "method view<stream> foo::A::parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/unused-functions.spicy:18:10-18:16" local value_ref<foo::A> __unit = default<foo::A>(); local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/unused-functions.spicy:18:10-18:16" # Begin parsing production: Unit: foo__A -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo__A -> if ( __error ) throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error))); return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Function "method view<stream> foo::A::parse2(inout value_ref<foo::A> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/unused-functions.spicy:18:10-18:16" local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/unused-functions.spicy:18:10-18:16" # Begin parsing production: Unit: foo__A -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo__A -> if ( __error ) throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error))); return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Function "method view<stream> foo::A::parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/unused-functions.spicy:18:10-18:16" local value_ref<foo::A> __unit = default<foo::A>(); spicy_rt::initializeParsedUnit((*__gunit), __unit); local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/unused-functions.spicy:18:10-18:16" # Begin parsing production: Unit: foo__A -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo__A -> if ( __error ) throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error))); return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:18:10-18:16] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:18:10-18:16] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:18:10-18:16] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:18:10-18:16] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:18:10-18:16] operator_::struct_::MemberCall "(*self).__on_0x25_init()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook optional<string> __hook_to_string();" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook void __on_0x25_init();" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook void __on_0x25_sync_advance(uint<64> offset) &needed-by-feature="uses_sync_advance";" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context);" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "method view<stream> parse2(inout value_ref<foo::B> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context);" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context);" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:21:17-21:23] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:21:17-21:23] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:21:17-21:23] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:21:17-21:23] operator_::struct_::MemberCall "(*self).__on_0x25_init()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:21:17-21:23] statement::Expression "default<void>();" -> removing default<void> statement
[debug/optimizer] [unused-functions.spicy:21:17-21:23] statement::Expression "default<void>();" -> removing default<void> statement
[debug/optimizer] [unused-functions.spicy:21:17-21:23] statement::Expression "default<void>();" -> removing default<void> statement
[debug/optimizer] [unused-functions.spicy:21:17-21:23] statement::Expression "default<void>();" -> removing default<void> statement
[debug/optimizer] [unused-functions.spicy:21:17-21:23] statement::Expression "default<void>();" -> removing default<void> statement
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook optional<string> __hook_to_string();" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook void __on_0x25_init();" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook void __on_0x25_sync_advance(uint<64> offset) &needed-by-feature="uses_sync_advance";" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Function "method view<stream> foo::C::parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/unused-functions.spicy:24:10-24:16" local value_ref<foo::C> __unit = default<foo::C>(); local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/unused-functions.spicy:24:10-24:16" # Begin parsing production: Unit: foo__C -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo__C -> if ( __error ) throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error))); return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Function "method view<stream> foo::C::parse2(inout value_ref<foo::C> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/unused-functions.spicy:24:10-24:16" local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/unused-functions.spicy:24:10-24:16" # Begin parsing production: Unit: foo__C -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo__C -> if ( __error ) throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error))); return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Function "method view<stream> foo::C::parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/unused-functions.spicy:24:10-24:16" local value_ref<foo::C> __unit = default<foo::C>(); spicy_rt::initializeParsedUnit((*__gunit), __unit); local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/unused-functions.spicy:24:10-24:16" # Begin parsing production: Unit: foo__C -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo__C -> if ( __error ) throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error))); return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:24:10-24:16] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:24:10-24:16] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:24:10-24:16] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:24:10-24:16] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:24:10-24:16] operator_::struct_::MemberCall "(*self).__on_0x25_init()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:24:10-24:16] statement::Expression "default<void>();" -> removing default<void> statement
[debug/optimizer] [unused-functions.spicy:24:10-24:16] statement::Expression "default<void>();" -> removing default<void> statement
[debug/optimizer] [unused-functions.spicy:24:10-24:16] statement::Expression "default<void>();" -> removing default<void> statement
[debug/optimizer] [unused-functions.spicy:24:10-24:16] statement::Expression "default<void>();" -> removing default<void> statement
[debug/optimizer] [unused-functions.spicy:24:10-24:16] statement::Expression "default<void>();" -> removing default<void> statement
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook optional<string> __hook_to_string();" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook void __on_0x25_init();" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook void __on_0x25_sync_advance(uint<64> offset) &needed-by-feature="uses_sync_advance";" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context);" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "method view<stream> parse2(inout value_ref<foo::D> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context);" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context);" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:25:17-27:1] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:25:17-27:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:25:17-27:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:25:17-27:1] operator_::struct_::MemberCall "(*self).__on_0x25_init()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:25:17-27:1] statement::Expression "default<void>();" -> removing default<void> statement
[debug/optimizer] [unused-functions.spicy:25:17-27:1] statement::Expression "default<void>();" -> removing default<void> statement
[debug/optimizer] [unused-functions.spicy:25:17-27:1] statement::Expression "default<void>();" -> removing default<void> statement
[debug/optimizer] [unused-functions.spicy:25:17-27:1] statement::Expression "default<void>();" -> removing default<void> statement
[debug/optimizer] [unused-functions.spicy:25:17-27:1] statement::Expression "default<void>();" -> removing default<void> statement
[debug/optimizer] [unused-functions.spicy:30:1-32:2] declaration::Type "type F = struct { optional<hilti::RecoverableFailure> __error &always-emit &internal; method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo__F_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error); } &on-heap;" -> null (removing unused type)
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook optional<string> __hook_to_string();" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook void __on_0x25_init();" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook void __on_0x25_sync_advance(uint<64> offset) &needed-by-feature="uses_sync_advance";" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Function "method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::F::__parse_foo__F_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/unused-functions.spicy:30:10-32:1" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result(); (*self).__error = __error; default<void>(); __error = (*self).__error; hilti::debugDedent("spicy"); __result = (__cur, __lah, __lahe, __error); return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Function "method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::F::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/unused-functions.spicy:30:10-32:1" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result(); try { hilti::debugIndent("spicy"); local iterator<stream> __begin = begin(__cur); (*self).__error = __error; default<void>(); __error = (*self).__error; local strong_ref<stream> filtered = Null; if ( ! filtered ) __result = (*self).__parse_foo__F_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); } catch ( hilti::SystemException __except ) { default<void>(); (*self).__error = __error; default<void>(); __error = (*self).__error; throw; } (*self).__error = __error; default<void>(); __error = (*self).__error; return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Function "method view<stream> foo::F::parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/unused-functions.spicy:30:10-32:1" local value_ref<foo::F> __unit = default<foo::F>(); local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/unused-functions.spicy:30:10-32:1" # Begin parsing production: Unit: foo__F -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo__F -> if ( __error ) throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error))); return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Function "method view<stream> foo::F::parse2(inout value_ref<foo::F> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/unused-functions.spicy:30:10-32:1" local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/unused-functions.spicy:30:10-32:1" # Begin parsing production: Unit: foo__F -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo__F -> if ( __error ) throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error))); return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Function "method view<stream> foo::F::parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/unused-functions.spicy:30:10-32:1" local value_ref<foo::F> __unit = default<foo::F>(); spicy_rt::initializeParsedUnit((*__gunit), __unit); local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/unused-functions.spicy:30:10-32:1" # Begin parsing production: Unit: foo__F -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo__F -> if ( __error ) throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error))); return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:30:10-32:1] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:30:10-32:1] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:30:10-32:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:30:10-32:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:30:10-32:1] operator_::struct_::MemberCall "(*self).__on_0x25_init()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] removing field for unused method foo::A::__hook_to_string
[debug/optimizer] removing field for unused method foo::A::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::A::__on_0x25_done
[debug/optimizer] removing field for unused method foo::A::__on_0x25_error
[debug/optimizer] removing field for unused method foo::A::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::A::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::A::__on_0x25_init
[debug/optimizer] removing field for unused method foo::A::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::A::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::A::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::A::__on_0x25_sync_advance
[debug/optimizer] removing field for unused method foo::A::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::A::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::A::__parse_stage1
[debug/optimizer] removing field for unused method foo::A::parse1
[debug/optimizer] removing field for unused method foo::A::parse2
[debug/optimizer] removing field for unused method foo::A::parse3
[debug/optimizer] removing field for unused method foo::B::__hook_to_string
[debug/optimizer] removing field for unused method foo::B::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::B::__on_0x25_done
[debug/optimizer] removing field for unused method foo::B::__on_0x25_error
[debug/optimizer] removing field for unused method foo::B::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::B::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::B::__on_0x25_init
[debug/optimizer] removing field for unused method foo::B::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::B::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::B::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::B::__on_0x25_sync_advance
[debug/optimizer] removing field for unused method foo::B::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::B::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::C::__hook_to_string
[debug/optimizer] removing field for unused method foo::C::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::C::__on_0x25_done
[debug/optimizer] removing field for unused method foo::C::__on_0x25_error
[debug/optimizer] removing field for unused method foo::C::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::C::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::C::__on_0x25_init
[debug/optimizer] removing field for unused method foo::C::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::C::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::C::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::C::__on_0x25_sync_advance
[debug/optimizer] removing field for unused method foo::C::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::C::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::C::parse1
[debug/optimizer] removing field for unused method foo::C::parse2
[debug/optimizer] removing field for unused method foo::C::parse3
[debug/optimizer] removing field for unused method foo::D::__hook_to_string
[debug/optimizer] removing field for unused method foo::D::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::D::__on_0x25_done
[debug/optimizer] removing field for unused method foo::D::__on_0x25_error
[debug/optimizer] removing field for unused method foo::D::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::D::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::D::__on_0x25_init
[debug/optimizer] removing field for unused method foo::D::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::D::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::D::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::D::__on_0x25_sync_advance
[debug/optimizer] removing field for unused method foo::D::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::D::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::F::__hook_to_string
[debug/optimizer] removing field for unused method foo::F::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::F::__on_0x25_done
[debug/optimizer] removing field for unused method foo::F::__on_0x25_error
[debug/optimizer] removing field for unused method foo::F::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::F::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::F::__on_0x25_init
[debug/optimizer] removing field for unused method foo::F::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::F::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::F::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::F::__on_0x25_sync_advance
[debug/optimizer] removing field for unused method foo::F::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::F::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::F::__parse_stage1
[debug/optimizer] removing field for unused method foo::F::parse1
[debug/optimizer] removing field for unused method foo::F::parse2
[debug/optimizer] removing field for unused method foo::F::parse3
[debug/optimizer] removing field for unused method struct_3::parse1
[debug/optimizer] removing field for unused method struct_3::parse2
[debug/optimizer] removing field for unused method struct_3::parse3
[debug/optimizer] removing field for unused method struct_5::parse1
[debug/optimizer] removing field for unused method struct_5::parse2
[debug/optimizer] removing field for unused method struct_5::parse3
