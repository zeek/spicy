### BTest baseline data generated by btest-diff. Do not edit. Use "btest -U/-u" to update. Requires BTest >= 0.63.
module foo {

import spicy_rt;
import hilti;

public type B = struct {
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &always-emit;
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse2(inout value_ref<B> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_foo_B_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
} &on-heap;
type C = struct {
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_foo_C_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
} &on-heap;
public type D = struct {
    value_ref<C> anon &optional &no-emit;
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &always-emit;
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse2(inout value_ref<D> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_foo_D_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
} &on-heap;

const bool __feat%foo__A%uses_random_access = False;
const bool __feat%foo__A%is_filter = False;
const bool __feat%foo__A%supports_filters = False;
const bool __feat%foo__A%supports_sinks = False;
const bool __feat%foo__B%uses_random_access = False;
const bool __feat%foo__B%is_filter = False;
const bool __feat%foo__B%supports_filters = False;
const bool __feat%foo__B%supports_sinks = False;
const bool __feat%foo__C%uses_random_access = False;
const bool __feat%foo__C%is_filter = False;
const bool __feat%foo__C%supports_filters = False;
const bool __feat%foo__C%supports_sinks = False;
const bool __feat%foo__D%uses_random_access = False;
const bool __feat%foo__D%is_filter = False;
const bool __feat%foo__D%supports_filters = False;
const bool __feat%foo__D%supports_sinks = False;
const bool __feat%foo__F%uses_random_access = False;
const bool __feat%foo__F%is_filter = False;
const bool __feat%foo__F%supports_filters = False;
const bool __feat%foo__F%supports_sinks = False;

init function void __register_foo_A() {
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::B::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    try {
        hilti::debugIndent("spicy");
        default<void>();
        local strong_ref<stream> filtered = Null;

        if ( ! filtered ) 
            __result = (*self).__parse_foo_B_stage2(__data, __cur, __trim, __lah, __lahe);

    }
    catch {
        default<void>();
        default<void>();
        throw;
    }

    default<void>();
    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::B::__parse_foo_B_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    local int<64> __next_field = 0;
    default<void>();
    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe);
    return __result;
}

method extern method view<stream> foo::B::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local value_ref<B> unit = value_ref(default<B>())value_ref(default<B>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_B ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_B ->

    return ncur;
}

method extern method view<stream> foo::B::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local value_ref<B> unit = value_ref(default<B>())value_ref(default<B>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(foo::B));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_B ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_B ->

    return ncur;
}

method extern method view<stream> foo::B::parse2(inout value_ref<B> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_B ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_B ->

    return ncur;
}

init function void __register_foo_B() {
    foo::B::__parser = [$name="foo::B", $is_public=True, $parse1=foo::B::parse1, $parse2=foo::B::parse2, $parse3=foo::B::parse3, $context_new=Null, $type_info=typeinfo(B), $description="", $mime_types=vector(), $ports=vector()];
    spicy_rt::registerParser(foo::B::__parser, hilti::linker_scope(), Null);
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::C::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    try {
        hilti::debugIndent("spicy");
        default<void>();
        local strong_ref<stream> filtered = Null;

        if ( ! filtered ) 
            __result = (*self).__parse_foo_C_stage2(__data, __cur, __trim, __lah, __lahe);

    }
    catch {
        default<void>();
        default<void>();
        throw;
    }

    default<void>();
    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::C::__parse_foo_C_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    local int<64> __next_field = 0;
    default<void>();
    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe);
    return __result;
}

init function void __register_foo_C() {
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::D::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    try {
        hilti::debugIndent("spicy");
        default<void>();
        local strong_ref<stream> filtered = Null;

        if ( ! filtered ) 
            __result = (*self).__parse_foo_D_stage2(__data, __cur, __trim, __lah, __lahe);

    }
    catch {
        default<void>();
        default<void>();
        throw;
    }

    default<void>();
    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::D::__parse_foo_D_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    local int<64> __next_field = 0;

    if ( 0 == __next_field ) {
        local value_ref<C> __transient_anon;

        # Begin parsing production: Unit: foo_C_2 ->
        __transient_anon = default<C>();
        (__cur, __lah, __lahe) = (*__transient_anon).__parse_stage1(__data, __cur, __trim, __lah, __lahe);
        # End parsing production: Unit: foo_C_2 ->

        ++__next_field;
    }

    default<void>();
    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe);
    return __result;
}

method extern method view<stream> foo::D::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local value_ref<D> unit = value_ref(default<D>())value_ref(default<D>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_D -> foo_C_2
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_D -> foo_C_2

    return ncur;
}

method extern method view<stream> foo::D::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local value_ref<D> unit = value_ref(default<D>())value_ref(default<D>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(foo::D));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_D -> foo_C_2
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_D -> foo_C_2

    return ncur;
}

method extern method view<stream> foo::D::parse2(inout value_ref<D> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static {
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_D -> foo_C_2
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_D -> foo_C_2

    return ncur;
}

init function void __register_foo_D() {
    foo::D::__parser = [$name="foo::D", $is_public=True, $parse1=foo::D::parse1, $parse2=foo::D::parse2, $parse3=foo::D::parse3, $context_new=Null, $type_info=typeinfo(D), $description="", $mime_types=vector(), $ports=vector()];
    spicy_rt::registerParser(foo::D::__parser, hilti::linker_scope(), Null);
}

init function void __register_foo_F() {
}

}
