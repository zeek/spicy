### BTest baseline data generated by btest-diff. Do not edit. Use "btest -U/-u" to update. Requires BTest >= 0.63.
module foo {

import hilti;
import spicy_rt;

public type B = struct {
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &always-emit;
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method view<stream> parse2(inout value_ref<B> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo__B_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;
type C = struct {
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(copy view<stream> __cur, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo__C_stage2(copy view<stream> __cur, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;
public type D = struct {
    value_ref<C> _anon &optional &anonymous &no-emit;
    spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &always-emit;
    optional<hilti::RecoverableFailure> __error &always-emit &internal;
    method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
    method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method view<stream> parse2(inout value_ref<D> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public;
    method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo__D_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);
} &on-heap;

const bool __feat%foo@@A%uses_offset = False;
const bool __feat%foo@@A%uses_random_access = False;
const bool __feat%foo@@A%uses_stream = False;
const bool __feat%foo@@A%uses_sync_advance = False;
const bool __feat%foo@@A%is_filter = False;
const bool __feat%foo@@A%supports_filters = False;
const bool __feat%foo@@A%supports_sinks = False;
const bool __feat%foo@@A%synchronization = False;
const bool __feat%foo@@B%uses_offset = False;
const bool __feat%foo@@B%uses_random_access = False;
const bool __feat%foo@@B%uses_stream = False;
const bool __feat%foo@@B%uses_sync_advance = False;
const bool __feat%foo@@B%is_filter = False;
const bool __feat%foo@@B%supports_filters = False;
const bool __feat%foo@@B%supports_sinks = False;
const bool __feat%foo@@B%synchronization = False;
const bool __feat%foo@@C%uses_offset = False;
const bool __feat%foo@@C%uses_random_access = False;
const bool __feat%foo@@C%uses_stream = False;
const bool __feat%foo@@C%uses_sync_advance = False;
const bool __feat%foo@@C%is_filter = False;
const bool __feat%foo@@C%supports_filters = False;
const bool __feat%foo@@C%supports_sinks = False;
const bool __feat%foo@@C%synchronization = False;
const bool __feat%foo@@D%uses_offset = False;
const bool __feat%foo@@D%uses_random_access = False;
const bool __feat%foo@@D%uses_stream = False;
const bool __feat%foo@@D%uses_sync_advance = False;
const bool __feat%foo@@D%is_filter = False;
const bool __feat%foo@@D%supports_filters = False;
const bool __feat%foo@@D%supports_sinks = False;
const bool __feat%foo@@D%synchronization = False;
const bool __feat%foo@@F%uses_offset = False;
const bool __feat%foo@@F%uses_random_access = False;
const bool __feat%foo@@F%uses_stream = False;
const bool __feat%foo@@F%uses_sync_advance = False;
const bool __feat%foo@@F%is_filter = False;
const bool __feat%foo@@F%supports_filters = False;
const bool __feat%foo@@F%supports_sinks = False;
const bool __feat%foo@@F%synchronization = False;

public function void f2() {
}

init function void __register_foo_A() {
}

method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::B::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-functions.spicy:21:17-21:23"
    local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();
    {
        hilti::debugIndent("spicy");
        local iterator<stream> __begin = begin(__cur);
        local strong_ref<stream> filtered = Null;

        if ( ! filtered ) 
            __result = (*self).__parse_foo__B_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error);

    }

    return __result;
}

method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::B::__parse_foo__B_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-functions.spicy:21:17-21:23"
    local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();
    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

method view<stream> foo::B::parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-functions.spicy:21:17-21:23"
    local value_ref<B> __unit = default<B>();
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-functions.spicy:21:17-21:23"

    # Begin parsing production: Unit: foo__B ->
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__B ->

    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

method view<stream> foo::B::parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-functions.spicy:21:17-21:23"
    local value_ref<B> __unit = default<B>();
    spicy_rt::initializeParsedUnit((*__gunit), __unit);
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-functions.spicy:21:17-21:23"

    # Begin parsing production: Unit: foo__B ->
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__B ->

    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

method view<stream> foo::B::parse2(inout value_ref<B> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-functions.spicy:21:17-21:23"
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-functions.spicy:21:17-21:23"

    # Begin parsing production: Unit: foo__B ->
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__B ->

    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

init function void __register_foo_B() {
    foo::B::__parser = [$name="foo::B", $is_public=True, $parse1=foo::B::parse1, $parse2=foo::B::parse2, $parse3=foo::B::parse3, $context_new=Null, $type_=B, $description="", $mime_types=vector(), $ports=vector()];
    spicy_rt::registerParser(foo::B::__parser, $scope, Null);
}

method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::C::__parse_stage1(copy view<stream> __cur, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-functions.spicy:24:10-24:16"
    local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();
    {
        hilti::debugIndent("spicy");
        local strong_ref<stream> filtered = Null;

        if ( ! filtered ) 
            __result = (*self).__parse_foo__C_stage2(__cur, __lah, __lahe, __error);

    }

    return __result;
}

method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::C::__parse_foo__C_stage2(copy view<stream> __cur, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-functions.spicy:24:10-24:16"
    local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();
    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

init function void __register_foo_C() {
}

method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::D::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-functions.spicy:25:17-27:1"
    local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();
    {
        hilti::debugIndent("spicy");
        local iterator<stream> __begin = begin(__cur);
        local strong_ref<stream> filtered = Null;

        if ( ! filtered ) 
            __result = (*self).__parse_foo__D_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error);

    }

    return __result;
}

method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::D::__parse_foo__D_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) {
    # "<...>/unused-functions.spicy:25:17-27:1"
    local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result();
    local value_ref<C> __transient__anon;
    # "<...>/unused-functions.spicy:24:10-24:16"

    # Begin parsing production: Unit: foo__C_2 ->
    __transient__anon = default<C>();
    (__cur, __lah, __lahe, __error) = (*__transient__anon).__parse_stage1(__cur, __lah, __lahe, __error);
    # End parsing production: Unit: foo__C_2 ->

    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe, __error);
    return __result;
}

method view<stream> foo::D::parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-functions.spicy:25:17-27:1"
    local value_ref<D> __unit = default<D>();
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-functions.spicy:25:17-27:1"

    # Begin parsing production: Unit: foo__D -> Resolved_5
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__D -> Resolved_5

    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

method view<stream> foo::D::parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-functions.spicy:25:17-27:1"
    local value_ref<D> __unit = default<D>();
    spicy_rt::initializeParsedUnit((*__gunit), __unit);
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-functions.spicy:25:17-27:1"

    # Begin parsing production: Unit: foo__D -> Resolved_5
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__D -> Resolved_5

    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

method view<stream> foo::D::parse2(inout value_ref<D> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static &public {
    # "<...>/unused-functions.spicy:25:17-27:1"
    local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data));
    local int<64> __lahead = 0;
    local iterator<stream> __lahead_end;
    local optional<hilti::RecoverableFailure> __error = Null;
    # "<...>/unused-functions.spicy:25:17-27:1"

    # Begin parsing production: Unit: foo__D -> Resolved_5
    (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error);
    # End parsing production: Unit: foo__D -> Resolved_5

    if ( __error ) 
        throw "successful synchronization never confirmed: %s" % (hilti::exception_what((*__error)));

    return __ncur;
}

init function void __register_foo_D() {
    foo::D::__parser = [$name="foo::D", $is_public=True, $parse1=foo::D::parse1, $parse2=foo::D::parse2, $parse3=foo::D::parse3, $context_new=Null, $type_=D, $description="", $mime_types=vector(), $ports=vector()];
    spicy_rt::registerParser(foo::D::__parser, $scope, Null);
}

init function void __register_foo_F() {
}

}
